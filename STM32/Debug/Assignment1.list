
Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cdc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003094  08005e6c  08005e6c  00006e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f00  08008f00  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f00  08008f00  00009f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f08  08008f08  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f0c  08008f0c  00009f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008f10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          0000035c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f85c  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd4  00000000  00000000  00019908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  0001c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c32  00000000  00000000  0001d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cc9  00000000  00000000  0001e522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136ce  00000000  00000000  000421eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d01eb  00000000  00000000  000558b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125aa4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a14  00000000  00000000  00125ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e54 	.word	0x08005e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005e54 	.word	0x08005e54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <button_init+0x14>)
 800056a:	f002 fcbd 	bl	8002ee8 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00

08000578 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	482f      	ldr	r0, [pc, #188]	@ (8000640 <button_scan+0xc8>)
 8000584:	f002 fcb0 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	482c      	ldr	r0, [pc, #176]	@ (8000640 <button_scan+0xc8>)
 800058e:	f002 fcab 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000592:	230a      	movs	r3, #10
 8000594:	2202      	movs	r2, #2
 8000596:	492b      	ldr	r1, [pc, #172]	@ (8000644 <button_scan+0xcc>)
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <button_scan+0xd0>)
 800059a:	f003 fb02 	bl	8003ba2 <HAL_SPI_Receive>

	int button_index = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	e03f      	b.n	800062e <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db06      	blt.n	80005c2 <button_scan+0x4a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dc03      	bgt.n	80005c2 <button_scan+0x4a>
			button_index = i + 4;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e018      	b.n	80005f4 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dd07      	ble.n	80005d8 <button_scan+0x60>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dc04      	bgt.n	80005d8 <button_scan+0x60>
			button_index = 7 - i;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f1c3 0307 	rsb	r3, r3, #7
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00d      	b.n	80005f4 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dd06      	ble.n	80005ec <button_scan+0x74>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	dc03      	bgt.n	80005ec <button_scan+0x74>
			button_index = i + 4;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3304      	adds	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e003      	b.n	80005f4 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1c3 0317 	rsb	r3, r3, #23
 80005f2:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <button_scan+0xcc>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	897b      	ldrh	r3, [r7, #10]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <button_scan+0x96>
			button_count[button_index] = 0;
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <button_scan+0xd4>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2100      	movs	r1, #0
 8000608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060c:	e009      	b.n	8000622 <button_scan+0xaa>
		else
			button_count[button_index]++;
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <button_scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	3301      	adds	r3, #1
 8000618:	b299      	uxth	r1, r3
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <button_scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	ddbc      	ble.n	80005ae <button_scan+0x36>
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	200000b8 	.word	0x200000b8
 8000648:	2000019c 	.word	0x2000019c
 800064c:	20000098 	.word	0x20000098

08000650 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	@ 0x38
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800067c:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <MX_FSMC_Init+0xec>)
 800067e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000682:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000684:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_FSMC_Init+0xec>)
 8000686:	4a2e      	ldr	r2, [pc, #184]	@ (8000740 <MX_FSMC_Init+0xf0>)
 8000688:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_FSMC_Init+0xec>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_FSMC_Init+0xec>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_FSMC_Init+0xec>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_FSMC_Init+0xec>)
 800069e:	2210      	movs	r2, #16
 80006a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_FSMC_Init+0xec>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_FSMC_Init+0xec>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <MX_FSMC_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_FSMC_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_FSMC_Init+0xec>)
 80006bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_FSMC_Init+0xec>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_FSMC_Init+0xec>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_FSMC_Init+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_FSMC_Init+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_FSMC_Init+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006e2:	230f      	movs	r3, #15
 80006e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006e6:	230f      	movs	r3, #15
 80006e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006ea:	233c      	movs	r3, #60	@ 0x3c
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80006f2:	2310      	movs	r3, #16
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80006f6:	2311      	movs	r3, #17
 80006f8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80006fa:	2300      	movs	r3, #0
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80006fe:	2308      	movs	r3, #8
 8000700:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000702:	230f      	movs	r3, #15
 8000704:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000706:	2309      	movs	r3, #9
 8000708:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800070e:	2310      	movs	r3, #16
 8000710:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000712:	2311      	movs	r3, #17
 8000714:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800071a:	463a      	mov	r2, r7
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	@ (800073c <MX_FSMC_Init+0xec>)
 8000724:	f003 fe20 	bl	8004368 <HAL_SRAM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800072e:	f001 f89f 	bl	8001870 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000732:	bf00      	nop
 8000734:	3738      	adds	r7, #56	@ 0x38
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000bc 	.word	0x200000bc
 8000740:	a0000104 	.word	0xa0000104

08000744 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <HAL_FSMC_MspInit+0x88>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d131      	bne.n	80007c4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <HAL_FSMC_MspInit+0x88>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <HAL_FSMC_MspInit+0x8c>)
 800076c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <HAL_FSMC_MspInit+0x8c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6393      	str	r3, [r2, #56]	@ 0x38
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <HAL_FSMC_MspInit+0x8c>)
 8000778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000782:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000786:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000794:	230c      	movs	r3, #12
 8000796:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <HAL_FSMC_MspInit+0x90>)
 800079e:	f002 fa07 	bl	8002bb0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007a2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80007a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007b4:	230c      	movs	r3, #12
 80007b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <HAL_FSMC_MspInit+0x94>)
 80007be:	f002 f9f7 	bl	8002bb0 <HAL_GPIO_Init>
 80007c2:	e000      	b.n	80007c6 <HAL_FSMC_MspInit+0x82>
    return;
 80007c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000010c 	.word	0x2000010c
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40020c00 	.word	0x40020c00

080007dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007e4:	f7ff ffae 	bl	8000744 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a6e      	ldr	r2, [pc, #440]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b6c      	ldr	r3, [pc, #432]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a67      	ldr	r2, [pc, #412]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b65      	ldr	r3, [pc, #404]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b61      	ldr	r3, [pc, #388]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a60      	ldr	r2, [pc, #384]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b5e      	ldr	r3, [pc, #376]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a59      	ldr	r2, [pc, #356]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b57      	ldr	r3, [pc, #348]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b53      	ldr	r3, [pc, #332]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a52      	ldr	r2, [pc, #328]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b4c      	ldr	r3, [pc, #304]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a4b      	ldr	r2, [pc, #300]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b49      	ldr	r3, [pc, #292]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a44      	ldr	r2, [pc, #272]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b42      	ldr	r3, [pc, #264]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2170      	movs	r1, #112	@ 0x70
 80008ce:	483f      	ldr	r0, [pc, #252]	@ (80009cc <MX_GPIO_Init+0x1dc>)
 80008d0:	f002 fb0a 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	483d      	ldr	r0, [pc, #244]	@ (80009d0 <MX_GPIO_Init+0x1e0>)
 80008dc:	f002 fb04 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	483b      	ldr	r0, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x1e4>)
 80008e6:	f002 faff 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f0:	4839      	ldr	r0, [pc, #228]	@ (80009d8 <MX_GPIO_Init+0x1e8>)
 80008f2:	f002 faf9 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4838      	ldr	r0, [pc, #224]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 80008fc:	f002 faf4 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000900:	2370      	movs	r3, #112	@ 0x70
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	482d      	ldr	r0, [pc, #180]	@ (80009cc <MX_GPIO_Init+0x1dc>)
 8000918:	f002 f94a 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4826      	ldr	r0, [pc, #152]	@ (80009d0 <MX_GPIO_Init+0x1e0>)
 8000936:	f002 f93b 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800093a:	23c0      	movs	r3, #192	@ 0xc0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0x1e8>)
 800094e:	f002 f92f 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000952:	2330      	movs	r3, #48	@ 0x30
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	@ (80009d0 <MX_GPIO_Init+0x1e0>)
 8000966:	f002 f923 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <MX_GPIO_Init+0x1e4>)
 8000982:	f002 f915 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <MX_GPIO_Init+0x1e8>)
 80009a0:	f002 f906 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009a4:	2308      	movs	r3, #8
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 80009bc:	f002 f8f8 	bl	8002bb0 <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3730      	adds	r7, #48	@ 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40021800 	.word	0x40021800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <LCD_WR_REG+0x1c>)
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	8013      	strh	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	600ffffe 	.word	0x600ffffe

08000a00 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <LCD_WR_DATA+0x1c>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	8053      	strh	r3, [r2, #2]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	600ffffe 	.word	0x600ffffe

08000a20 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <LCD_RD_DATA+0x20>)
 8000a28:	885b      	ldrh	r3, [r3, #2]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	b29b      	uxth	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	600ffffe 	.word	0x600ffffe

08000a44 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	4603      	mov	r3, r0
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8000a62:	202a      	movs	r0, #42	@ 0x2a
 8000a64:	f7ff ffbc 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ffc6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffc0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ffba 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffb4 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000a98:	202b      	movs	r0, #43	@ 0x2b
 8000a9a:	f7ff ffa1 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffab 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffa5 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8000ab6:	883b      	ldrh	r3, [r7, #0]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff9f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000ac2:	883b      	ldrh	r3, [r7, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff99 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000ace:	202c      	movs	r0, #44	@ 0x2c
 8000ad0:	f7ff ff86 	bl	80009e0 <LCD_WR_REG>
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd90      	pop	{r4, r7, pc}

08000adc <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <lcd_clear+0x60>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <lcd_clear+0x60>)
 8000af0:	885b      	ldrh	r3, [r3, #2]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ffa3 	bl	8000a44 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	81fb      	strh	r3, [r7, #14]
 8000b02:	e011      	b.n	8000b28 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	81bb      	strh	r3, [r7, #12]
 8000b08:	e006      	b.n	8000b18 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff77 	bl	8000a00 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000b12:	89bb      	ldrh	r3, [r7, #12]
 8000b14:	3301      	adds	r3, #1
 8000b16:	81bb      	strh	r3, [r7, #12]
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <lcd_clear+0x60>)
 8000b1a:	885b      	ldrh	r3, [r3, #2]
 8000b1c:	89ba      	ldrh	r2, [r7, #12]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3f3      	bcc.n	8000b0a <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	81fb      	strh	r3, [r7, #14]
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <lcd_clear+0x60>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3e8      	bcc.n	8000b04 <lcd_clear+0x28>
		}
	}
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000110 	.word	0x20000110

08000b40 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	88fa      	ldrh	r2, [r7, #6]
 8000b56:	88b9      	ldrh	r1, [r7, #4]
 8000b58:	88f8      	ldrh	r0, [r7, #6]
 8000b5a:	f7ff ff73 	bl	8000a44 <lcd_set_address>
	LCD_WR_DATA(color);
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff4d 	bl	8000a00 <LCD_WR_DATA>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <lcd_draw_line>:
 * @param  y2 Y coordinate of end point
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000b6e:	b590      	push	{r4, r7, lr}
 8000b70:	b08d      	sub	sp, #52	@ 0x34
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4604      	mov	r4, r0
 8000b76:	4608      	mov	r0, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4623      	mov	r3, r4
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	4603      	mov	r3, r0
 8000b82:	80bb      	strh	r3, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8000b9c:	883a      	ldrh	r2, [r7, #0]
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dd02      	ble.n	8000bb8 <lcd_draw_line+0x4a>
		incx = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e00b      	b.n	8000bd0 <lcd_draw_line+0x62>
	else if (delta_x == 0)
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <lcd_draw_line+0x56>
		incx = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e005      	b.n	8000bd0 <lcd_draw_line+0x62>
	else {
		incx = -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc8:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	425b      	negs	r3, r3
 8000bce:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	dd02      	ble.n	8000bdc <lcd_draw_line+0x6e>
		incy = 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	e00b      	b.n	8000bf4 <lcd_draw_line+0x86>
	else if (delta_y == 0)
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <lcd_draw_line+0x7a>
		incy = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e005      	b.n	8000bf4 <lcd_draw_line+0x86>
	else {
		incy = -1;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bec:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8000bf4:	6a3a      	ldr	r2, [r7, #32]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dd02      	ble.n	8000c02 <lcd_draw_line+0x94>
		distance = delta_x;
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	e001      	b.n	8000c06 <lcd_draw_line+0x98>
	else
		distance = delta_y;
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c0a:	e02b      	b.n	8000c64 <lcd_draw_line+0xf6>
		lcd_draw_point(uRow, uCol, color);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	68ba      	ldr	r2, [r7, #8]
 8000c12:	b291      	uxth	r1, r2
 8000c14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff91 	bl	8000b40 <lcd_draw_point>
		xerr += delta_x;
 8000c1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	4413      	add	r3, r2
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 8000c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance) {
 8000c2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dd07      	ble.n	8000c46 <lcd_draw_line+0xd8>
			xerr -= distance;
 8000c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8000c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dd07      	ble.n	8000c5e <lcd_draw_line+0xf0>
			yerr -= distance;
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++) {
 8000c5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c60:	3301      	adds	r3, #1
 8000c62:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dacf      	bge.n	8000c0c <lcd_draw_line+0x9e>
		}
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3734      	adds	r7, #52	@ 0x34
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}

08000c76 <lcd_draw_rectangle>:

void lcd_draw_rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af02      	add	r7, sp, #8
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	4608      	mov	r0, r1
 8000c80:	4611      	mov	r1, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	4623      	mov	r3, r4
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4603      	mov	r3, r0
 8000c8a:	80bb      	strh	r3, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
 8000c90:	4613      	mov	r3, r2
 8000c92:	803b      	strh	r3, [r7, #0]
	lcd_draw_line(x1, y1, x2, y1, color);
 8000c94:	88bc      	ldrh	r4, [r7, #4]
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	88b9      	ldrh	r1, [r7, #4]
 8000c9a:	88f8      	ldrh	r0, [r7, #6]
 8000c9c:	8b3b      	ldrh	r3, [r7, #24]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	4623      	mov	r3, r4
 8000ca2:	f7ff ff64 	bl	8000b6e <lcd_draw_line>
	lcd_draw_line(x1, y1, x1, y2, color);
 8000ca6:	883c      	ldrh	r4, [r7, #0]
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	88b9      	ldrh	r1, [r7, #4]
 8000cac:	88f8      	ldrh	r0, [r7, #6]
 8000cae:	8b3b      	ldrh	r3, [r7, #24]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	f7ff ff5b 	bl	8000b6e <lcd_draw_line>
	lcd_draw_line(x1, y2, x2, y2, color);
 8000cb8:	883c      	ldrh	r4, [r7, #0]
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	8839      	ldrh	r1, [r7, #0]
 8000cbe:	88f8      	ldrh	r0, [r7, #6]
 8000cc0:	8b3b      	ldrh	r3, [r7, #24]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	4623      	mov	r3, r4
 8000cc6:	f7ff ff52 	bl	8000b6e <lcd_draw_line>
	lcd_draw_line(x2, y1, x2, y2, color);
 8000cca:	883c      	ldrh	r4, [r7, #0]
 8000ccc:	887a      	ldrh	r2, [r7, #2]
 8000cce:	88b9      	ldrh	r1, [r7, #4]
 8000cd0:	8878      	ldrh	r0, [r7, #2]
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	f7ff ff49 	bl	8000b6e <lcd_draw_line>
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <lcd_show_char>:

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4604      	mov	r4, r0
 8000cec:	4608      	mov	r0, r1
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80bb      	strh	r3, [r7, #4]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	70fb      	strb	r3, [r7, #3]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d0e:	085b      	lsrs	r3, r3, #1
 8000d10:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	fb12 f303 	smulbb	r3, r2, r3
 8000d3a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	3b20      	subs	r3, #32
 8000d40:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	b29c      	uxth	r4, r3
 8000d50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	88b9      	ldrh	r1, [r7, #4]
 8000d62:	88f8      	ldrh	r0, [r7, #6]
 8000d64:	4622      	mov	r2, r4
 8000d66:	f7ff fe6d 	bl	8000a44 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	827b      	strh	r3, [r7, #18]
 8000d6e:	e07a      	b.n	8000e66 <lcd_show_char+0x182>
		if (sizey == 12)
 8000d70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d74:	2b0c      	cmp	r3, #12
 8000d76:	d028      	beq.n	8000dca <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000d78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d108      	bne.n	8000d92 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	8a7b      	ldrh	r3, [r7, #18]
 8000d84:	493c      	ldr	r1, [pc, #240]	@ (8000e78 <lcd_show_char+0x194>)
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	440a      	add	r2, r1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	e01b      	b.n	8000dca <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000d92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d96:	2b18      	cmp	r3, #24
 8000d98:	d10b      	bne.n	8000db2 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000d9a:	78fa      	ldrb	r2, [r7, #3]
 8000d9c:	8a79      	ldrh	r1, [r7, #18]
 8000d9e:	4837      	ldr	r0, [pc, #220]	@ (8000e7c <lcd_show_char+0x198>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	4403      	add	r3, r0
 8000daa:	440b      	add	r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	75fb      	strb	r3, [r7, #23]
 8000db0:	e00b      	b.n	8000dca <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000db2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000db6:	2b20      	cmp	r3, #32
 8000db8:	d15a      	bne.n	8000e70 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	8a7b      	ldrh	r3, [r7, #18]
 8000dbe:	4930      	ldr	r1, [pc, #192]	@ (8000e80 <lcd_show_char+0x19c>)
 8000dc0:	0192      	lsls	r2, r2, #6
 8000dc2:	440a      	add	r2, r1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75bb      	strb	r3, [r7, #22]
 8000dce:	e044      	b.n	8000e5a <lcd_show_char+0x176>
			if (!mode) {
 8000dd0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d120      	bne.n	8000e1a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000dd8:	7dfa      	ldrb	r2, [r7, #23]
 8000dda:	7dbb      	ldrb	r3, [r7, #22]
 8000ddc:	fa42 f303 	asr.w	r3, r2, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000de8:	883b      	ldrh	r3, [r7, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fe08 	bl	8000a00 <LCD_WR_DATA>
 8000df0:	e003      	b.n	8000dfa <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000df2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe03 	bl	8000a00 <LCD_WR_DATA>
				m++;
 8000dfa:	7d7b      	ldrb	r3, [r7, #21]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000e00:	7d7b      	ldrb	r3, [r7, #21]
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e08:	fb01 f202 	mul.w	r2, r1, r2
 8000e0c:	1a9b      	subs	r3, r3, r2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d11f      	bne.n	8000e54 <lcd_show_char+0x170>
					m = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	757b      	strb	r3, [r7, #21]
					break;
 8000e18:	e022      	b.n	8000e60 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000e1a:	7dfa      	ldrb	r2, [r7, #23]
 8000e1c:	7dbb      	ldrb	r3, [r7, #22]
 8000e1e:	fa42 f303 	asr.w	r3, r2, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8000e2a:	883a      	ldrh	r2, [r7, #0]
 8000e2c:	88b9      	ldrh	r1, [r7, #4]
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fe85 	bl	8000b40 <lcd_draw_point>
				x++;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000e3c:	88fa      	ldrh	r2, [r7, #6]
 8000e3e:	8a3b      	ldrh	r3, [r7, #16]
 8000e40:	1ad2      	subs	r2, r2, r3
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d105      	bne.n	8000e54 <lcd_show_char+0x170>
					x = x0;
 8000e48:	8a3b      	ldrh	r3, [r7, #16]
 8000e4a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000e4c:	88bb      	ldrh	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	80bb      	strh	r3, [r7, #4]
					break;
 8000e52:	e005      	b.n	8000e60 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000e54:	7dbb      	ldrb	r3, [r7, #22]
 8000e56:	3301      	adds	r3, #1
 8000e58:	75bb      	strb	r3, [r7, #22]
 8000e5a:	7dbb      	ldrb	r3, [r7, #22]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	d9b7      	bls.n	8000dd0 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000e60:	8a7b      	ldrh	r3, [r7, #18]
 8000e62:	3301      	adds	r3, #1
 8000e64:	827b      	strh	r3, [r7, #18]
 8000e66:	8a7a      	ldrh	r2, [r7, #18]
 8000e68:	89bb      	ldrh	r3, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d380      	bcc.n	8000d70 <lcd_show_char+0x8c>
 8000e6e:	e000      	b.n	8000e72 <lcd_show_char+0x18e>
			return;
 8000e70:	bf00      	nop
				}
			}
		}
	}
}
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	08005e90 	.word	0x08005e90
 8000e7c:	08006480 	.word	0x08006480
 8000e80:	08007650 	.word	0x08007650

08000e84 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000e98:	e004      	b.n	8000ea4 <mypow+0x20>
		result *= m;
 8000e9a:	79fa      	ldrb	r2, [r7, #7]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	1e5a      	subs	r2, r3, #1
 8000ea8:	71ba      	strb	r2, [r7, #6]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f5      	bne.n	8000e9a <mypow+0x16>
	return result;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8000ede:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e059      	b.n	8000fa0 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8000eec:	887c      	ldrh	r4, [r7, #2]
 8000eee:	787a      	ldrb	r2, [r7, #1]
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	200a      	movs	r0, #10
 8000efe:	f7ff ffc1 	bl	8000e84 <mypow>
 8000f02:	4603      	mov	r3, r0
 8000f04:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <lcd_show_int_num+0xf8>)
 8000f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	1aca      	subs	r2, r1, r3
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d121      	bne.n	8000f68 <lcd_show_int_num+0xac>
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	da1c      	bge.n	8000f68 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8000f2e:	7b3b      	ldrb	r3, [r7, #12]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d117      	bne.n	8000f64 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	fb12 f303 	smulbb	r3, r2, r3
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4413      	add	r3, r2
 8000f46:	b298      	uxth	r0, r3
 8000f48:	8c3a      	ldrh	r2, [r7, #32]
 8000f4a:	88b9      	ldrh	r1, [r7, #4]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	f7ff fec1 	bl	8000ce4 <lcd_show_char>
				continue;
 8000f62:	e01a      	b.n	8000f9a <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	fb12 f303 	smulbb	r3, r2, r3
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b298      	uxth	r0, r3
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	3330      	adds	r3, #48	@ 0x30
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	8c3c      	ldrh	r4, [r7, #32]
 8000f84:	88b9      	ldrh	r1, [r7, #4]
 8000f86:	2300      	movs	r3, #0
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	4623      	mov	r3, r4
 8000f96:	f7ff fea5 	bl	8000ce4 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	787b      	ldrb	r3, [r7, #1]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3a1      	bcc.n	8000eec <lcd_show_int_num+0x30>
	}
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	cccccccd 	.word	0xcccccccd

08000fb8 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <lcd_set_direction+0x44>)
 8000fd4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd8:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <lcd_set_direction+0x44>)
 8000fdc:	22f0      	movs	r2, #240	@ 0xf0
 8000fde:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000fe0:	e006      	b.n	8000ff0 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <lcd_set_direction+0x44>)
 8000fe4:	22f0      	movs	r2, #240	@ 0xf0
 8000fe6:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <lcd_set_direction+0x44>)
 8000fea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fee:	805a      	strh	r2, [r3, #2]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	20000110 	.word	0x20000110

08001000 <lcd_init>:

void lcd_init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100a:	48aa      	ldr	r0, [pc, #680]	@ (80012b4 <lcd_init+0x2b4>)
 800100c:	f001 ff6c 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001010:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001014:	f001 fc96 	bl	8002944 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101e:	48a5      	ldr	r0, [pc, #660]	@ (80012b4 <lcd_init+0x2b4>)
 8001020:	f001 ff62 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001024:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001028:	f001 fc8c 	bl	8002944 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8001032:	20d3      	movs	r0, #211	@ 0xd3
 8001034:	f7ff fcd4 	bl	80009e0 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001038:	f7ff fcf2 	bl	8000a20 <LCD_RD_DATA>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b9d      	ldr	r3, [pc, #628]	@ (80012b8 <lcd_init+0x2b8>)
 8001042:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001044:	f7ff fcec 	bl	8000a20 <LCD_RD_DATA>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	4b9a      	ldr	r3, [pc, #616]	@ (80012b8 <lcd_init+0x2b8>)
 800104e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001050:	f7ff fce6 	bl	8000a20 <LCD_RD_DATA>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b97      	ldr	r3, [pc, #604]	@ (80012b8 <lcd_init+0x2b8>)
 800105a:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 800105c:	4b96      	ldr	r3, [pc, #600]	@ (80012b8 <lcd_init+0x2b8>)
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b94      	ldr	r3, [pc, #592]	@ (80012b8 <lcd_init+0x2b8>)
 8001066:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001068:	f7ff fcda 	bl	8000a20 <LCD_RD_DATA>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	4b91      	ldr	r3, [pc, #580]	@ (80012b8 <lcd_init+0x2b8>)
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	4313      	orrs	r3, r2
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b8f      	ldr	r3, [pc, #572]	@ (80012b8 <lcd_init+0x2b8>)
 800107a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800107c:	20cf      	movs	r0, #207	@ 0xcf
 800107e:	f7ff fcaf 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fcbc 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001088:	20c1      	movs	r0, #193	@ 0xc1
 800108a:	f7ff fcb9 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800108e:	2030      	movs	r0, #48	@ 0x30
 8001090:	f7ff fcb6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001094:	20ed      	movs	r0, #237	@ 0xed
 8001096:	f7ff fca3 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800109a:	2064      	movs	r0, #100	@ 0x64
 800109c:	f7ff fcb0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f7ff fcad 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80010a6:	2012      	movs	r0, #18
 80010a8:	f7ff fcaa 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80010ac:	2081      	movs	r0, #129	@ 0x81
 80010ae:	f7ff fca7 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80010b2:	20e8      	movs	r0, #232	@ 0xe8
 80010b4:	f7ff fc94 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80010b8:	2085      	movs	r0, #133	@ 0x85
 80010ba:	f7ff fca1 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80010be:	2010      	movs	r0, #16
 80010c0:	f7ff fc9e 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80010c4:	207a      	movs	r0, #122	@ 0x7a
 80010c6:	f7ff fc9b 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80010ca:	20cb      	movs	r0, #203	@ 0xcb
 80010cc:	f7ff fc88 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80010d0:	2039      	movs	r0, #57	@ 0x39
 80010d2:	f7ff fc95 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f7ff fc92 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fc8f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80010e2:	2034      	movs	r0, #52	@ 0x34
 80010e4:	f7ff fc8c 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff fc89 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80010ee:	20f7      	movs	r0, #247	@ 0xf7
 80010f0:	f7ff fc76 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80010f4:	2020      	movs	r0, #32
 80010f6:	f7ff fc83 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80010fa:	20ea      	movs	r0, #234	@ 0xea
 80010fc:	f7ff fc70 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fc7d 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff fc7a 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800110c:	20c0      	movs	r0, #192	@ 0xc0
 800110e:	f7ff fc67 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001112:	201b      	movs	r0, #27
 8001114:	f7ff fc74 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001118:	20c1      	movs	r0, #193	@ 0xc1
 800111a:	f7ff fc61 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fc6e 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001124:	20c5      	movs	r0, #197	@ 0xc5
 8001126:	f7ff fc5b 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800112a:	2030      	movs	r0, #48	@ 0x30
 800112c:	f7ff fc68 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001130:	2030      	movs	r0, #48	@ 0x30
 8001132:	f7ff fc65 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001136:	20c7      	movs	r0, #199	@ 0xc7
 8001138:	f7ff fc52 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800113c:	20b7      	movs	r0, #183	@ 0xb7
 800113e:	f7ff fc5f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001142:	2036      	movs	r0, #54	@ 0x36
 8001144:	f7ff fc4c 	bl	80009e0 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001148:	2008      	movs	r0, #8
 800114a:	f7ff fc59 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800114e:	203a      	movs	r0, #58	@ 0x3a
 8001150:	f7ff fc46 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001154:	2055      	movs	r0, #85	@ 0x55
 8001156:	f7ff fc53 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800115a:	20b1      	movs	r0, #177	@ 0xb1
 800115c:	f7ff fc40 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fc4d 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001166:	201a      	movs	r0, #26
 8001168:	f7ff fc4a 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800116c:	20b6      	movs	r0, #182	@ 0xb6
 800116e:	f7ff fc37 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001172:	200a      	movs	r0, #10
 8001174:	f7ff fc44 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001178:	20a2      	movs	r0, #162	@ 0xa2
 800117a:	f7ff fc41 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800117e:	20f2      	movs	r0, #242	@ 0xf2
 8001180:	f7ff fc2e 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fc3b 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800118a:	2026      	movs	r0, #38	@ 0x26
 800118c:	f7ff fc28 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff fc35 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001196:	20e0      	movs	r0, #224	@ 0xe0
 8001198:	f7ff fc22 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800119c:	200f      	movs	r0, #15
 800119e:	f7ff fc2f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80011a2:	202a      	movs	r0, #42	@ 0x2a
 80011a4:	f7ff fc2c 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80011a8:	2028      	movs	r0, #40	@ 0x28
 80011aa:	f7ff fc29 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011ae:	2008      	movs	r0, #8
 80011b0:	f7ff fc26 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80011b4:	200e      	movs	r0, #14
 80011b6:	f7ff fc23 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80011ba:	2008      	movs	r0, #8
 80011bc:	f7ff fc20 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80011c0:	2054      	movs	r0, #84	@ 0x54
 80011c2:	f7ff fc1d 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80011c6:	20a9      	movs	r0, #169	@ 0xa9
 80011c8:	f7ff fc1a 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80011cc:	2043      	movs	r0, #67	@ 0x43
 80011ce:	f7ff fc17 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80011d2:	200a      	movs	r0, #10
 80011d4:	f7ff fc14 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011d8:	200f      	movs	r0, #15
 80011da:	f7ff fc11 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fc0e 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fc0b 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fc08 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fc05 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80011f6:	20e1      	movs	r0, #225	@ 0xe1
 80011f8:	f7ff fbf2 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fbff 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001202:	2015      	movs	r0, #21
 8001204:	f7ff fbfc 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001208:	2017      	movs	r0, #23
 800120a:	f7ff fbf9 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800120e:	2007      	movs	r0, #7
 8001210:	f7ff fbf6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001214:	2011      	movs	r0, #17
 8001216:	f7ff fbf3 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800121a:	2006      	movs	r0, #6
 800121c:	f7ff fbf0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001220:	202b      	movs	r0, #43	@ 0x2b
 8001222:	f7ff fbed 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001226:	2056      	movs	r0, #86	@ 0x56
 8001228:	f7ff fbea 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800122c:	203c      	movs	r0, #60	@ 0x3c
 800122e:	f7ff fbe7 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001232:	2005      	movs	r0, #5
 8001234:	f7ff fbe4 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001238:	2010      	movs	r0, #16
 800123a:	f7ff fbe1 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800123e:	200f      	movs	r0, #15
 8001240:	f7ff fbde 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001244:	203f      	movs	r0, #63	@ 0x3f
 8001246:	f7ff fbdb 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800124a:	203f      	movs	r0, #63	@ 0x3f
 800124c:	f7ff fbd8 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001250:	200f      	movs	r0, #15
 8001252:	f7ff fbd5 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001256:	202b      	movs	r0, #43	@ 0x2b
 8001258:	f7ff fbc2 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fbcf 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fbcc 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001268:	2001      	movs	r0, #1
 800126a:	f7ff fbc9 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800126e:	203f      	movs	r0, #63	@ 0x3f
 8001270:	f7ff fbc6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001274:	202a      	movs	r0, #42	@ 0x2a
 8001276:	f7ff fbb3 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff fbc0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fbbd 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fbba 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800128c:	20ef      	movs	r0, #239	@ 0xef
 800128e:	f7ff fbb7 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001292:	2011      	movs	r0, #17
 8001294:	f7ff fba4 	bl	80009e0 <LCD_WR_REG>
	HAL_Delay(120);
 8001298:	2078      	movs	r0, #120	@ 0x78
 800129a:	f001 fb53 	bl	8002944 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800129e:	2029      	movs	r0, #41	@ 0x29
 80012a0:	f7ff fb9e 	bl	80009e0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012aa:	4804      	ldr	r0, [pc, #16]	@ (80012bc <lcd_init+0x2bc>)
 80012ac:	f001 fe1c 	bl	8002ee8 <HAL_GPIO_WritePin>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020800 	.word	0x40020800
 80012b8:	20000110 	.word	0x20000110
 80012bc:	40020000 	.word	0x40020000

080012c0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b298      	uxth	r0, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	8b3a      	ldrh	r2, [r7, #24]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc29 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b298      	uxth	r0, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	8b3a      	ldrh	r2, [r7, #24]
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fc19 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	b298      	uxth	r0, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	b29a      	uxth	r2, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	8b3a      	ldrh	r2, [r7, #24]
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc09 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	b29b      	uxth	r3, r3
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	b298      	uxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	8b3a      	ldrh	r2, [r7, #24]
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fbf9 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b298      	uxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4413      	add	r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	8b3a      	ldrh	r2, [r7, #24]
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbe9 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	b29a      	uxth	r2, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b298      	uxth	r0, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4413      	add	r3, r2
 8001384:	b29b      	uxth	r3, r3
 8001386:	8b3a      	ldrh	r2, [r7, #24]
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fbd9 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	b29a      	uxth	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b298      	uxth	r0, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	8b3a      	ldrh	r2, [r7, #24]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fbc9 	bl	8000b40 <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b298      	uxth	r0, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	8b3a      	ldrh	r2, [r7, #24]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fbb9 	bl	8000b40 <lcd_draw_point>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <lcd_draw_circle>:

void lcd_draw_circle(int xc, int yc, uint16_t c, int r, int fill)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b08a      	sub	sp, #40	@ 0x28
 80013da:	af02      	add	r7, sp, #8
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	f1c3 0303 	rsb	r3, r3, #3
 80013f6:	613b      	str	r3, [r7, #16]

	if (fill) {
 80013f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04f      	beq.n	800149e <lcd_draw_circle+0xc8>
		while (x <= y) {
 80013fe:	e029      	b.n	8001454 <lcd_draw_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <lcd_draw_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff ff55 	bl	80012c0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	429a      	cmp	r2, r3
 8001422:	ddf0      	ble.n	8001406 <lcd_draw_circle+0x30>

			if (d < 0) {
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da06      	bge.n	8001438 <lcd_draw_circle+0x62>
				d = d + 4 * x + 6;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4413      	add	r3, r2
 8001432:	3306      	adds	r3, #6
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	e00a      	b.n	800144e <lcd_draw_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	009a      	lsls	r2, r3, #2
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4413      	add	r3, r2
 8001444:	330a      	adds	r3, #10
 8001446:	613b      	str	r3, [r7, #16]
				y--;
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	3b01      	subs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3301      	adds	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	429a      	cmp	r2, r3
 800145a:	ddd1      	ble.n	8001400 <lcd_draw_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800145c:	e023      	b.n	80014a6 <lcd_draw_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff ff29 	bl	80012c0 <_draw_circle_8>
			if (d < 0) {
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da06      	bge.n	8001482 <lcd_draw_circle+0xac>
				d = d + 4 * x + 6;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	009a      	lsls	r2, r3, #2
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4413      	add	r3, r2
 800147c:	3306      	adds	r3, #6
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e00a      	b.n	8001498 <lcd_draw_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	009a      	lsls	r2, r3, #2
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4413      	add	r3, r2
 800148e:	330a      	adds	r3, #10
 8001490:	613b      	str	r3, [r7, #16]
				y--;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3b01      	subs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
			x++;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	3301      	adds	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dddb      	ble.n	800145e <lcd_draw_circle+0x88>
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <lcd_show_string>:

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b08b      	sub	sp, #44	@ 0x2c
 80014b4:	af04      	add	r7, sp, #16
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	81fb      	strh	r3, [r7, #14]
 80014be:	460b      	mov	r3, r1
 80014c0:	81bb      	strh	r3, [r7, #12]
 80014c2:	4613      	mov	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80014ce:	e048      	b.n	8001562 <lcd_show_string+0xb2>
		if (!bHz) {
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d145      	bne.n	8001562 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80014d6:	89fa      	ldrh	r2, [r7, #14]
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <lcd_show_string+0xc4>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014e2:	085b      	lsrs	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	1acb      	subs	r3, r1, r3
 80014e8:	429a      	cmp	r2, r3
 80014ea:	dc3f      	bgt.n	800156c <lcd_show_string+0xbc>
 80014ec:	89ba      	ldrh	r2, [r7, #12]
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <lcd_show_string+0xc4>)
 80014f0:	885b      	ldrh	r3, [r3, #2]
 80014f2:	4619      	mov	r1, r3
 80014f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014f8:	1acb      	subs	r3, r1, r3
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dc36      	bgt.n	800156c <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b80      	cmp	r3, #128	@ 0x80
 8001504:	d902      	bls.n	800150c <lcd_show_string+0x5c>
				bHz = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
 800150a:	e02a      	b.n	8001562 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b0d      	cmp	r3, #13
 8001512:	d10b      	bne.n	800152c <lcd_show_string+0x7c>
					y += sizey;
 8001514:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001518:	b29a      	uxth	r2, r3
 800151a:	89bb      	ldrh	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001520:	8abb      	ldrh	r3, [r7, #20]
 8001522:	81fb      	strh	r3, [r7, #14]
					str++;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3301      	adds	r3, #1
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	e017      	b.n	800155c <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	88fc      	ldrh	r4, [r7, #6]
 8001532:	89b9      	ldrh	r1, [r7, #12]
 8001534:	89f8      	ldrh	r0, [r7, #14]
 8001536:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4623      	mov	r3, r4
 8001548:	f7ff fbcc 	bl	8000ce4 <lcd_show_char>
					x += sizey / 2;
 800154c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	4413      	add	r3, r2
 800155a:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3301      	adds	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1b2      	bne.n	80014d0 <lcd_show_string+0x20>
 800156a:	e000      	b.n	800156e <lcd_show_string+0xbe>
				return;
 800156c:	bf00      	nop
			}
		}
	}
}
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	20000110 	.word	0x20000110

08001578 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	2140      	movs	r1, #64	@ 0x40
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <led_7seg_init+0x14>)
 8001582:	f001 fcb1 	bl	8002ee8 <HAL_GPIO_WritePin>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021800 	.word	0x40021800

08001590 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt (Be called in default in Timer 4 callback function)
 * @retval 	None
 */
void led_7seg_display() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001594:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <led_7seg_display+0x104>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <led_7seg_display+0x104>)
 800159e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 80015a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001698 <led_7seg_display+0x108>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <led_7seg_display+0x10c>)
 80015a8:	5c9b      	ldrb	r3, [r3, r2]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b39      	ldr	r3, [pc, #228]	@ (8001694 <led_7seg_display+0x104>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <led_7seg_display+0x104>)
 80015bc:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 80015be:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <led_7seg_display+0x108>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d846      	bhi.n	8001654 <led_7seg_display+0xc4>
 80015c6:	a201      	add	r2, pc, #4	@ (adr r2, 80015cc <led_7seg_display+0x3c>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015fb 	.word	0x080015fb
 80015d4:	08001619 	.word	0x08001619
 80015d8:	08001637 	.word	0x08001637
	case 0:
		spi_buffer |= 0x00b0;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <led_7seg_display+0x104>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <led_7seg_display+0x104>)
 80015e8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <led_7seg_display+0x104>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <led_7seg_display+0x104>)
 80015f6:	801a      	strh	r2, [r3, #0]
		break;
 80015f8:	e02d      	b.n	8001656 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <led_7seg_display+0x104>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <led_7seg_display+0x104>)
 8001606:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <led_7seg_display+0x104>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f023 0320 	bic.w	r3, r3, #32
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <led_7seg_display+0x104>)
 8001614:	801a      	strh	r2, [r3, #0]
		break;
 8001616:	e01e      	b.n	8001656 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <led_7seg_display+0x104>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <led_7seg_display+0x104>)
 8001624:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <led_7seg_display+0x104>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	f023 0310 	bic.w	r3, r3, #16
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <led_7seg_display+0x104>)
 8001632:	801a      	strh	r2, [r3, #0]
		break;
 8001634:	e00f      	b.n	8001656 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <led_7seg_display+0x104>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <led_7seg_display+0x104>)
 8001642:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <led_7seg_display+0x104>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <led_7seg_display+0x104>)
 8001650:	801a      	strh	r2, [r3, #0]
		break;
 8001652:	e000      	b.n	8001656 <led_7seg_display+0xc6>
	default:
		break;
 8001654:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <led_7seg_display+0x108>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	425a      	negs	r2, r3
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	bf58      	it	pl
 8001668:	4253      	negpl	r3, r2
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <led_7seg_display+0x108>)
 800166e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2140      	movs	r1, #64	@ 0x40
 8001674:	480a      	ldr	r0, [pc, #40]	@ (80016a0 <led_7seg_display+0x110>)
 8001676:	f001 fc37 	bl	8002ee8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 800167a:	2301      	movs	r3, #1
 800167c:	2202      	movs	r2, #2
 800167e:	4905      	ldr	r1, [pc, #20]	@ (8001694 <led_7seg_display+0x104>)
 8001680:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <led_7seg_display+0x114>)
 8001682:	f002 f952 	bl	800392a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2140      	movs	r1, #64	@ 0x40
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <led_7seg_display+0x110>)
 800168c:	f001 fc2c 	bl	8002ee8 <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000000e 	.word	0x2000000e
 8001698:	20000116 	.word	0x20000116
 800169c:	20000000 	.word	0x20000000
 80016a0:	40021800 	.word	0x40021800
 80016a4:	2000019c 	.word	0x2000019c

080016a8 <led_7seg_set_digit>:
 * @param  	num	Number displayed
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led_7seg_set_digit(int num, int position, uint8_t show_dot) {
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 9) {
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0e      	blt.n	80016da <led_7seg_set_digit+0x32>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b09      	cmp	r3, #9
 80016c0:	dc0b      	bgt.n	80016da <led_7seg_set_digit+0x32>
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 80016c2:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <led_7seg_set_digit+0x40>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b2d9      	uxtb	r1, r3
 80016d0:	4a06      	ldr	r2, [pc, #24]	@ (80016ec <led_7seg_set_digit+0x44>)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	4413      	add	r3, r2
 80016d6:	460a      	mov	r2, r1
 80016d8:	701a      	strb	r2, [r3, #0]
	}
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000004 	.word	0x20000004
 80016ec:	20000000 	.word	0x20000000

080016f0 <led_7seg_set_colon>:
 *          This parameter can be one of the following values:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led_7seg_set_colon(uint8_t status) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d107      	bne.n	8001710 <led_7seg_set_colon+0x20>
		spi_buffer &= ~(1 << 3);
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <led_7seg_set_colon+0x3c>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	f023 0308 	bic.w	r3, r3, #8
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <led_7seg_set_colon+0x3c>)
 800170c:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 800170e:	e006      	b.n	800171e <led_7seg_set_colon+0x2e>
		spi_buffer |= (1 << 3);
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <led_7seg_set_colon+0x3c>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <led_7seg_set_colon+0x3c>)
 800171c:	801a      	strh	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	2000000e 	.word	0x2000000e

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f001 f894 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f820 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173c:	f7ff f858 	bl	80007f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001740:	f000 ff86 	bl	8002650 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001744:	f000 fdc2 	bl	80022cc <MX_SPI1_Init>
  MX_FSMC_Init();
 8001748:	f7fe ff82 	bl	8000650 <MX_FSMC_Init>
  MX_TIM4_Init();
 800174c:	f000 ffcc 	bl	80026e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	init_system();
 8001750:	f000 f87e 	bl	8001850 <init_system>
	timer2_set(50);
 8001754:	2032      	movs	r0, #50	@ 0x32
 8001756:	f000 fd35 	bl	80021c4 <timer2_set>
	timer4_set(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fd4e 	bl	80021fc <timer4_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (timer2_flag) {
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <main+0x48>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0fb      	beq.n	8001760 <main+0x30>
			timer2_flag = 0;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <main+0x48>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
			button_scan();
 800176e:	f7fe ff03 	bl	8000578 <button_scan>

			game_process();
 8001772:	f000 f94b 	bl	8001a0c <game_process>
		if (timer2_flag) {
 8001776:	e7f3      	b.n	8001760 <main+0x30>
 8001778:	20000191 	.word	0x20000191

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	@ 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	2230      	movs	r2, #48	@ 0x30
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fc82 	bl	8005094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <SystemClock_Config+0xcc>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	4a27      	ldr	r2, [pc, #156]	@ (8001848 <SystemClock_Config+0xcc>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b0:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <SystemClock_Config+0xd0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a21      	ldr	r2, [pc, #132]	@ (800184c <SystemClock_Config+0xd0>)
 80017c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e0:	2310      	movs	r3, #16
 80017e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	2302      	movs	r3, #2
 80017e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ec:	2308      	movs	r3, #8
 80017ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017f0:	23a8      	movs	r3, #168	@ 0xa8
 80017f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fba5 	bl	8002f50 <HAL_RCC_OscConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800180c:	f000 f830 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001810:	230f      	movs	r3, #15
 8001812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001814:	2302      	movs	r3, #2
 8001816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800181c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001822:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2105      	movs	r1, #5
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fe06 	bl	8003440 <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800183a:	f000 f819 	bl	8001870 <Error_Handler>
  }
}
 800183e:	bf00      	nop
 8001840:	3750      	adds	r7, #80	@ 0x50
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000

08001850 <init_system>:

/* USER CODE BEGIN 4 */
void init_system() {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	button_init();
 8001854:	f7fe fe84 	bl	8000560 <button_init>
	led_7seg_init();
 8001858:	f7ff fe8e 	bl	8001578 <led_7seg_init>
	lcd_init();
 800185c:	f7ff fbd0 	bl	8001000 <lcd_init>

	timer2_init();
 8001860:	f000 fc9c 	bl	800219c <timer2_init>

	timer4_init();
 8001864:	f000 fca4 	bl	80021b0 <timer4_init>

	game_init();
 8001868:	f000 f808 	bl	800187c <game_init>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <Error_Handler+0x8>

0800187c <game_init>:
 * @retval 	None
 */
int TOTAL_SCORE = MAZE_ROW_N * MAZE_COLUMN_N - 1;

void game_init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af04      	add	r7, sp, #16
	lcd_clear(BACKGROUND_COLOR);
 8001882:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001886:	f7ff f929 	bl	8000adc <lcd_clear>
	lcd_draw_rectangle(MAZE_TOP_BORDER, MAZE_LEFT_BORDER, MAZE_BOTTOM_BORDER, MAZE_RIGHT_BORDER, BLACK);
 800188a:	2300      	movs	r3, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	23dc      	movs	r3, #220	@ 0xdc
 8001890:	22dc      	movs	r2, #220	@ 0xdc
 8001892:	2114      	movs	r1, #20
 8001894:	2014      	movs	r0, #20
 8001896:	f7ff f9ee 	bl	8000c76 <lcd_draw_rectangle>
	lcd_show_string(20, 230, "Extremely simple PAC-MAN", BLACK, BACKGROUND_COLOR, 16, 0);
 800189a:	2300      	movs	r3, #0
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2310      	movs	r3, #16
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	4a53      	ldr	r2, [pc, #332]	@ (80019f8 <game_init+0x17c>)
 80018ac:	21e6      	movs	r1, #230	@ 0xe6
 80018ae:	2014      	movs	r0, #20
 80018b0:	f7ff fdfe 	bl	80014b0 <lcd_show_string>
	lcd_show_string(20, 250, "Score: ", BLACK, BACKGROUND_COLOR, 16, 0);
 80018b4:	2300      	movs	r3, #0
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2310      	movs	r3, #16
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	4a4d      	ldr	r2, [pc, #308]	@ (80019fc <game_init+0x180>)
 80018c6:	21fa      	movs	r1, #250	@ 0xfa
 80018c8:	2014      	movs	r0, #20
 80018ca:	f7ff fdf1 	bl	80014b0 <lcd_show_string>

	lcd_show_int_num(80, 250, 0, 1, RED, BACKGROUND_COLOR, 16);
 80018ce:	2310      	movs	r3, #16
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	2200      	movs	r2, #0
 80018e2:	21fa      	movs	r1, #250	@ 0xfa
 80018e4:	2050      	movs	r0, #80	@ 0x50
 80018e6:	f7ff fae9 	bl	8000ebc <lcd_show_int_num>

	led_7seg_set_colon(0);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff ff00 	bl	80016f0 <led_7seg_set_colon>
	led_7seg_set_digit(0, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fed7 	bl	80016a8 <led_7seg_set_digit>
	led_7seg_set_digit(0, 1, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2101      	movs	r1, #1
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fed2 	bl	80016a8 <led_7seg_set_digit>
	led_7seg_set_digit(0, 2, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2102      	movs	r1, #2
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff fecd 	bl	80016a8 <led_7seg_set_digit>
	led_7seg_set_digit(0, 3, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2103      	movs	r1, #3
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fec8 	bl	80016a8 <led_7seg_set_digit>

	for (int i = 0; i < MAZE_ROW_N; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	e01f      	b.n	800195e <game_init+0xe2>
	{
		for (int j = 0; j < MAZE_COLUMN_N; j++)
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	e016      	b.n	8001952 <game_init+0xd6>
		{
			maze.cells[i][j].is_pac_dot = 1;	// Assume all cells initially have a pac-dot
 8001924:	4936      	ldr	r1, [pc, #216]	@ (8001a00 <game_init+0x184>)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	18ca      	adds	r2, r1, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	4413      	add	r3, r2
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
			pac_dot_draw(i, j, PAC_DOTS_COLOR); // Draw pac-dot on the maze
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	b2d1      	uxtb	r1, r2
 8001942:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fb7e 	bl	8002048 <pac_dot_draw>
		for (int j = 0; j < MAZE_COLUMN_N; j++)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b09      	cmp	r3, #9
 8001956:	dde5      	ble.n	8001924 <game_init+0xa8>
	for (int i = 0; i < MAZE_ROW_N; i++)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b09      	cmp	r3, #9
 8001962:	dddc      	ble.n	800191e <game_init+0xa2>
		}
	}

	pacman.i = PACMAN_STARTING_I;
 8001964:	4b27      	ldr	r3, [pc, #156]	@ (8001a04 <game_init+0x188>)
 8001966:	2205      	movs	r2, #5
 8001968:	701a      	strb	r2, [r3, #0]
	pacman.j = PACMAN_STARTING_J;
 800196a:	4b26      	ldr	r3, [pc, #152]	@ (8001a04 <game_init+0x188>)
 800196c:	2205      	movs	r2, #5
 800196e:	705a      	strb	r2, [r3, #1]
	pacman.i_pre = pacman.i;
 8001970:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <game_init+0x188>)
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <game_init+0x188>)
 8001976:	709a      	strb	r2, [r3, #2]
	pacman.j_pre = pacman.j;
 8001978:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <game_init+0x188>)
 800197a:	785a      	ldrb	r2, [r3, #1]
 800197c:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <game_init+0x188>)
 800197e:	70da      	strb	r2, [r3, #3]
	pacman.direction = STOP;
 8001980:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <game_init+0x188>)
 8001982:	2204      	movs	r2, #4
 8001984:	711a      	strb	r2, [r3, #4]
	pacman.score = 0;
 8001986:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <game_init+0x188>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
	maze.cells[pacman.i][pacman.j].is_pac_dot = 0; // reset maze cell at pacman position
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <game_init+0x188>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <game_init+0x188>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	4618      	mov	r0, r3
 8001998:	4a19      	ldr	r2, [pc, #100]	@ (8001a00 <game_init+0x184>)
 800199a:	460b      	mov	r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	4403      	add	r3, r0
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
	pacman_draw(pacman.i, pacman.j, PACMAN_COLOR);
 80019aa:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <game_init+0x188>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <game_init+0x188>)
 80019b0:	7851      	ldrb	r1, [r2, #1]
 80019b2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fb69 	bl	800208e <pacman_draw>

	ghost.i = GHOST_STARTING_I;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <game_init+0x18c>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
	ghost.j = GHOST_STARTING_J;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <game_init+0x18c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	705a      	strb	r2, [r3, #1]
	ghost.i_pre = ghost.i;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <game_init+0x18c>)
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <game_init+0x18c>)
 80019ce:	709a      	strb	r2, [r3, #2]
	ghost.j_pre = ghost.j;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <game_init+0x18c>)
 80019d2:	785a      	ldrb	r2, [r3, #1]
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <game_init+0x18c>)
 80019d6:	70da      	strb	r2, [r3, #3]
	ghost.direction = STOP;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <game_init+0x18c>)
 80019da:	2204      	movs	r2, #4
 80019dc:	711a      	strb	r2, [r3, #4]
	ghost_draw(ghost.i, ghost.j, GHOST_COLOR);
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <game_init+0x18c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <game_init+0x18c>)
 80019e4:	7851      	ldrb	r1, [r2, #1]
 80019e6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fb72 	bl	80020d4 <ghost_draw>
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	08005e6c 	.word	0x08005e6c
 80019fc:	08005e88 	.word	0x08005e88
 8001a00:	2000012c 	.word	0x2000012c
 8001a04:	20000118 	.word	0x20000118
 8001a08:	20000124 	.word	0x20000124

08001a0c <game_process>:
 * @param  	None
 * @note  	Call in loop (main) every 50ms
 * @retval 	None
 */
void game_process(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	static uint8_t counter_game = 0;
	counter_game = (counter_game + 1) % 20;
 8001a10:	4b55      	ldr	r3, [pc, #340]	@ (8001b68 <game_process+0x15c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <game_process+0x160>)
 8001a18:	fb83 1302 	smull	r1, r3, r3, r2
 8001a1c:	10d9      	asrs	r1, r3, #3
 8001a1e:	17d3      	asrs	r3, r2, #31
 8001a20:	1ac9      	subs	r1, r1, r3
 8001a22:	460b      	mov	r3, r1
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	1ad1      	subs	r1, r2, r3
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <game_process+0x15c>)
 8001a30:	701a      	strb	r2, [r3, #0]

	pacman_direction_process(); // Put this function here to read buttons.
 8001a32:	f000 f9df 	bl	8001df4 <pacman_direction_process>
	if ((button_count[15] + 1) % 60 == 0)
 8001a36:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <game_process+0x164>)
 8001a38:	8bdb      	ldrh	r3, [r3, #30]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b74 <game_process+0x168>)
 8001a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a42:	4413      	add	r3, r2
 8001a44:	1159      	asrs	r1, r3, #5
 8001a46:	17d3      	asrs	r3, r2, #31
 8001a48:	1ac9      	subs	r1, r1, r3
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a5b      	subs	r3, r3, r1
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	1ad1      	subs	r1, r2, r3
 8001a54:	2900      	cmp	r1, #0
 8001a56:	d102      	bne.n	8001a5e <game_process+0x52>
	{
		game_init();
 8001a58:	f7ff ff10 	bl	800187c <game_init>
		return;
 8001a5c:	e082      	b.n	8001b64 <game_process+0x158>
	}

	if (pacman.score < TOTAL_SCORE * 30 / 100)
 8001a5e:	4b46      	ldr	r3, [pc, #280]	@ (8001b78 <game_process+0x16c>)
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	4b46      	ldr	r3, [pc, #280]	@ (8001b7c <game_process+0x170>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4a44      	ldr	r2, [pc, #272]	@ (8001b80 <game_process+0x174>)
 8001a70:	fb82 0203 	smull	r0, r2, r2, r3
 8001a74:	1152      	asrs	r2, r2, #5
 8001a76:	17db      	asrs	r3, r3, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4299      	cmp	r1, r3
 8001a7c:	da12      	bge.n	8001aa4 <game_process+0x98>
	{
		if (counter_game == 0)
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b68 <game_process+0x15c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d157      	bne.n	8001b36 <game_process+0x12a>
		{
			HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
 8001a86:	2120      	movs	r1, #32
 8001a88:	483e      	ldr	r0, [pc, #248]	@ (8001b84 <game_process+0x178>)
 8001a8a:	f001 fa46 	bl	8002f1a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2110      	movs	r1, #16
 8001a92:	483c      	ldr	r0, [pc, #240]	@ (8001b84 <game_process+0x178>)
 8001a94:	f001 fa28 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2140      	movs	r1, #64	@ 0x40
 8001a9c:	4839      	ldr	r0, [pc, #228]	@ (8001b84 <game_process+0x178>)
 8001a9e:	f001 fa23 	bl	8002ee8 <HAL_GPIO_WritePin>
 8001aa2:	e048      	b.n	8001b36 <game_process+0x12a>
		}
	}
	else if (pacman.score >= TOTAL_SCORE * 75 / 100)
 8001aa4:	4b34      	ldr	r3, [pc, #208]	@ (8001b78 <game_process+0x16c>)
 8001aa6:	6899      	ldr	r1, [r3, #8]
 8001aa8:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <game_process+0x170>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	011a      	lsls	r2, r3, #4
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4a32      	ldr	r2, [pc, #200]	@ (8001b80 <game_process+0x174>)
 8001ab8:	fb82 0203 	smull	r0, r2, r2, r3
 8001abc:	1152      	asrs	r2, r2, #5
 8001abe:	17db      	asrs	r3, r3, #31
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4299      	cmp	r1, r3
 8001ac4:	db1b      	blt.n	8001afe <game_process+0xf2>
	{
		if ((counter_game % 5) == 0)
 8001ac6:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <game_process+0x15c>)
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	4b2f      	ldr	r3, [pc, #188]	@ (8001b88 <game_process+0x17c>)
 8001acc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad0:	0899      	lsrs	r1, r3, #2
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d12a      	bne.n	8001b36 <game_process+0x12a>
		{
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	4828      	ldr	r0, [pc, #160]	@ (8001b84 <game_process+0x178>)
 8001ae4:	f001 fa19 	bl	8002f1a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2120      	movs	r1, #32
 8001aec:	4825      	ldr	r0, [pc, #148]	@ (8001b84 <game_process+0x178>)
 8001aee:	f001 f9fb 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2140      	movs	r1, #64	@ 0x40
 8001af6:	4823      	ldr	r0, [pc, #140]	@ (8001b84 <game_process+0x178>)
 8001af8:	f001 f9f6 	bl	8002ee8 <HAL_GPIO_WritePin>
 8001afc:	e01b      	b.n	8001b36 <game_process+0x12a>
		}
	}
	else
	{
		if ((counter_game % 10) == 0)
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <game_process+0x15c>)
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <game_process+0x17c>)
 8001b04:	fba3 1302 	umull	r1, r3, r3, r2
 8001b08:	08d9      	lsrs	r1, r3, #3
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <game_process+0x12a>
		{
			HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
 8001b1a:	2140      	movs	r1, #64	@ 0x40
 8001b1c:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <game_process+0x178>)
 8001b1e:	f001 f9fc 	bl	8002f1a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2110      	movs	r1, #16
 8001b26:	4817      	ldr	r0, [pc, #92]	@ (8001b84 <game_process+0x178>)
 8001b28:	f001 f9de 	bl	8002ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2120      	movs	r1, #32
 8001b30:	4814      	ldr	r0, [pc, #80]	@ (8001b84 <game_process+0x178>)
 8001b32:	f001 f9d9 	bl	8002ee8 <HAL_GPIO_WritePin>
		}
	}

	if ((counter_game % 5) == 0)
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <game_process+0x15c>)
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <game_process+0x17c>)
 8001b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b40:	0899      	lsrs	r1, r3, #2
 8001b42:	460b      	mov	r3, r1
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <game_process+0x158>
	{ // update every 250ms
		pacman_moving_process();
 8001b50:	f000 f97a 	bl	8001e48 <pacman_moving_process>
		ghost_direction_process();
 8001b54:	f000 f9de 	bl	8001f14 <ghost_direction_process>
		ghost_moving_process();
 8001b58:	f000 fa10 	bl	8001f7c <ghost_moving_process>

		game_handler();
 8001b5c:	f000 f8c0 	bl	8001ce0 <game_handler>
		game_draw();
 8001b60:	f000 f814 	bl	8001b8c <game_draw>
	}
}
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000190 	.word	0x20000190
 8001b6c:	66666667 	.word	0x66666667
 8001b70:	20000098 	.word	0x20000098
 8001b74:	88888889 	.word	0x88888889
 8001b78:	20000118 	.word	0x20000118
 8001b7c:	20000010 	.word	0x20000010
 8001b80:	51eb851f 	.word	0x51eb851f
 8001b84:	40021000 	.word	0x40021000
 8001b88:	cccccccd 	.word	0xcccccccd

08001b8c <game_draw>:

/* Private Functions ---------------------------------------------------------*/
void game_draw(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	if (pacman.i != pacman.i_pre || pacman.j != pacman.j_pre)
 8001b90:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <game_draw+0xb4>)
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <game_draw+0xb4>)
 8001b96:	789b      	ldrb	r3, [r3, #2]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d105      	bne.n	8001ba8 <game_draw+0x1c>
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <game_draw+0xb4>)
 8001b9e:	785a      	ldrb	r2, [r3, #1]
 8001ba0:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <game_draw+0xb4>)
 8001ba2:	78db      	ldrb	r3, [r3, #3]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d011      	beq.n	8001bcc <game_draw+0x40>
	{
		pacman_draw(pacman.i_pre, pacman.j_pre, BACKGROUND_COLOR);
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <game_draw+0xb4>)
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	4a24      	ldr	r2, [pc, #144]	@ (8001c40 <game_draw+0xb4>)
 8001bae:	78d1      	ldrb	r1, [r2, #3]
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fa6a 	bl	800208e <pacman_draw>
		pacman_draw(pacman.i, pacman.j, PACMAN_COLOR);
 8001bba:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <game_draw+0xb4>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4a20      	ldr	r2, [pc, #128]	@ (8001c40 <game_draw+0xb4>)
 8001bc0:	7851      	ldrb	r1, [r2, #1]
 8001bc2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa61 	bl	800208e <pacman_draw>
	}

	if (ghost.i != ghost.i_pre || ghost.j != ghost.j_pre)
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <game_draw+0xb8>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <game_draw+0xb8>)
 8001bd2:	789b      	ldrb	r3, [r3, #2]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d105      	bne.n	8001be4 <game_draw+0x58>
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <game_draw+0xb8>)
 8001bda:	785a      	ldrb	r2, [r3, #1]
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <game_draw+0xb8>)
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d02a      	beq.n	8001c3a <game_draw+0xae>
	{
		ghost_draw(ghost.i_pre, ghost.j_pre, BACKGROUND_COLOR);
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <game_draw+0xb8>)
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	4a16      	ldr	r2, [pc, #88]	@ (8001c44 <game_draw+0xb8>)
 8001bea:	78d1      	ldrb	r1, [r2, #3]
 8001bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fa6f 	bl	80020d4 <ghost_draw>
		if(maze.cells[ghost.i_pre][ghost.j_pre].is_pac_dot)
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <game_draw+0xb8>)
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <game_draw+0xb8>)
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	4618      	mov	r0, r3
 8001c02:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <game_draw+0xbc>)
 8001c04:	460b      	mov	r3, r1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4403      	add	r3, r0
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <game_draw+0x9c>
		{
			pac_dot_draw(ghost.i_pre, ghost.j_pre, PAC_DOTS_COLOR);
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <game_draw+0xb8>)
 8001c18:	789b      	ldrb	r3, [r3, #2]
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <game_draw+0xb8>)
 8001c1c:	78d1      	ldrb	r1, [r2, #3]
 8001c1e:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fa10 	bl	8002048 <pac_dot_draw>
		}
		ghost_draw(ghost.i, ghost.j, GHOST_COLOR);
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <game_draw+0xb8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <game_draw+0xb8>)
 8001c2e:	7851      	ldrb	r1, [r2, #1]
 8001c30:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fa4d 	bl	80020d4 <ghost_draw>
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000118 	.word	0x20000118
 8001c44:	20000124 	.word	0x20000124
 8001c48:	2000012c 	.word	0x2000012c

08001c4c <is_loss_condition_met>:

uint8_t is_loss_condition_met()
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
	return (ghost.i == pacman.i && ghost.j == pacman.j);
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <is_loss_condition_met+0x30>)
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <is_loss_condition_met+0x34>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d107      	bne.n	8001c6c <is_loss_condition_met+0x20>
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <is_loss_condition_met+0x30>)
 8001c5e:	785a      	ldrb	r2, [r3, #1]
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <is_loss_condition_met+0x34>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d101      	bne.n	8001c6c <is_loss_condition_met+0x20>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <is_loss_condition_met+0x22>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000124 	.word	0x20000124
 8001c80:	20000118 	.word	0x20000118

08001c84 <is_win_condition_met>:
uint8_t is_win_condition_met()
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	return (pacman.score >= TOTAL_SCORE);
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <is_win_condition_met+0x20>)
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <is_win_condition_met+0x24>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	bfac      	ite	ge
 8001c94:	2301      	movge	r3, #1
 8001c96:	2300      	movlt	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	20000118 	.word	0x20000118
 8001ca8:	20000010 	.word	0x20000010

08001cac <has_pacman_eaten_dot>:
uint8_t has_pacman_eaten_dot()
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
	return maze.cells[pacman.i][pacman.j].is_pac_dot;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <has_pacman_eaten_dot+0x2c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <has_pacman_eaten_dot+0x2c>)
 8001cb8:	785b      	ldrb	r3, [r3, #1]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <has_pacman_eaten_dot+0x30>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4403      	add	r3, r0
 8001cca:	781b      	ldrb	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000118 	.word	0x20000118
 8001cdc:	2000012c 	.word	0x2000012c

08001ce0 <game_handler>:
/**
 * handle game event
 */
void game_handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af04      	add	r7, sp, #16
	if (is_loss_condition_met())
 8001ce6:	f7ff ffb1 	bl	8001c4c <is_loss_condition_met>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <game_handler+0x16>
	{
		game_init();
 8001cf0:	f7ff fdc4 	bl	800187c <game_init>
		return;
 8001cf4:	e072      	b.n	8001ddc <game_handler+0xfc>
	}
	if (is_win_condition_met())
 8001cf6:	f7ff ffc5 	bl	8001c84 <is_win_condition_met>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <game_handler+0x26>
	{
		game_init();
 8001d00:	f7ff fdbc 	bl	800187c <game_init>
		return;
 8001d04:	e06a      	b.n	8001ddc <game_handler+0xfc>
	}
	if (has_pacman_eaten_dot())
 8001d06:	f7ff ffd1 	bl	8001cac <has_pacman_eaten_dot>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d065      	beq.n	8001ddc <game_handler+0xfc>
	{
		maze.cells[pacman.i][pacman.j].is_pac_dot = 0;
 8001d10:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <game_handler+0x100>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4b32      	ldr	r3, [pc, #200]	@ (8001de0 <game_handler+0x100>)
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4a31      	ldr	r2, [pc, #196]	@ (8001de4 <game_handler+0x104>)
 8001d1e:	460b      	mov	r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	4403      	add	r3, r0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
		pacman.score += POINTS_PER_DOT;
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <game_handler+0x100>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	3301      	adds	r3, #1
 8001d34:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <game_handler+0x100>)
 8001d36:	6093      	str	r3, [r2, #8]

		led_7seg_set_digit(pacman.score / 1000, 0, 0);
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <game_handler+0x100>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8001de8 <game_handler+0x108>)
 8001d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d42:	1192      	asrs	r2, r2, #6
 8001d44:	17db      	asrs	r3, r3, #31
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fcab 	bl	80016a8 <led_7seg_set_digit>
		led_7seg_set_digit((pacman.score / 100) % 10, 1, 0);
 8001d52:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <game_handler+0x100>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <game_handler+0x10c>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	1152      	asrs	r2, r2, #5
 8001d5e:	17db      	asrs	r3, r3, #31
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <game_handler+0x110>)
 8001d64:	fb83 1302 	smull	r1, r3, r3, r2
 8001d68:	1099      	asrs	r1, r3, #2
 8001d6a:	17d3      	asrs	r3, r2, #31
 8001d6c:	1ac8      	subs	r0, r1, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4403      	add	r3, r0
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	1ad0      	subs	r0, r2, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	f7ff fc94 	bl	80016a8 <led_7seg_set_digit>
		led_7seg_set_digit(pacman.score / 10, 2, 0);
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <game_handler+0x100>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <game_handler+0x110>)
 8001d86:	fb82 1203 	smull	r1, r2, r2, r3
 8001d8a:	1092      	asrs	r2, r2, #2
 8001d8c:	17db      	asrs	r3, r3, #31
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	2102      	movs	r1, #2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc87 	bl	80016a8 <led_7seg_set_digit>
		led_7seg_set_digit(pacman.score % 10, 3, 0);
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <game_handler+0x100>)
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <game_handler+0x110>)
 8001da0:	fb83 1302 	smull	r1, r3, r3, r2
 8001da4:	1099      	asrs	r1, r3, #2
 8001da6:	17d3      	asrs	r3, r2, #31
 8001da8:	1ac8      	subs	r0, r1, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4403      	add	r3, r0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	1ad0      	subs	r0, r2, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	2103      	movs	r1, #3
 8001db8:	f7ff fc76 	bl	80016a8 <led_7seg_set_digit>

		lcd_show_int_num(80, 250, pacman.score, 2, RED, BACKGROUND_COLOR, 16);
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <game_handler+0x100>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	21fa      	movs	r1, #250	@ 0xfa
 8001dd6:	2050      	movs	r0, #80	@ 0x50
 8001dd8:	f7ff f870 	bl	8000ebc <lcd_show_int_num>
	}
}
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000118 	.word	0x20000118
 8001de4:	2000012c 	.word	0x2000012c
 8001de8:	10624dd3 	.word	0x10624dd3
 8001dec:	51eb851f 	.word	0x51eb851f
 8001df0:	66666667 	.word	0x66666667

08001df4 <pacman_direction_process>:

void pacman_direction_process(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	if (is_button_up())
 8001df8:	f000 f990 	bl	800211c <is_button_up>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <pacman_direction_process+0x16>
	{
		pacman.direction = UP;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <pacman_direction_process+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	711a      	strb	r2, [r3, #4]
	}
	else if (is_button_right())
	{
		pacman.direction = RIGHT;
	}
}
 8001e08:	e019      	b.n	8001e3e <pacman_direction_process+0x4a>
	else if (is_button_down())
 8001e0a:	f000 f997 	bl	800213c <is_button_down>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <pacman_direction_process+0x28>
		pacman.direction = DOWN;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <pacman_direction_process+0x50>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	711a      	strb	r2, [r3, #4]
}
 8001e1a:	e010      	b.n	8001e3e <pacman_direction_process+0x4a>
	else if (is_button_left())
 8001e1c:	f000 f99e 	bl	800215c <is_button_left>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <pacman_direction_process+0x3a>
		pacman.direction = LEFT;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <pacman_direction_process+0x50>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	711a      	strb	r2, [r3, #4]
}
 8001e2c:	e007      	b.n	8001e3e <pacman_direction_process+0x4a>
	else if (is_button_right())
 8001e2e:	f000 f9a5 	bl	800217c <is_button_right>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <pacman_direction_process+0x4a>
		pacman.direction = RIGHT;
 8001e38:	4b02      	ldr	r3, [pc, #8]	@ (8001e44 <pacman_direction_process+0x50>)
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	711a      	strb	r2, [r3, #4]
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000118 	.word	0x20000118

08001e48 <pacman_moving_process>:

void pacman_moving_process(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	if (pacman.direction == UP && pacman.i > 0)
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e4e:	791b      	ldrb	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d112      	bne.n	8001e7a <pacman_moving_process+0x32>
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <pacman_moving_process+0x32>
	{
		pacman.i_pre = pacman.i;
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e62:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e66:	785a      	ldrb	r2, [r3, #1]
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e6a:	70da      	strb	r2, [r3, #3]
		pacman.i--;
 8001e6c:	4b28      	ldr	r3, [pc, #160]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e044      	b.n	8001f04 <pacman_moving_process+0xbc>
	}
	else if (pacman.direction == DOWN && pacman.i < MAZE_ROW_N - 1)
 8001e7a:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d112      	bne.n	8001ea8 <pacman_moving_process+0x60>
 8001e82:	4b23      	ldr	r3, [pc, #140]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d80e      	bhi.n	8001ea8 <pacman_moving_process+0x60>
	{
		pacman.i_pre = pacman.i;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e90:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e94:	785a      	ldrb	r2, [r3, #1]
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e98:	70da      	strb	r2, [r3, #3]
		pacman.i++;
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ea4:	701a      	strb	r2, [r3, #0]
 8001ea6:	e02d      	b.n	8001f04 <pacman_moving_process+0xbc>
	}
	else if (pacman.direction == LEFT && pacman.j > 0)
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d112      	bne.n	8001ed6 <pacman_moving_process+0x8e>
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00e      	beq.n	8001ed6 <pacman_moving_process+0x8e>
	{
		pacman.i_pre = pacman.i;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ebe:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ec2:	785a      	ldrb	r2, [r3, #1]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ec6:	70da      	strb	r2, [r3, #3]
		pacman.j--;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001eca:	785b      	ldrb	r3, [r3, #1]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ed2:	705a      	strb	r2, [r3, #1]
 8001ed4:	e016      	b.n	8001f04 <pacman_moving_process+0xbc>
	}
	else if (pacman.direction == RIGHT && pacman.j < MAZE_COLUMN_N - 1)
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ed8:	791b      	ldrb	r3, [r3, #4]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d112      	bne.n	8001f04 <pacman_moving_process+0xbc>
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d80e      	bhi.n	8001f04 <pacman_moving_process+0xbc>
	{
		pacman.i_pre = pacman.i;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001eec:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 8001eee:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ef0:	785a      	ldrb	r2, [r3, #1]
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ef4:	70da      	strb	r2, [r3, #3]
		pacman.j++;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <pacman_moving_process+0xc8>)
 8001f00:	705a      	strb	r2, [r3, #1]
	}
}
 8001f02:	e7ff      	b.n	8001f04 <pacman_moving_process+0xbc>
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000118 	.word	0x20000118

08001f14 <ghost_direction_process>:

void ghost_direction_process(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
	int random_direction = rand() % 4;
 8001f1a:	f002 ffbb 	bl	8004e94 <rand>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	425a      	negs	r2, r3
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	bf58      	it	pl
 8001f2c:	4253      	negpl	r3, r2
 8001f2e:	607b      	str	r3, [r7, #4]

	switch (random_direction)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d81a      	bhi.n	8001f6c <ghost_direction_process+0x58>
 8001f36:	a201      	add	r2, pc, #4	@ (adr r2, 8001f3c <ghost_direction_process+0x28>)
 8001f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f55 	.word	0x08001f55
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f65 	.word	0x08001f65
	{
	case 0:
		ghost.direction = UP;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <ghost_direction_process+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	711a      	strb	r2, [r3, #4]
		break;
 8001f52:	e00c      	b.n	8001f6e <ghost_direction_process+0x5a>
	case 1:
		ghost.direction = DOWN;
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <ghost_direction_process+0x64>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	711a      	strb	r2, [r3, #4]
		break;
 8001f5a:	e008      	b.n	8001f6e <ghost_direction_process+0x5a>
	case 2:
		ghost.direction = LEFT;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <ghost_direction_process+0x64>)
 8001f5e:	2202      	movs	r2, #2
 8001f60:	711a      	strb	r2, [r3, #4]
		break;
 8001f62:	e004      	b.n	8001f6e <ghost_direction_process+0x5a>
	case 3:
		ghost.direction = RIGHT;
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <ghost_direction_process+0x64>)
 8001f66:	2203      	movs	r2, #3
 8001f68:	711a      	strb	r2, [r3, #4]
		break;
 8001f6a:	e000      	b.n	8001f6e <ghost_direction_process+0x5a>
	default:
		break;
 8001f6c:	bf00      	nop
	}
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000124 	.word	0x20000124

08001f7c <ghost_moving_process>:

void ghost_moving_process(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	if (ghost.direction == UP && ghost.i > 0)
 8001f80:	4b30      	ldr	r3, [pc, #192]	@ (8002044 <ghost_moving_process+0xc8>)
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d112      	bne.n	8001fae <ghost_moving_process+0x32>
 8001f88:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <ghost_moving_process+0xc8>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <ghost_moving_process+0x32>
	{
		ghost.i_pre = ghost.i;
 8001f90:	4b2c      	ldr	r3, [pc, #176]	@ (8002044 <ghost_moving_process+0xc8>)
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	4b2b      	ldr	r3, [pc, #172]	@ (8002044 <ghost_moving_process+0xc8>)
 8001f96:	709a      	strb	r2, [r3, #2]
		ghost.j_pre = ghost.j;
 8001f98:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <ghost_moving_process+0xc8>)
 8001f9a:	785a      	ldrb	r2, [r3, #1]
 8001f9c:	4b29      	ldr	r3, [pc, #164]	@ (8002044 <ghost_moving_process+0xc8>)
 8001f9e:	70da      	strb	r2, [r3, #3]
		ghost.i--;
 8001fa0:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b26      	ldr	r3, [pc, #152]	@ (8002044 <ghost_moving_process+0xc8>)
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e044      	b.n	8002038 <ghost_moving_process+0xbc>
	}
	else if (ghost.direction == DOWN && ghost.i < MAZE_ROW_N - 1)
 8001fae:	4b25      	ldr	r3, [pc, #148]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d112      	bne.n	8001fdc <ghost_moving_process+0x60>
 8001fb6:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d80e      	bhi.n	8001fdc <ghost_moving_process+0x60>
	{
		ghost.i_pre = ghost.i;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fc4:	709a      	strb	r2, [r3, #2]
		ghost.j_pre = ghost.j;
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fc8:	785a      	ldrb	r2, [r3, #1]
 8001fca:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fcc:	70da      	strb	r2, [r3, #3]
		ghost.i++;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e02d      	b.n	8002038 <ghost_moving_process+0xbc>
	}
	else if (ghost.direction == LEFT && ghost.j > 0)
 8001fdc:	4b19      	ldr	r3, [pc, #100]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fde:	791b      	ldrb	r3, [r3, #4]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d112      	bne.n	800200a <ghost_moving_process+0x8e>
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <ghost_moving_process+0x8e>
	{
		ghost.i_pre = ghost.i;
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <ghost_moving_process+0xc8>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <ghost_moving_process+0xc8>)
 8001ff2:	709a      	strb	r2, [r3, #2]
		ghost.j_pre = ghost.j;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <ghost_moving_process+0xc8>)
 8001ff6:	785a      	ldrb	r2, [r3, #1]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <ghost_moving_process+0xc8>)
 8001ffa:	70da      	strb	r2, [r3, #3]
		ghost.j--;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <ghost_moving_process+0xc8>)
 8001ffe:	785b      	ldrb	r3, [r3, #1]
 8002000:	3b01      	subs	r3, #1
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <ghost_moving_process+0xc8>)
 8002006:	705a      	strb	r2, [r3, #1]
 8002008:	e016      	b.n	8002038 <ghost_moving_process+0xbc>
	}
	else if (ghost.direction == RIGHT && ghost.j < MAZE_COLUMN_N - 1)
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <ghost_moving_process+0xc8>)
 800200c:	791b      	ldrb	r3, [r3, #4]
 800200e:	2b03      	cmp	r3, #3
 8002010:	d112      	bne.n	8002038 <ghost_moving_process+0xbc>
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <ghost_moving_process+0xc8>)
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d80e      	bhi.n	8002038 <ghost_moving_process+0xbc>
	{
		ghost.i_pre = ghost.i;
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <ghost_moving_process+0xc8>)
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <ghost_moving_process+0xc8>)
 8002020:	709a      	strb	r2, [r3, #2]
		ghost.j_pre = ghost.j;
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <ghost_moving_process+0xc8>)
 8002024:	785a      	ldrb	r2, [r3, #1]
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <ghost_moving_process+0xc8>)
 8002028:	70da      	strb	r2, [r3, #3]
		ghost.j++;
 800202a:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <ghost_moving_process+0xc8>)
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <ghost_moving_process+0xc8>)
 8002034:	705a      	strb	r2, [r3, #1]
	}
	else
		;
}
 8002036:	e7ff      	b.n	8002038 <ghost_moving_process+0xbc>
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000124 	.word	0x20000124

08002048 <pac_dot_draw>:

void pac_dot_draw(uint8_t i, uint8_t j, uint16_t color)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	460b      	mov	r3, r1
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	4613      	mov	r3, r2
 8002058:	80bb      	strh	r3, [r7, #4]
	lcd_draw_circle((200 / MAZE_COLUMN_N) * j + 20 + 10, (200 / MAZE_ROW_N) * i + 20 + 10, color, 4, 1);
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f103 000a 	add.w	r0, r3, #10
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	f103 010a 	add.w	r1, r3, #10
 800207a:	88ba      	ldrh	r2, [r7, #4]
 800207c:	2301      	movs	r3, #1
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2304      	movs	r3, #4
 8002082:	f7ff f9a8 	bl	80013d6 <lcd_draw_circle>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <pacman_draw>:

void pacman_draw(uint8_t i, uint8_t j, uint16_t color)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af02      	add	r7, sp, #8
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	460b      	mov	r3, r1
 800209a:	71bb      	strb	r3, [r7, #6]
 800209c:	4613      	mov	r3, r2
 800209e:	80bb      	strh	r3, [r7, #4]
	lcd_draw_circle((200 / MAZE_COLUMN_N) * j + 20 + 10, (200 / MAZE_ROW_N) * i + 20 + 10, color, 8, 1);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f103 000a 	add.w	r0, r3, #10
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f103 010a 	add.w	r1, r3, #10
 80020c0:	88ba      	ldrh	r2, [r7, #4]
 80020c2:	2301      	movs	r3, #1
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2308      	movs	r3, #8
 80020c8:	f7ff f985 	bl	80013d6 <lcd_draw_circle>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <ghost_draw>:

void ghost_draw(uint8_t i, uint8_t j, uint16_t color)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
 80020de:	460b      	mov	r3, r1
 80020e0:	71bb      	strb	r3, [r7, #6]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80bb      	strh	r3, [r7, #4]
	lcd_draw_circle((200 / MAZE_COLUMN_N) * j + 20 + 10, (200 / MAZE_ROW_N) * i + 20 + 10, color, 8, 1);
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f103 000a 	add.w	r0, r3, #10
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f103 010a 	add.w	r1, r3, #10
 8002106:	88ba      	ldrh	r2, [r7, #4]
 8002108:	2301      	movs	r3, #1
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2308      	movs	r3, #8
 800210e:	f7ff f962 	bl	80013d6 <lcd_draw_circle>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <is_button_up>:

uint8_t is_button_up(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	if (button_count[1] == 1)
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <is_button_up+0x1c>)
 8002122:	885b      	ldrh	r3, [r3, #2]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <is_button_up+0x10>
	{
		return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <is_button_up+0x12>
	}
	return 0;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	20000098 	.word	0x20000098

0800213c <is_button_down>:

uint8_t is_button_down(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
	if (button_count[9] == 1)
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <is_button_down+0x1c>)
 8002142:	8a5b      	ldrh	r3, [r3, #18]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <is_button_down+0x10>
	{
		return 1;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <is_button_down+0x12>
	}
	return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20000098 	.word	0x20000098

0800215c <is_button_left>:

uint8_t is_button_left(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	if (button_count[4] == 1)
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <is_button_left+0x1c>)
 8002162:	891b      	ldrh	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <is_button_left+0x10>
	{
		return 1;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <is_button_left+0x12>
	}
	return 0;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	20000098 	.word	0x20000098

0800217c <is_button_right>:

uint8_t is_button_right(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	if (button_count[6] == 1)
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <is_button_right+0x1c>)
 8002182:	899b      	ldrh	r3, [r3, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <is_button_right+0x10>
	{
		return 1;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <is_button_right+0x12>
	}
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	20000098 	.word	0x20000098

0800219c <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init() {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80021a0:	4802      	ldr	r0, [pc, #8]	@ (80021ac <timer2_init+0x10>)
 80021a2:	f002 f975 	bl	8004490 <HAL_TIM_Base_Start_IT>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200001f8 	.word	0x200001f8

080021b0 <timer4_init>:

void timer4_init() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <timer4_init+0x10>)
 80021b6:	f002 f96b 	bl	8004490 <HAL_TIM_Base_Start_IT>
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000240 	.word	0x20000240

080021c4 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <timer2_set+0x2c>)
 80021d2:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <timer2_set+0x2c>)
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <timer2_set+0x30>)
 80021da:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <timer2_set+0x34>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000194 	.word	0x20000194
 80021f4:	20000192 	.word	0x20000192
 80021f8:	20000191 	.word	0x20000191

080021fc <timer4_set>:

void timer4_set(int ms) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <timer4_set+0x2c>)
 800220a:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <timer4_set+0x2c>)
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <timer4_set+0x30>)
 8002212:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <timer4_set+0x34>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000019a 	.word	0x2000019a
 800222c:	20000198 	.word	0x20000198
 8002230:	20000196 	.word	0x20000196

08002234 <HAL_TIM_PeriodElapsedCallback>:
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 * timer2, timer4 f = 1000, T = 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002244:	d114      	bne.n	8002270 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002258:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8002262:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800226e:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d116      	bne.n	80022a8 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800228c:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 800229c:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800229e:	881a      	ldrh	r2, [r3, #0]
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022a2:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 80022a4:	f7ff f974 	bl	8001590 <led_7seg_display>
	}
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000192 	.word	0x20000192
 80022b4:	20000191 	.word	0x20000191
 80022b8:	20000194 	.word	0x20000194
 80022bc:	40000800 	.word	0x40000800
 80022c0:	20000198 	.word	0x20000198
 80022c4:	20000196 	.word	0x20000196
 80022c8:	2000019a 	.word	0x2000019a

080022cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022d0:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022d2:	4a18      	ldr	r2, [pc, #96]	@ (8002334 <MX_SPI1_Init+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <MX_SPI1_Init+0x64>)
 80022f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_SPI1_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <MX_SPI1_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_SPI1_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <MX_SPI1_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <MX_SPI1_Init+0x64>)
 8002318:	220a      	movs	r2, #10
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	@ (8002330 <MX_SPI1_Init+0x64>)
 800231e:	f001 fa7b 	bl	8003818 <HAL_SPI_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002328:	f7ff faa2 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000019c 	.word	0x2000019c
 8002334:	40013000 	.word	0x40013000

08002338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a19      	ldr	r2, [pc, #100]	@ (80023bc <HAL_SPI_MspInit+0x84>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12b      	bne.n	80023b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_SPI_MspInit+0x88>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <HAL_SPI_MspInit+0x88>)
 8002364:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <HAL_SPI_MspInit+0x88>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_SPI_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <HAL_SPI_MspInit+0x88>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_SPI_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002392:	2338      	movs	r3, #56	@ 0x38
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a2:	2305      	movs	r3, #5
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <HAL_SPI_MspInit+0x8c>)
 80023ae:	f000 fbff 	bl	8002bb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	@ 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40013000 	.word	0x40013000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020400 	.word	0x40020400

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002414 <HAL_MspInit+0x4c>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <HAL_MspInit+0x4c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	@ (8002414 <HAL_MspInit+0x4c>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_MspInit+0x4c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <NMI_Handler+0x4>

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <MemManage_Handler+0x4>

08002430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <UsageFault_Handler+0x4>

08002440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246e:	f000 fa49 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <TIM2_IRQHandler+0x10>)
 800247e:	f002 f877 	bl	8004570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200001f8 	.word	0x200001f8

0800248c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <TIM4_IRQHandler+0x10>)
 8002492:	f002 f86d 	bl	8004570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000240 	.word	0x20000240

080024a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	return 1;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_kill>:

int _kill(int pid, int sig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ba:	f002 fdf3 	bl	80050a4 <__errno>
 80024be:	4603      	mov	r3, r0
 80024c0:	2216      	movs	r2, #22
 80024c2:	601a      	str	r2, [r3, #0]
	return -1;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_exit>:

void _exit (int status)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ffe7 	bl	80024b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <_exit+0x12>

080024e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e00a      	b.n	800250e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024f8:	f3af 8000 	nop.w
 80024fc:	4601      	mov	r1, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	60ba      	str	r2, [r7, #8]
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	dbf0      	blt.n	80024f8 <_read+0x12>
	}

return len;
 8002516:	687b      	ldr	r3, [r7, #4]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e009      	b.n	8002546 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	60ba      	str	r2, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	dbf1      	blt.n	8002532 <_write+0x12>
	}
	return len;
 800254e:	687b      	ldr	r3, [r7, #4]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_close>:

int _close(int file)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002580:	605a      	str	r2, [r3, #4]
	return 0;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_isatty>:

int _isatty(int file)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	return 1;
 8002598:	2301      	movs	r3, #1
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
	return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	@ (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f002 fd58 	bl	80050a4 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20020000 	.word	0x20020000
 8002620:	00000400 	.word	0x00000400
 8002624:	200001f4 	.word	0x200001f4
 8002628:	200003d8 	.word	0x200003d8

0800262c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	@ (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002656:	f107 0308 	add.w	r3, r7, #8
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002664:	463b      	mov	r3, r7
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <MX_TIM2_Init+0x94>)
 800266e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002676:	f240 3247 	movw	r2, #839	@ 0x347
 800267a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <MX_TIM2_Init+0x94>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002682:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002684:	2263      	movs	r2, #99	@ 0x63
 8002686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_TIM2_Init+0x94>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002694:	4813      	ldr	r0, [pc, #76]	@ (80026e4 <MX_TIM2_Init+0x94>)
 8002696:	f001 feab 	bl	80043f0 <HAL_TIM_Base_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80026a0:	f7ff f8e6 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	4619      	mov	r1, r3
 80026b0:	480c      	ldr	r0, [pc, #48]	@ (80026e4 <MX_TIM2_Init+0x94>)
 80026b2:	f002 f865 	bl	8004780 <HAL_TIM_ConfigClockSource>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026bc:	f7ff f8d8 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <MX_TIM2_Init+0x94>)
 80026ce:	f002 fa81 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026d8:	f7ff f8ca 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200001f8 	.word	0x200001f8

080026e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fc:	463b      	mov	r3, r7
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002704:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <MX_TIM4_Init+0x94>)
 8002706:	4a1e      	ldr	r2, [pc, #120]	@ (8002780 <MX_TIM4_Init+0x98>)
 8002708:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <MX_TIM4_Init+0x94>)
 800270c:	f240 3247 	movw	r2, #839	@ 0x347
 8002710:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <MX_TIM4_Init+0x94>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <MX_TIM4_Init+0x94>)
 800271a:	2263      	movs	r2, #99	@ 0x63
 800271c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <MX_TIM4_Init+0x94>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <MX_TIM4_Init+0x94>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800272a:	4814      	ldr	r0, [pc, #80]	@ (800277c <MX_TIM4_Init+0x94>)
 800272c:	f001 fe60 	bl	80043f0 <HAL_TIM_Base_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002736:	f7ff f89b 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	4619      	mov	r1, r3
 8002746:	480d      	ldr	r0, [pc, #52]	@ (800277c <MX_TIM4_Init+0x94>)
 8002748:	f002 f81a 	bl	8004780 <HAL_TIM_ConfigClockSource>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002752:	f7ff f88d 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800275e:	463b      	mov	r3, r7
 8002760:	4619      	mov	r1, r3
 8002762:	4806      	ldr	r0, [pc, #24]	@ (800277c <MX_TIM4_Init+0x94>)
 8002764:	f002 fa36 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800276e:	f7ff f87f 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000240 	.word	0x20000240
 8002780:	40000800 	.word	0x40000800

08002784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002794:	d116      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <HAL_TIM_Base_MspInit+0x80>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <HAL_TIM_Base_MspInit+0x80>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b17      	ldr	r3, [pc, #92]	@ (8002804 <HAL_TIM_Base_MspInit+0x80>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	201c      	movs	r0, #28
 80027b8:	f000 f9c3 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027bc:	201c      	movs	r0, #28
 80027be:	f000 f9dc 	bl	8002b7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027c2:	e01a      	b.n	80027fa <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002808 <HAL_TIM_Base_MspInit+0x84>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d115      	bne.n	80027fa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <HAL_TIM_Base_MspInit+0x80>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <HAL_TIM_Base_MspInit+0x80>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_TIM_Base_MspInit+0x80>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	201e      	movs	r0, #30
 80027f0:	f000 f9a7 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027f4:	201e      	movs	r0, #30
 80027f6:	f000 f9c0 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40000800 	.word	0x40000800

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002844 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002810:	480d      	ldr	r0, [pc, #52]	@ (8002848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002812:	490e      	ldr	r1, [pc, #56]	@ (800284c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002814:	4a0e      	ldr	r2, [pc, #56]	@ (8002850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a0b      	ldr	r2, [pc, #44]	@ (8002854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002828:	4c0b      	ldr	r4, [pc, #44]	@ (8002858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002836:	f7ff fef9 	bl	800262c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283a:	f002 fc39 	bl	80050b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7fe ff77 	bl	8001730 <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002850:	08008f10 	.word	0x08008f10
  ldr r2, =_sbss
 8002854:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002858:	200003d8 	.word	0x200003d8

0800285c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC_IRQHandler>
	...

08002860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002864:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0d      	ldr	r2, [pc, #52]	@ (80028a0 <HAL_Init+0x40>)
 800286a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800286e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_Init+0x40>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <HAL_Init+0x40>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f94f 	bl	8002b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800288e:	200f      	movs	r0, #15
 8002890:	f000 f808 	bl	80028a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002894:	f7ff fd98 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023c00 	.word	0x40023c00

080028a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_InitTick+0x54>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <HAL_InitTick+0x58>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f967 	bl	8002b96 <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028e0:	f000 f92f 	bl	8002b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <HAL_InitTick+0x5c>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000014 	.word	0x20000014
 80028fc:	2000001c 	.word	0x2000001c
 8002900:	20000018 	.word	0x20000018

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000001c 	.word	0x2000001c
 8002928:	20000288 	.word	0x20000288

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000288 	.word	0x20000288

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000001c 	.word	0x2000001c

0800298c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	@ (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	@ (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002af8:	d301      	bcc.n	8002afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00f      	b.n	8002b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a0a      	ldr	r2, [pc, #40]	@ (8002b28 <SysTick_Config+0x40>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b06:	210f      	movs	r1, #15
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b0c:	f7ff ff8e 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <SysTick_Config+0x40>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <SysTick_Config+0x40>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff29 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b54:	f7ff ff3e 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff8e 	bl	8002a80 <NVIC_EncodePriority>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff5d 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff31 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa2 	bl	8002ae8 <SysTick_Config>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	@ 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e16b      	b.n	8002ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 815a 	bne.w	8002e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d005      	beq.n	8002c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d130      	bne.n	8002c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 0201 	and.w	r2, r3, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d017      	beq.n	8002ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d123      	bne.n	8002cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80b4 	beq.w	8002e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b60      	ldr	r3, [pc, #384]	@ (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d46:	4b5d      	ldr	r3, [pc, #372]	@ (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d52:	4a5b      	ldr	r2, [pc, #364]	@ (8002ec0 <HAL_GPIO_Init+0x310>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	@ (8002ec4 <HAL_GPIO_Init+0x314>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a51      	ldr	r2, [pc, #324]	@ (8002ec8 <HAL_GPIO_Init+0x318>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x222>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a50      	ldr	r2, [pc, #320]	@ (8002ecc <HAL_GPIO_Init+0x31c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x21e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4f      	ldr	r2, [pc, #316]	@ (8002ed0 <HAL_GPIO_Init+0x320>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x21a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed4 <HAL_GPIO_Init+0x324>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x216>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed8 <HAL_GPIO_Init+0x328>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x212>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4c      	ldr	r2, [pc, #304]	@ (8002edc <HAL_GPIO_Init+0x32c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ee0 <HAL_GPIO_Init+0x330>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x20a>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e00e      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00c      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	e00a      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e008      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f002 0203 	and.w	r2, r2, #3
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de8:	4935      	ldr	r1, [pc, #212]	@ (8002ec0 <HAL_GPIO_Init+0x310>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e20:	4b30      	ldr	r3, [pc, #192]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e44:	4a27      	ldr	r2, [pc, #156]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e98:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	f67f ae90 	bls.w	8002bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40021400 	.word	0x40021400
 8002edc:	40021800 	.word	0x40021800
 8002ee0:	40021c00 	.word	0x40021c00
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b085      	sub	sp, #20
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4013      	ands	r3, r2
 8002f32:	041a      	lsls	r2, r3, #16
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	400b      	ands	r3, r1
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e267      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d075      	beq.n	800305a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6e:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b85      	ldr	r3, [pc, #532]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b82      	ldr	r3, [pc, #520]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b7e      	ldr	r3, [pc, #504]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05b      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d157      	bne.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e242      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x74>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x98>
 8002fce:	4b70      	ldr	r3, [pc, #448]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b6d      	ldr	r3, [pc, #436]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6c      	ldr	r2, [pc, #432]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	4b69      	ldr	r3, [pc, #420]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a68      	ldr	r2, [pc, #416]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b66      	ldr	r3, [pc, #408]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7ff fc90 	bl	800292c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7ff fc8c 	bl	800292c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	@ 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e207      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b5b      	ldr	r3, [pc, #364]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xc0>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7ff fc7c 	bl	800292c <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7ff fc78 	bl	800292c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	@ 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1f3      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b51      	ldr	r3, [pc, #324]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0xe8>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003066:	4b4a      	ldr	r3, [pc, #296]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b44      	ldr	r3, [pc, #272]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b41      	ldr	r3, [pc, #260]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1c7      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4937      	ldr	r1, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_RCC_OscConfig+0x244>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7ff fc31 	bl	800292c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7ff fc2d 	bl	800292c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1a8      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b28      	ldr	r3, [pc, #160]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4925      	ldr	r1, [pc, #148]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_RCC_OscConfig+0x244>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7ff fc10 	bl	800292c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7ff fc0c 	bl	800292c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e187      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d036      	beq.n	80031a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <HAL_RCC_OscConfig+0x248>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7ff fbf0 	bl	800292c <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7ff fbec 	bl	800292c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e167      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_OscConfig+0x240>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x200>
 800316e:	e01b      	b.n	80031a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <HAL_RCC_OscConfig+0x248>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7ff fbd9 	bl	800292c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	e00e      	b.n	800319c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7ff fbd5 	bl	800292c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d907      	bls.n	800319c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e150      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
 8003190:	40023800 	.word	0x40023800
 8003194:	42470000 	.word	0x42470000
 8003198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b88      	ldr	r3, [pc, #544]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ea      	bne.n	800317e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8097 	beq.w	80032e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b81      	ldr	r3, [pc, #516]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	4b7d      	ldr	r3, [pc, #500]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	4a7c      	ldr	r2, [pc, #496]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d6:	4b7a      	ldr	r3, [pc, #488]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b77      	ldr	r3, [pc, #476]	@ (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f2:	4b74      	ldr	r3, [pc, #464]	@ (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a73      	ldr	r2, [pc, #460]	@ (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7ff fb95 	bl	800292c <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7ff fb91 	bl	800292c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e10c      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b6a      	ldr	r3, [pc, #424]	@ (80033c4 <HAL_RCC_OscConfig+0x474>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x2ea>
 800322c:	4b64      	ldr	r3, [pc, #400]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003230:	4a63      	ldr	r2, [pc, #396]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6713      	str	r3, [r2, #112]	@ 0x70
 8003238:	e01c      	b.n	8003274 <HAL_RCC_OscConfig+0x324>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x30c>
 8003242:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	4a5e      	ldr	r2, [pc, #376]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6713      	str	r3, [r2, #112]	@ 0x70
 800324e:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	4a5b      	ldr	r2, [pc, #364]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	@ 0x70
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0x324>
 800325c:	4b58      	ldr	r3, [pc, #352]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003260:	4a57      	ldr	r2, [pc, #348]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	@ 0x70
 8003268:	4b55      	ldr	r3, [pc, #340]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a54      	ldr	r2, [pc, #336]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800326e:	f023 0304 	bic.w	r3, r3, #4
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7ff fb56 	bl	800292c <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7ff fb52 	bl	800292c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0cb      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	4b49      	ldr	r3, [pc, #292]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ee      	beq.n	8003284 <HAL_RCC_OscConfig+0x334>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7ff fb40 	bl	800292c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7ff fb3c 	bl	800292c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0b5      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	4b3e      	ldr	r3, [pc, #248]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ee      	bne.n	80032b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b39      	ldr	r3, [pc, #228]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	4a38      	ldr	r2, [pc, #224]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a1 	beq.w	8003430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ee:	4b34      	ldr	r3, [pc, #208]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d05c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d141      	bne.n	8003386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b31      	ldr	r3, [pc, #196]	@ (80033c8 <HAL_RCC_OscConfig+0x478>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7ff fb10 	bl	800292c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7ff fb0c 	bl	800292c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e087      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b27      	ldr	r3, [pc, #156]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	491b      	ldr	r1, [pc, #108]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_RCC_OscConfig+0x478>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7ff fae5 	bl	800292c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003366:	f7ff fae1 	bl	800292c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e05c      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x416>
 8003384:	e054      	b.n	8003430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <HAL_RCC_OscConfig+0x478>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff face 	bl	800292c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7ff faca 	bl	800292c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e045      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_RCC_OscConfig+0x470>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x444>
 80033b2:	e03d      	b.n	8003430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e038      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <HAL_RCC_OscConfig+0x4ec>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d028      	beq.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d121      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d11a      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033fc:	4013      	ands	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0cc      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b68      	ldr	r3, [pc, #416]	@ (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90c      	bls.n	800347c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b65      	ldr	r3, [pc, #404]	@ (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0b8      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003494:	4b59      	ldr	r3, [pc, #356]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a58      	ldr	r2, [pc, #352]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800349e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ac:	4b53      	ldr	r3, [pc, #332]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a52      	ldr	r2, [pc, #328]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b50      	ldr	r3, [pc, #320]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	494d      	ldr	r1, [pc, #308]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b47      	ldr	r3, [pc, #284]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d119      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b3f      	ldr	r3, [pc, #252]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	4b3b      	ldr	r3, [pc, #236]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e067      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b37      	ldr	r3, [pc, #220]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4934      	ldr	r1, [pc, #208]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7ff f9fc 	bl	800292c <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7ff f9f8 	bl	800292c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d20c      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b22      	ldr	r3, [pc, #136]	@ (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e032      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4916      	ldr	r1, [pc, #88]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b12      	ldr	r3, [pc, #72]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490e      	ldr	r1, [pc, #56]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c6:	f000 f821 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	490a      	ldr	r1, [pc, #40]	@ (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	4a09      	ldr	r2, [pc, #36]	@ (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f95c 	bl	80028a4 <HAL_InitTick>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	08008e10 	.word	0x08008e10
 8003604:	20000014 	.word	0x20000014
 8003608:	20000018 	.word	0x20000018

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b094      	sub	sp, #80	@ 0x50
 8003612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	647b      	str	r3, [r7, #68]	@ 0x44
 8003618:	2300      	movs	r3, #0
 800361a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800361c:	2300      	movs	r3, #0
 800361e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003624:	4b79      	ldr	r3, [pc, #484]	@ (800380c <HAL_RCC_GetSysClockFreq+0x200>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d00d      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x40>
 8003630:	2b08      	cmp	r3, #8
 8003632:	f200 80e1 	bhi.w	80037f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x34>
 800363a:	2b04      	cmp	r3, #4
 800363c:	d003      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x3a>
 800363e:	e0db      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b73      	ldr	r3, [pc, #460]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x204>)
 8003642:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003644:	e0db      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003646:	4b73      	ldr	r3, [pc, #460]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x208>)
 8003648:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800364a:	e0d8      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800364c:	4b6f      	ldr	r3, [pc, #444]	@ (800380c <HAL_RCC_GetSysClockFreq+0x200>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003656:	4b6d      	ldr	r3, [pc, #436]	@ (800380c <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b6a      	ldr	r3, [pc, #424]	@ (800380c <HAL_RCC_GetSysClockFreq+0x200>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	2200      	movs	r2, #0
 800366a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800366c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800366e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
 8003676:	2300      	movs	r3, #0
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
 800367a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800367e:	4622      	mov	r2, r4
 8003680:	462b      	mov	r3, r5
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	0159      	lsls	r1, r3, #5
 800368c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003690:	0150      	lsls	r0, r2, #5
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4621      	mov	r1, r4
 8003698:	1a51      	subs	r1, r2, r1
 800369a:	6139      	str	r1, [r7, #16]
 800369c:	4629      	mov	r1, r5
 800369e:	eb63 0301 	sbc.w	r3, r3, r1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036b0:	4659      	mov	r1, fp
 80036b2:	018b      	lsls	r3, r1, #6
 80036b4:	4651      	mov	r1, sl
 80036b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ba:	4651      	mov	r1, sl
 80036bc:	018a      	lsls	r2, r1, #6
 80036be:	4651      	mov	r1, sl
 80036c0:	ebb2 0801 	subs.w	r8, r2, r1
 80036c4:	4659      	mov	r1, fp
 80036c6:	eb63 0901 	sbc.w	r9, r3, r1
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036de:	4690      	mov	r8, r2
 80036e0:	4699      	mov	r9, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	eb18 0303 	adds.w	r3, r8, r3
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	462b      	mov	r3, r5
 80036ec:	eb49 0303 	adc.w	r3, r9, r3
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036fe:	4629      	mov	r1, r5
 8003700:	024b      	lsls	r3, r1, #9
 8003702:	4621      	mov	r1, r4
 8003704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003708:	4621      	mov	r1, r4
 800370a:	024a      	lsls	r2, r1, #9
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003712:	2200      	movs	r2, #0
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800371c:	f7fc fda8 	bl	8000270 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003728:	e058      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372a:	4b38      	ldr	r3, [pc, #224]	@ (800380c <HAL_RCC_GetSysClockFreq+0x200>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	2200      	movs	r2, #0
 8003732:	4618      	mov	r0, r3
 8003734:	4611      	mov	r1, r2
 8003736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800373a:	623b      	str	r3, [r7, #32]
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	0159      	lsls	r1, r3, #5
 8003752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003756:	0150      	lsls	r0, r2, #5
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4641      	mov	r1, r8
 800375e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003762:	4649      	mov	r1, r9
 8003764:	eb63 0b01 	sbc.w	fp, r3, r1
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800377c:	ebb2 040a 	subs.w	r4, r2, sl
 8003780:	eb63 050b 	sbc.w	r5, r3, fp
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	00eb      	lsls	r3, r5, #3
 800378e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003792:	00e2      	lsls	r2, r4, #3
 8003794:	4614      	mov	r4, r2
 8003796:	461d      	mov	r5, r3
 8003798:	4643      	mov	r3, r8
 800379a:	18e3      	adds	r3, r4, r3
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	464b      	mov	r3, r9
 80037a0:	eb45 0303 	adc.w	r3, r5, r3
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037b2:	4629      	mov	r1, r5
 80037b4:	028b      	lsls	r3, r1, #10
 80037b6:	4621      	mov	r1, r4
 80037b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037bc:	4621      	mov	r1, r4
 80037be:	028a      	lsls	r2, r1, #10
 80037c0:	4610      	mov	r0, r2
 80037c2:	4619      	mov	r1, r3
 80037c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037c6:	2200      	movs	r2, #0
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	61fa      	str	r2, [r7, #28]
 80037cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d0:	f7fc fd4e 	bl	8000270 <__aeabi_uldivmod>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4613      	mov	r3, r2
 80037da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037dc:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_GetSysClockFreq+0x200>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	3301      	adds	r3, #1
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80037ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037f6:	e002      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037f8:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x204>)
 80037fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003800:	4618      	mov	r0, r3
 8003802:	3750      	adds	r7, #80	@ 0x50
 8003804:	46bd      	mov	sp, r7
 8003806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	00f42400 	.word	0x00f42400
 8003814:	007a1200 	.word	0x007a1200

08003818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07b      	b.n	8003922 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800383a:	d009      	beq.n	8003850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
 8003842:	e005      	b.n	8003850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fe fd64 	bl	8002338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0104 	and.w	r1, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	f003 0210 	and.w	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b088      	sub	sp, #32
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_SPI_Transmit+0x22>
 8003948:	2302      	movs	r3, #2
 800394a:	e126      	b.n	8003b9a <HAL_SPI_Transmit+0x270>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003954:	f7fe ffea 	bl	800292c <HAL_GetTick>
 8003958:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800396e:	e10b      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0x52>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003980:	e102      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2203      	movs	r2, #3
 8003986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039c8:	d10f      	bne.n	80039ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f4:	2b40      	cmp	r3, #64	@ 0x40
 80039f6:	d007      	beq.n	8003a08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a10:	d14b      	bne.n	8003aaa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_Transmit+0xf6>
 8003a1a:	8afb      	ldrh	r3, [r7, #22]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d13e      	bne.n	8003a9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a44:	e02b      	b.n	8003a9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d112      	bne.n	8003a7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	881a      	ldrh	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a78:	e011      	b.n	8003a9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7a:	f7fe ff57 	bl	800292c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d803      	bhi.n	8003a92 <HAL_SPI_Transmit+0x168>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Transmit+0x16e>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a9c:	e074      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ce      	bne.n	8003a46 <HAL_SPI_Transmit+0x11c>
 8003aa8:	e04c      	b.n	8003b44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Transmit+0x18e>
 8003ab2:	8afb      	ldrh	r3, [r7, #22]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d140      	bne.n	8003b3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ade:	e02c      	b.n	8003b3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d113      	bne.n	8003b16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b14:	e011      	b.n	8003b3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b16:	f7fe ff09 	bl	800292c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d803      	bhi.n	8003b2e <HAL_SPI_Transmit+0x204>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Transmit+0x20a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b38:	e026      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1cd      	bne.n	8003ae0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fbcb 	bl	80042e4 <SPI_EndRxTxTransaction>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e000      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	af02      	add	r7, sp, #8
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	603b      	str	r3, [r7, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bbe:	d112      	bne.n	8003be6 <HAL_SPI_Receive+0x44>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10e      	bne.n	8003be6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f8f1 	bl	8003dc4 <HAL_SPI_TransmitReceive>
 8003be2:	4603      	mov	r3, r0
 8003be4:	e0ea      	b.n	8003dbc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_SPI_Receive+0x52>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0e3      	b.n	8003dbc <HAL_SPI_Receive+0x21a>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bfc:	f7fe fe96 	bl	800292c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c12:	e0ca      	b.n	8003daa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Receive+0x7e>
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c24:	e0c1      	b.n	8003daa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6c:	d10f      	bne.n	8003c8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b40      	cmp	r3, #64	@ 0x40
 8003c9a:	d007      	beq.n	8003cac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d162      	bne.n	8003d7a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003cb4:	e02e      	b.n	8003d14 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d115      	bne.n	8003cf0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f103 020c 	add.w	r2, r3, #12
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	7812      	ldrb	r2, [r2, #0]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cee:	e011      	b.n	8003d14 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf0:	f7fe fe1c 	bl	800292c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d803      	bhi.n	8003d08 <HAL_SPI_Receive+0x166>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d06:	d102      	bne.n	8003d0e <HAL_SPI_Receive+0x16c>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d12:	e04a      	b.n	8003daa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1cb      	bne.n	8003cb6 <HAL_SPI_Receive+0x114>
 8003d1e:	e031      	b.n	8003d84 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d113      	bne.n	8003d56 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d54:	e011      	b.n	8003d7a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d56:	f7fe fde9 	bl	800292c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d803      	bhi.n	8003d6e <HAL_SPI_Receive+0x1cc>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_Receive+0x1d2>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d78:	e017      	b.n	8003daa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1cd      	bne.n	8003d20 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fa45 	bl	8004218 <SPI_EndRxTransaction>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
 8003da6:	e000      	b.n	8003daa <HAL_SPI_Receive+0x208>
  }

error :
 8003da8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	@ 0x30
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_TransmitReceive+0x26>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e18a      	b.n	8004100 <HAL_SPI_TransmitReceive+0x33c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fe fd9b 	bl	800292c <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e08:	887b      	ldrh	r3, [r7, #2]
 8003e0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d00f      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x70>
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e1a:	d107      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <HAL_SPI_TransmitReceive+0x68>
 8003e24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d003      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003e32:	e15b      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x82>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x82>
 8003e40:	887b      	ldrh	r3, [r7, #2]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003e4c:	e14e      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d003      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b40      	cmp	r3, #64	@ 0x40
 8003ea4:	d007      	beq.n	8003eb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ebe:	d178      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_TransmitReceive+0x10a>
 8003ec8:	8b7b      	ldrh	r3, [r7, #26]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d166      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	881a      	ldrh	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	1c9a      	adds	r2, r3, #2
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ef2:	e053      	b.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d11b      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x176>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d016      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x176>
 8003f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d113      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	881a      	ldrh	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d119      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x1b8>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d014      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f7c:	f7fe fcd6 	bl	800292c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d807      	bhi.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f92:	d003      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8003f9a:	e0a7      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1a6      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x130>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1a1      	bne.n	8003ef4 <HAL_SPI_TransmitReceive+0x130>
 8003fb0:	e07c      	b.n	80040ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x1fc>
 8003fba:	8b7b      	ldrh	r3, [r7, #26]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d16b      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe6:	e057      	b.n	8004098 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d11c      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x26c>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x26c>
 8004000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d114      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d119      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x2ae>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d014      	beq.n	8004072 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800406e:	2301      	movs	r3, #1
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004072:	f7fe fc5b 	bl	800292c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800407e:	429a      	cmp	r2, r3
 8004080:	d803      	bhi.n	800408a <HAL_SPI_TransmitReceive+0x2c6>
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004088:	d102      	bne.n	8004090 <HAL_SPI_TransmitReceive+0x2cc>
 800408a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004096:	e029      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1a2      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x224>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d19d      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f917 	bl	80042e4 <SPI_EndRxTxTransaction>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80040c8:	e010      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	e000      	b.n	80040ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80040fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004100:	4618      	mov	r0, r3
 8004102:	3730      	adds	r7, #48	@ 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004118:	f7fe fc08 	bl	800292c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4413      	add	r3, r2
 8004126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004128:	f7fe fc00 	bl	800292c <HAL_GetTick>
 800412c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800412e:	4b39      	ldr	r3, [pc, #228]	@ (8004214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	015b      	lsls	r3, r3, #5
 8004134:	0d1b      	lsrs	r3, r3, #20
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800413e:	e054      	b.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004146:	d050      	beq.n	80041ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004148:	f7fe fbf0 	bl	800292c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	429a      	cmp	r2, r3
 8004156:	d902      	bls.n	800415e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d13d      	bne.n	80041da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800416c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004176:	d111      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004180:	d004      	beq.n	800418c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418a:	d107      	bne.n	800419c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800419a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a4:	d10f      	bne.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e017      	b.n	800420a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	429a      	cmp	r2, r3
 8004206:	d19b      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000014 	.word	0x20000014

08004218 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800422c:	d111      	bne.n	8004252 <SPI_EndRxTransaction+0x3a>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004236:	d004      	beq.n	8004242 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004240:	d107      	bne.n	8004252 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800425a:	d12a      	bne.n	80042b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004264:	d012      	beq.n	800428c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2200      	movs	r2, #0
 800426e:	2180      	movs	r1, #128	@ 0x80
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff ff49 	bl	8004108 <SPI_WaitFlagStateUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02d      	beq.n	80042d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004280:	f043 0220 	orr.w	r2, r3, #32
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e026      	b.n	80042da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	2101      	movs	r1, #1
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff36 	bl	8004108 <SPI_WaitFlagStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01a      	beq.n	80042d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e013      	b.n	80042da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2101      	movs	r1, #1
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff ff23 	bl	8004108 <SPI_WaitFlagStateUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e000      	b.n	80042da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004360 <SPI_EndRxTxTransaction+0x7c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004364 <SPI_EndRxTxTransaction+0x80>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	0d5b      	lsrs	r3, r3, #21
 80042fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430e:	d112      	bne.n	8004336 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	2180      	movs	r1, #128	@ 0x80
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fef4 	bl	8004108 <SPI_WaitFlagStateUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d016      	beq.n	8004354 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e00f      	b.n	8004356 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	3b01      	subs	r3, #1
 8004340:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434c:	2b80      	cmp	r3, #128	@ 0x80
 800434e:	d0f2      	beq.n	8004336 <SPI_EndRxTxTransaction+0x52>
 8004350:	e000      	b.n	8004354 <SPI_EndRxTxTransaction+0x70>
        break;
 8004352:	bf00      	nop
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000014 	.word	0x20000014
 8004364:	165e9f81 	.word	0x165e9f81

08004368 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e034      	b.n	80043e8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7fc fa22 	bl	80007dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3308      	adds	r3, #8
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fca6 	bl	8004cf4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	f000 fcf0 	bl	8004d98 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6858      	ldr	r0, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	f000 fd25 	bl	8004e14 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	6892      	ldr	r2, [r2, #8]
 80043d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	f041 0101 	orr.w	r1, r1, #1
 80043e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e041      	b.n	8004486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe f9b4 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f000 fa96 	bl	8004960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d001      	beq.n	80044a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e04e      	b.n	8004546 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a23      	ldr	r2, [pc, #140]	@ (8004554 <HAL_TIM_Base_Start_IT+0xc4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d022      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d2:	d01d      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004558 <HAL_TIM_Base_Start_IT+0xc8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d018      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <HAL_TIM_Base_Start_IT+0xcc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00e      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <HAL_TIM_Base_Start_IT+0xd4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <HAL_TIM_Base_Start_IT+0xd8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x80>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a18      	ldr	r2, [pc, #96]	@ (800456c <HAL_TIM_Base_Start_IT+0xdc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d111      	bne.n	8004534 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b06      	cmp	r3, #6
 8004520:	d010      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	e007      	b.n	8004544 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40010400 	.word	0x40010400
 8004568:	40014000 	.word	0x40014000
 800456c:	40001800 	.word	0x40001800

08004570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b02      	cmp	r3, #2
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0202 	mvn.w	r2, #2
 800459c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9b5 	bl	8004922 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9a7 	bl	800490e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9b8 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0204 	mvn.w	r2, #4
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f98b 	bl	8004922 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f97d 	bl	800490e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f98e 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d122      	bne.n	8004674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b08      	cmp	r3, #8
 800463a:	d11b      	bne.n	8004674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0208 	mvn.w	r2, #8
 8004644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2204      	movs	r2, #4
 800464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f961 	bl	8004922 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f953 	bl	800490e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f964 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b10      	cmp	r3, #16
 8004680:	d122      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b10      	cmp	r3, #16
 800468e:	d11b      	bne.n	80046c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0210 	mvn.w	r2, #16
 8004698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2208      	movs	r2, #8
 800469e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f937 	bl	8004922 <HAL_TIM_IC_CaptureCallback>
 80046b4:	e005      	b.n	80046c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f929 	bl	800490e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f93a 	bl	8004936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10e      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d107      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0201 	mvn.w	r2, #1
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fda0 	bl	8002234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fe:	2b80      	cmp	r3, #128	@ 0x80
 8004700:	d10e      	bne.n	8004720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b80      	cmp	r3, #128	@ 0x80
 800470e:	d107      	bne.n	8004720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fae0 	bl	8004ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b40      	cmp	r3, #64	@ 0x40
 800472c:	d10e      	bne.n	800474c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004738:	2b40      	cmp	r3, #64	@ 0x40
 800473a:	d107      	bne.n	800474c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8ff 	bl	800494a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b20      	cmp	r3, #32
 8004758:	d10e      	bne.n	8004778 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b20      	cmp	r3, #32
 8004766:	d107      	bne.n	8004778 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0220 	mvn.w	r2, #32
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 faaa 	bl	8004ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_TIM_ConfigClockSource+0x1c>
 8004798:	2302      	movs	r3, #2
 800479a:	e0b4      	b.n	8004906 <HAL_TIM_ConfigClockSource+0x186>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047d4:	d03e      	beq.n	8004854 <HAL_TIM_ConfigClockSource+0xd4>
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047da:	f200 8087 	bhi.w	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e2:	f000 8086 	beq.w	80048f2 <HAL_TIM_ConfigClockSource+0x172>
 80047e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ea:	d87f      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b70      	cmp	r3, #112	@ 0x70
 80047ee:	d01a      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0xa6>
 80047f0:	2b70      	cmp	r3, #112	@ 0x70
 80047f2:	d87b      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b60      	cmp	r3, #96	@ 0x60
 80047f6:	d050      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x11a>
 80047f8:	2b60      	cmp	r3, #96	@ 0x60
 80047fa:	d877      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b50      	cmp	r3, #80	@ 0x50
 80047fe:	d03c      	beq.n	800487a <HAL_TIM_ConfigClockSource+0xfa>
 8004800:	2b50      	cmp	r3, #80	@ 0x50
 8004802:	d873      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d058      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0x13a>
 8004808:	2b40      	cmp	r3, #64	@ 0x40
 800480a:	d86f      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b30      	cmp	r3, #48	@ 0x30
 800480e:	d064      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	2b30      	cmp	r3, #48	@ 0x30
 8004812:	d86b      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d060      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	2b20      	cmp	r3, #32
 800481a:	d867      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d05c      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	2b10      	cmp	r3, #16
 8004822:	d05a      	beq.n	80048da <HAL_TIM_ConfigClockSource+0x15a>
 8004824:	e062      	b.n	80048ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f000 f9ad 	bl	8004b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	609a      	str	r2, [r3, #8]
      break;
 8004852:	e04f      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	6899      	ldr	r1, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f000 f996 	bl	8004b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004876:	609a      	str	r2, [r3, #8]
      break;
 8004878:	e03c      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	461a      	mov	r2, r3
 8004888:	f000 f90a 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2150      	movs	r1, #80	@ 0x50
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f963 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004898:	e02c      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f000 f929 	bl	8004afe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2160      	movs	r1, #96	@ 0x60
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f953 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80048b8:	e01c      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	461a      	mov	r2, r3
 80048c8:	f000 f8ea 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2140      	movs	r1, #64	@ 0x40
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f943 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80048d8:	e00c      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4619      	mov	r1, r3
 80048e4:	4610      	mov	r0, r2
 80048e6:	f000 f93a 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80048ea:	e003      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
      break;
 80048f0:	e000      	b.n	80048f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004904:	7bfb      	ldrb	r3, [r7, #15]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a40      	ldr	r2, [pc, #256]	@ (8004a74 <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3d      	ldr	r2, [pc, #244]	@ (8004a78 <TIM_Base_SetConfig+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a7c <TIM_Base_SetConfig+0x11c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3b      	ldr	r2, [pc, #236]	@ (8004a80 <TIM_Base_SetConfig+0x120>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3a      	ldr	r2, [pc, #232]	@ (8004a84 <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a74 <TIM_Base_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02b      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c0:	d027      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004a78 <TIM_Base_SetConfig+0x118>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d023      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2b      	ldr	r2, [pc, #172]	@ (8004a7c <TIM_Base_SetConfig+0x11c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004a80 <TIM_Base_SetConfig+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01b      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a29      	ldr	r2, [pc, #164]	@ (8004a84 <TIM_Base_SetConfig+0x124>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d017      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a28      	ldr	r2, [pc, #160]	@ (8004a88 <TIM_Base_SetConfig+0x128>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a27      	ldr	r2, [pc, #156]	@ (8004a8c <TIM_Base_SetConfig+0x12c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00f      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a26      	ldr	r2, [pc, #152]	@ (8004a90 <TIM_Base_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a25      	ldr	r2, [pc, #148]	@ (8004a94 <TIM_Base_SetConfig+0x134>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a24      	ldr	r2, [pc, #144]	@ (8004a98 <TIM_Base_SetConfig+0x138>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a23      	ldr	r2, [pc, #140]	@ (8004a9c <TIM_Base_SetConfig+0x13c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d108      	bne.n	8004a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a74 <TIM_Base_SetConfig+0x114>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a0c      	ldr	r2, [pc, #48]	@ (8004a84 <TIM_Base_SetConfig+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d103      	bne.n	8004a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	615a      	str	r2, [r3, #20]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40010400 	.word	0x40010400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800
 8004a94:	40001800 	.word	0x40001800
 8004a98:	40001c00 	.word	0x40001c00
 8004a9c:	40002000 	.word	0x40002000

08004aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 030a 	bic.w	r3, r3, #10
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f043 0307 	orr.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e05a      	b.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d022      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c38:	d01d      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d018      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1a      	ldr	r2, [pc, #104]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a18      	ldr	r2, [pc, #96]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a15      	ldr	r2, [pc, #84]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10c      	bne.n	8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40010400 	.word	0x40010400
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	40001800 	.word	0x40001800

08004ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <FSMC_NORSRAM_Init+0xa0>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004d1e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004d24:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004d2a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004d30:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004d36:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004d3c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004d42:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8004d48:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8004d4e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8004d54:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8004d5a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8004d60:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d103      	bne.n	8004d78 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d76:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	fff00080 	.word	0xfff00080

08004d98 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004dba:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004dc6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004dce:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004dd6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004de0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	3b02      	subs	r3, #2
 8004de8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004dea:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004df0:	4313      	orrs	r3, r2
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e2c:	d122      	bne.n	8004e74 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e36:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	4b15      	ldr	r3, [pc, #84]	@ (8004e90 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004e4a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004e52:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004e5a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004e60:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e72:	e005      	b.n	8004e80 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	cff00000 	.word	0xcff00000

08004e94 <rand>:
 8004e94:	4b16      	ldr	r3, [pc, #88]	@ (8004ef0 <rand+0x5c>)
 8004e96:	b510      	push	{r4, lr}
 8004e98:	681c      	ldr	r4, [r3, #0]
 8004e9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e9c:	b9b3      	cbnz	r3, 8004ecc <rand+0x38>
 8004e9e:	2018      	movs	r0, #24
 8004ea0:	f000 f94c 	bl	800513c <malloc>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6320      	str	r0, [r4, #48]	@ 0x30
 8004ea8:	b920      	cbnz	r0, 8004eb4 <rand+0x20>
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <rand+0x60>)
 8004eac:	4812      	ldr	r0, [pc, #72]	@ (8004ef8 <rand+0x64>)
 8004eae:	2152      	movs	r1, #82	@ 0x52
 8004eb0:	f000 f926 	bl	8005100 <__assert_func>
 8004eb4:	4911      	ldr	r1, [pc, #68]	@ (8004efc <rand+0x68>)
 8004eb6:	4b12      	ldr	r3, [pc, #72]	@ (8004f00 <rand+0x6c>)
 8004eb8:	e9c0 1300 	strd	r1, r3, [r0]
 8004ebc:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <rand+0x70>)
 8004ebe:	6083      	str	r3, [r0, #8]
 8004ec0:	230b      	movs	r3, #11
 8004ec2:	8183      	strh	r3, [r0, #12]
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ecc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ece:	480e      	ldr	r0, [pc, #56]	@ (8004f08 <rand+0x74>)
 8004ed0:	690b      	ldr	r3, [r1, #16]
 8004ed2:	694c      	ldr	r4, [r1, #20]
 8004ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8004f0c <rand+0x78>)
 8004ed6:	4358      	muls	r0, r3
 8004ed8:	fb02 0004 	mla	r0, r2, r4, r0
 8004edc:	fba3 3202 	umull	r3, r2, r3, r2
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	eb40 0002 	adc.w	r0, r0, r2
 8004ee6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004eea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004eee:	bd10      	pop	{r4, pc}
 8004ef0:	2000002c 	.word	0x2000002c
 8004ef4:	08008e20 	.word	0x08008e20
 8004ef8:	08008e37 	.word	0x08008e37
 8004efc:	abcd330e 	.word	0xabcd330e
 8004f00:	e66d1234 	.word	0xe66d1234
 8004f04:	0005deec 	.word	0x0005deec
 8004f08:	5851f42d 	.word	0x5851f42d
 8004f0c:	4c957f2d 	.word	0x4c957f2d

08004f10 <std>:
 8004f10:	2300      	movs	r3, #0
 8004f12:	b510      	push	{r4, lr}
 8004f14:	4604      	mov	r4, r0
 8004f16:	e9c0 3300 	strd	r3, r3, [r0]
 8004f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1e:	6083      	str	r3, [r0, #8]
 8004f20:	8181      	strh	r1, [r0, #12]
 8004f22:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f24:	81c2      	strh	r2, [r0, #14]
 8004f26:	6183      	str	r3, [r0, #24]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	305c      	adds	r0, #92	@ 0x5c
 8004f2e:	f000 f8b1 	bl	8005094 <memset>
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <std+0x58>)
 8004f34:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <std+0x5c>)
 8004f38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x60>)
 8004f3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x64>)
 8004f40:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x68>)
 8004f44:	6224      	str	r4, [r4, #32]
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d006      	beq.n	8004f58 <std+0x48>
 8004f4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f4e:	4294      	cmp	r4, r2
 8004f50:	d002      	beq.n	8004f58 <std+0x48>
 8004f52:	33d0      	adds	r3, #208	@ 0xd0
 8004f54:	429c      	cmp	r4, r3
 8004f56:	d105      	bne.n	8004f64 <std+0x54>
 8004f58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f60:	f000 b8ca 	b.w	80050f8 <__retarget_lock_init_recursive>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	bf00      	nop
 8004f68:	08005401 	.word	0x08005401
 8004f6c:	08005423 	.word	0x08005423
 8004f70:	0800545b 	.word	0x0800545b
 8004f74:	0800547f 	.word	0x0800547f
 8004f78:	2000028c 	.word	0x2000028c

08004f7c <stdio_exit_handler>:
 8004f7c:	4a02      	ldr	r2, [pc, #8]	@ (8004f88 <stdio_exit_handler+0xc>)
 8004f7e:	4903      	ldr	r1, [pc, #12]	@ (8004f8c <stdio_exit_handler+0x10>)
 8004f80:	4803      	ldr	r0, [pc, #12]	@ (8004f90 <stdio_exit_handler+0x14>)
 8004f82:	f000 b869 	b.w	8005058 <_fwalk_sglue>
 8004f86:	bf00      	nop
 8004f88:	20000020 	.word	0x20000020
 8004f8c:	08005399 	.word	0x08005399
 8004f90:	20000030 	.word	0x20000030

08004f94 <cleanup_stdio>:
 8004f94:	6841      	ldr	r1, [r0, #4]
 8004f96:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc8 <cleanup_stdio+0x34>)
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	d001      	beq.n	8004fa4 <cleanup_stdio+0x10>
 8004fa0:	f000 f9fa 	bl	8005398 <_fflush_r>
 8004fa4:	68a1      	ldr	r1, [r4, #8]
 8004fa6:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <cleanup_stdio+0x38>)
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	d002      	beq.n	8004fb2 <cleanup_stdio+0x1e>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f9f3 	bl	8005398 <_fflush_r>
 8004fb2:	68e1      	ldr	r1, [r4, #12]
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <cleanup_stdio+0x3c>)
 8004fb6:	4299      	cmp	r1, r3
 8004fb8:	d004      	beq.n	8004fc4 <cleanup_stdio+0x30>
 8004fba:	4620      	mov	r0, r4
 8004fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc0:	f000 b9ea 	b.w	8005398 <_fflush_r>
 8004fc4:	bd10      	pop	{r4, pc}
 8004fc6:	bf00      	nop
 8004fc8:	2000028c 	.word	0x2000028c
 8004fcc:	200002f4 	.word	0x200002f4
 8004fd0:	2000035c 	.word	0x2000035c

08004fd4 <global_stdio_init.part.0>:
 8004fd4:	b510      	push	{r4, lr}
 8004fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <global_stdio_init.part.0+0x30>)
 8004fd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005008 <global_stdio_init.part.0+0x34>)
 8004fda:	4a0c      	ldr	r2, [pc, #48]	@ (800500c <global_stdio_init.part.0+0x38>)
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	f7ff ff94 	bl	8004f10 <std>
 8004fe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004fec:	2201      	movs	r2, #1
 8004fee:	2109      	movs	r1, #9
 8004ff0:	f7ff ff8e 	bl	8004f10 <std>
 8004ff4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffe:	2112      	movs	r1, #18
 8005000:	f7ff bf86 	b.w	8004f10 <std>
 8005004:	200003c4 	.word	0x200003c4
 8005008:	2000028c 	.word	0x2000028c
 800500c:	08004f7d 	.word	0x08004f7d

08005010 <__sfp_lock_acquire>:
 8005010:	4801      	ldr	r0, [pc, #4]	@ (8005018 <__sfp_lock_acquire+0x8>)
 8005012:	f000 b872 	b.w	80050fa <__retarget_lock_acquire_recursive>
 8005016:	bf00      	nop
 8005018:	200003c9 	.word	0x200003c9

0800501c <__sfp_lock_release>:
 800501c:	4801      	ldr	r0, [pc, #4]	@ (8005024 <__sfp_lock_release+0x8>)
 800501e:	f000 b86d 	b.w	80050fc <__retarget_lock_release_recursive>
 8005022:	bf00      	nop
 8005024:	200003c9 	.word	0x200003c9

08005028 <__sinit>:
 8005028:	b510      	push	{r4, lr}
 800502a:	4604      	mov	r4, r0
 800502c:	f7ff fff0 	bl	8005010 <__sfp_lock_acquire>
 8005030:	6a23      	ldr	r3, [r4, #32]
 8005032:	b11b      	cbz	r3, 800503c <__sinit+0x14>
 8005034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005038:	f7ff bff0 	b.w	800501c <__sfp_lock_release>
 800503c:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <__sinit+0x28>)
 800503e:	6223      	str	r3, [r4, #32]
 8005040:	4b04      	ldr	r3, [pc, #16]	@ (8005054 <__sinit+0x2c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f5      	bne.n	8005034 <__sinit+0xc>
 8005048:	f7ff ffc4 	bl	8004fd4 <global_stdio_init.part.0>
 800504c:	e7f2      	b.n	8005034 <__sinit+0xc>
 800504e:	bf00      	nop
 8005050:	08004f95 	.word	0x08004f95
 8005054:	200003c4 	.word	0x200003c4

08005058 <_fwalk_sglue>:
 8005058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800505c:	4607      	mov	r7, r0
 800505e:	4688      	mov	r8, r1
 8005060:	4614      	mov	r4, r2
 8005062:	2600      	movs	r6, #0
 8005064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005068:	f1b9 0901 	subs.w	r9, r9, #1
 800506c:	d505      	bpl.n	800507a <_fwalk_sglue+0x22>
 800506e:	6824      	ldr	r4, [r4, #0]
 8005070:	2c00      	cmp	r4, #0
 8005072:	d1f7      	bne.n	8005064 <_fwalk_sglue+0xc>
 8005074:	4630      	mov	r0, r6
 8005076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d907      	bls.n	8005090 <_fwalk_sglue+0x38>
 8005080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005084:	3301      	adds	r3, #1
 8005086:	d003      	beq.n	8005090 <_fwalk_sglue+0x38>
 8005088:	4629      	mov	r1, r5
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	4306      	orrs	r6, r0
 8005090:	3568      	adds	r5, #104	@ 0x68
 8005092:	e7e9      	b.n	8005068 <_fwalk_sglue+0x10>

08005094 <memset>:
 8005094:	4402      	add	r2, r0
 8005096:	4603      	mov	r3, r0
 8005098:	4293      	cmp	r3, r2
 800509a:	d100      	bne.n	800509e <memset+0xa>
 800509c:	4770      	bx	lr
 800509e:	f803 1b01 	strb.w	r1, [r3], #1
 80050a2:	e7f9      	b.n	8005098 <memset+0x4>

080050a4 <__errno>:
 80050a4:	4b01      	ldr	r3, [pc, #4]	@ (80050ac <__errno+0x8>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	2000002c 	.word	0x2000002c

080050b0 <__libc_init_array>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	4d0d      	ldr	r5, [pc, #52]	@ (80050e8 <__libc_init_array+0x38>)
 80050b4:	4c0d      	ldr	r4, [pc, #52]	@ (80050ec <__libc_init_array+0x3c>)
 80050b6:	1b64      	subs	r4, r4, r5
 80050b8:	10a4      	asrs	r4, r4, #2
 80050ba:	2600      	movs	r6, #0
 80050bc:	42a6      	cmp	r6, r4
 80050be:	d109      	bne.n	80050d4 <__libc_init_array+0x24>
 80050c0:	4d0b      	ldr	r5, [pc, #44]	@ (80050f0 <__libc_init_array+0x40>)
 80050c2:	4c0c      	ldr	r4, [pc, #48]	@ (80050f4 <__libc_init_array+0x44>)
 80050c4:	f000 fec6 	bl	8005e54 <_init>
 80050c8:	1b64      	subs	r4, r4, r5
 80050ca:	10a4      	asrs	r4, r4, #2
 80050cc:	2600      	movs	r6, #0
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	d105      	bne.n	80050de <__libc_init_array+0x2e>
 80050d2:	bd70      	pop	{r4, r5, r6, pc}
 80050d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d8:	4798      	blx	r3
 80050da:	3601      	adds	r6, #1
 80050dc:	e7ee      	b.n	80050bc <__libc_init_array+0xc>
 80050de:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e2:	4798      	blx	r3
 80050e4:	3601      	adds	r6, #1
 80050e6:	e7f2      	b.n	80050ce <__libc_init_array+0x1e>
 80050e8:	08008f08 	.word	0x08008f08
 80050ec:	08008f08 	.word	0x08008f08
 80050f0:	08008f08 	.word	0x08008f08
 80050f4:	08008f0c 	.word	0x08008f0c

080050f8 <__retarget_lock_init_recursive>:
 80050f8:	4770      	bx	lr

080050fa <__retarget_lock_acquire_recursive>:
 80050fa:	4770      	bx	lr

080050fc <__retarget_lock_release_recursive>:
 80050fc:	4770      	bx	lr
	...

08005100 <__assert_func>:
 8005100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005102:	4614      	mov	r4, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4b09      	ldr	r3, [pc, #36]	@ (800512c <__assert_func+0x2c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4605      	mov	r5, r0
 800510c:	68d8      	ldr	r0, [r3, #12]
 800510e:	b954      	cbnz	r4, 8005126 <__assert_func+0x26>
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <__assert_func+0x30>)
 8005112:	461c      	mov	r4, r3
 8005114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005118:	9100      	str	r1, [sp, #0]
 800511a:	462b      	mov	r3, r5
 800511c:	4905      	ldr	r1, [pc, #20]	@ (8005134 <__assert_func+0x34>)
 800511e:	f000 f9b3 	bl	8005488 <fiprintf>
 8005122:	f000 fa19 	bl	8005558 <abort>
 8005126:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <__assert_func+0x38>)
 8005128:	e7f4      	b.n	8005114 <__assert_func+0x14>
 800512a:	bf00      	nop
 800512c:	2000002c 	.word	0x2000002c
 8005130:	08008eca 	.word	0x08008eca
 8005134:	08008e9c 	.word	0x08008e9c
 8005138:	08008e8f 	.word	0x08008e8f

0800513c <malloc>:
 800513c:	4b02      	ldr	r3, [pc, #8]	@ (8005148 <malloc+0xc>)
 800513e:	4601      	mov	r1, r0
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f000 b825 	b.w	8005190 <_malloc_r>
 8005146:	bf00      	nop
 8005148:	2000002c 	.word	0x2000002c

0800514c <sbrk_aligned>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4e0f      	ldr	r6, [pc, #60]	@ (800518c <sbrk_aligned+0x40>)
 8005150:	460c      	mov	r4, r1
 8005152:	6831      	ldr	r1, [r6, #0]
 8005154:	4605      	mov	r5, r0
 8005156:	b911      	cbnz	r1, 800515e <sbrk_aligned+0x12>
 8005158:	f000 f9dc 	bl	8005514 <_sbrk_r>
 800515c:	6030      	str	r0, [r6, #0]
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f000 f9d7 	bl	8005514 <_sbrk_r>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d103      	bne.n	8005172 <sbrk_aligned+0x26>
 800516a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800516e:	4620      	mov	r0, r4
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	1cc4      	adds	r4, r0, #3
 8005174:	f024 0403 	bic.w	r4, r4, #3
 8005178:	42a0      	cmp	r0, r4
 800517a:	d0f8      	beq.n	800516e <sbrk_aligned+0x22>
 800517c:	1a21      	subs	r1, r4, r0
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f9c8 	bl	8005514 <_sbrk_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d1f2      	bne.n	800516e <sbrk_aligned+0x22>
 8005188:	e7ef      	b.n	800516a <sbrk_aligned+0x1e>
 800518a:	bf00      	nop
 800518c:	200003cc 	.word	0x200003cc

08005190 <_malloc_r>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	1ccd      	adds	r5, r1, #3
 8005196:	f025 0503 	bic.w	r5, r5, #3
 800519a:	3508      	adds	r5, #8
 800519c:	2d0c      	cmp	r5, #12
 800519e:	bf38      	it	cc
 80051a0:	250c      	movcc	r5, #12
 80051a2:	2d00      	cmp	r5, #0
 80051a4:	4606      	mov	r6, r0
 80051a6:	db01      	blt.n	80051ac <_malloc_r+0x1c>
 80051a8:	42a9      	cmp	r1, r5
 80051aa:	d904      	bls.n	80051b6 <_malloc_r+0x26>
 80051ac:	230c      	movs	r3, #12
 80051ae:	6033      	str	r3, [r6, #0]
 80051b0:	2000      	movs	r0, #0
 80051b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800528c <_malloc_r+0xfc>
 80051ba:	f000 f915 	bl	80053e8 <__malloc_lock>
 80051be:	f8d8 3000 	ldr.w	r3, [r8]
 80051c2:	461c      	mov	r4, r3
 80051c4:	bb44      	cbnz	r4, 8005218 <_malloc_r+0x88>
 80051c6:	4629      	mov	r1, r5
 80051c8:	4630      	mov	r0, r6
 80051ca:	f7ff ffbf 	bl	800514c <sbrk_aligned>
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	4604      	mov	r4, r0
 80051d2:	d158      	bne.n	8005286 <_malloc_r+0xf6>
 80051d4:	f8d8 4000 	ldr.w	r4, [r8]
 80051d8:	4627      	mov	r7, r4
 80051da:	2f00      	cmp	r7, #0
 80051dc:	d143      	bne.n	8005266 <_malloc_r+0xd6>
 80051de:	2c00      	cmp	r4, #0
 80051e0:	d04b      	beq.n	800527a <_malloc_r+0xea>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	4639      	mov	r1, r7
 80051e6:	4630      	mov	r0, r6
 80051e8:	eb04 0903 	add.w	r9, r4, r3
 80051ec:	f000 f992 	bl	8005514 <_sbrk_r>
 80051f0:	4581      	cmp	r9, r0
 80051f2:	d142      	bne.n	800527a <_malloc_r+0xea>
 80051f4:	6821      	ldr	r1, [r4, #0]
 80051f6:	1a6d      	subs	r5, r5, r1
 80051f8:	4629      	mov	r1, r5
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7ff ffa6 	bl	800514c <sbrk_aligned>
 8005200:	3001      	adds	r0, #1
 8005202:	d03a      	beq.n	800527a <_malloc_r+0xea>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	442b      	add	r3, r5
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	f8d8 3000 	ldr.w	r3, [r8]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	bb62      	cbnz	r2, 800526c <_malloc_r+0xdc>
 8005212:	f8c8 7000 	str.w	r7, [r8]
 8005216:	e00f      	b.n	8005238 <_malloc_r+0xa8>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	1b52      	subs	r2, r2, r5
 800521c:	d420      	bmi.n	8005260 <_malloc_r+0xd0>
 800521e:	2a0b      	cmp	r2, #11
 8005220:	d917      	bls.n	8005252 <_malloc_r+0xc2>
 8005222:	1961      	adds	r1, r4, r5
 8005224:	42a3      	cmp	r3, r4
 8005226:	6025      	str	r5, [r4, #0]
 8005228:	bf18      	it	ne
 800522a:	6059      	strne	r1, [r3, #4]
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	bf08      	it	eq
 8005230:	f8c8 1000 	streq.w	r1, [r8]
 8005234:	5162      	str	r2, [r4, r5]
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	4630      	mov	r0, r6
 800523a:	f000 f8db 	bl	80053f4 <__malloc_unlock>
 800523e:	f104 000b 	add.w	r0, r4, #11
 8005242:	1d23      	adds	r3, r4, #4
 8005244:	f020 0007 	bic.w	r0, r0, #7
 8005248:	1ac2      	subs	r2, r0, r3
 800524a:	bf1c      	itt	ne
 800524c:	1a1b      	subne	r3, r3, r0
 800524e:	50a3      	strne	r3, [r4, r2]
 8005250:	e7af      	b.n	80051b2 <_malloc_r+0x22>
 8005252:	6862      	ldr	r2, [r4, #4]
 8005254:	42a3      	cmp	r3, r4
 8005256:	bf0c      	ite	eq
 8005258:	f8c8 2000 	streq.w	r2, [r8]
 800525c:	605a      	strne	r2, [r3, #4]
 800525e:	e7eb      	b.n	8005238 <_malloc_r+0xa8>
 8005260:	4623      	mov	r3, r4
 8005262:	6864      	ldr	r4, [r4, #4]
 8005264:	e7ae      	b.n	80051c4 <_malloc_r+0x34>
 8005266:	463c      	mov	r4, r7
 8005268:	687f      	ldr	r7, [r7, #4]
 800526a:	e7b6      	b.n	80051da <_malloc_r+0x4a>
 800526c:	461a      	mov	r2, r3
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	42a3      	cmp	r3, r4
 8005272:	d1fb      	bne.n	800526c <_malloc_r+0xdc>
 8005274:	2300      	movs	r3, #0
 8005276:	6053      	str	r3, [r2, #4]
 8005278:	e7de      	b.n	8005238 <_malloc_r+0xa8>
 800527a:	230c      	movs	r3, #12
 800527c:	6033      	str	r3, [r6, #0]
 800527e:	4630      	mov	r0, r6
 8005280:	f000 f8b8 	bl	80053f4 <__malloc_unlock>
 8005284:	e794      	b.n	80051b0 <_malloc_r+0x20>
 8005286:	6005      	str	r5, [r0, #0]
 8005288:	e7d6      	b.n	8005238 <_malloc_r+0xa8>
 800528a:	bf00      	nop
 800528c:	200003d0 	.word	0x200003d0

08005290 <__sflush_r>:
 8005290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005298:	0716      	lsls	r6, r2, #28
 800529a:	4605      	mov	r5, r0
 800529c:	460c      	mov	r4, r1
 800529e:	d454      	bmi.n	800534a <__sflush_r+0xba>
 80052a0:	684b      	ldr	r3, [r1, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	dc02      	bgt.n	80052ac <__sflush_r+0x1c>
 80052a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dd48      	ble.n	800533e <__sflush_r+0xae>
 80052ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052ae:	2e00      	cmp	r6, #0
 80052b0:	d045      	beq.n	800533e <__sflush_r+0xae>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052b8:	682f      	ldr	r7, [r5, #0]
 80052ba:	6a21      	ldr	r1, [r4, #32]
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	d030      	beq.n	8005322 <__sflush_r+0x92>
 80052c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	0759      	lsls	r1, r3, #29
 80052c6:	d505      	bpl.n	80052d4 <__sflush_r+0x44>
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052ce:	b10b      	cbz	r3, 80052d4 <__sflush_r+0x44>
 80052d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052d2:	1ad2      	subs	r2, r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052d8:	6a21      	ldr	r1, [r4, #32]
 80052da:	4628      	mov	r0, r5
 80052dc:	47b0      	blx	r6
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	d106      	bne.n	80052f2 <__sflush_r+0x62>
 80052e4:	6829      	ldr	r1, [r5, #0]
 80052e6:	291d      	cmp	r1, #29
 80052e8:	d82b      	bhi.n	8005342 <__sflush_r+0xb2>
 80052ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005394 <__sflush_r+0x104>)
 80052ec:	410a      	asrs	r2, r1
 80052ee:	07d6      	lsls	r6, r2, #31
 80052f0:	d427      	bmi.n	8005342 <__sflush_r+0xb2>
 80052f2:	2200      	movs	r2, #0
 80052f4:	6062      	str	r2, [r4, #4]
 80052f6:	04d9      	lsls	r1, r3, #19
 80052f8:	6922      	ldr	r2, [r4, #16]
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	d504      	bpl.n	8005308 <__sflush_r+0x78>
 80052fe:	1c42      	adds	r2, r0, #1
 8005300:	d101      	bne.n	8005306 <__sflush_r+0x76>
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	b903      	cbnz	r3, 8005308 <__sflush_r+0x78>
 8005306:	6560      	str	r0, [r4, #84]	@ 0x54
 8005308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800530a:	602f      	str	r7, [r5, #0]
 800530c:	b1b9      	cbz	r1, 800533e <__sflush_r+0xae>
 800530e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005312:	4299      	cmp	r1, r3
 8005314:	d002      	beq.n	800531c <__sflush_r+0x8c>
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f926 	bl	8005568 <_free_r>
 800531c:	2300      	movs	r3, #0
 800531e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005320:	e00d      	b.n	800533e <__sflush_r+0xae>
 8005322:	2301      	movs	r3, #1
 8005324:	4628      	mov	r0, r5
 8005326:	47b0      	blx	r6
 8005328:	4602      	mov	r2, r0
 800532a:	1c50      	adds	r0, r2, #1
 800532c:	d1c9      	bne.n	80052c2 <__sflush_r+0x32>
 800532e:	682b      	ldr	r3, [r5, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0c6      	beq.n	80052c2 <__sflush_r+0x32>
 8005334:	2b1d      	cmp	r3, #29
 8005336:	d001      	beq.n	800533c <__sflush_r+0xac>
 8005338:	2b16      	cmp	r3, #22
 800533a:	d11e      	bne.n	800537a <__sflush_r+0xea>
 800533c:	602f      	str	r7, [r5, #0]
 800533e:	2000      	movs	r0, #0
 8005340:	e022      	b.n	8005388 <__sflush_r+0xf8>
 8005342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005346:	b21b      	sxth	r3, r3
 8005348:	e01b      	b.n	8005382 <__sflush_r+0xf2>
 800534a:	690f      	ldr	r7, [r1, #16]
 800534c:	2f00      	cmp	r7, #0
 800534e:	d0f6      	beq.n	800533e <__sflush_r+0xae>
 8005350:	0793      	lsls	r3, r2, #30
 8005352:	680e      	ldr	r6, [r1, #0]
 8005354:	bf08      	it	eq
 8005356:	694b      	ldreq	r3, [r1, #20]
 8005358:	600f      	str	r7, [r1, #0]
 800535a:	bf18      	it	ne
 800535c:	2300      	movne	r3, #0
 800535e:	eba6 0807 	sub.w	r8, r6, r7
 8005362:	608b      	str	r3, [r1, #8]
 8005364:	f1b8 0f00 	cmp.w	r8, #0
 8005368:	dde9      	ble.n	800533e <__sflush_r+0xae>
 800536a:	6a21      	ldr	r1, [r4, #32]
 800536c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800536e:	4643      	mov	r3, r8
 8005370:	463a      	mov	r2, r7
 8005372:	4628      	mov	r0, r5
 8005374:	47b0      	blx	r6
 8005376:	2800      	cmp	r0, #0
 8005378:	dc08      	bgt.n	800538c <__sflush_r+0xfc>
 800537a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800537e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800538c:	4407      	add	r7, r0
 800538e:	eba8 0800 	sub.w	r8, r8, r0
 8005392:	e7e7      	b.n	8005364 <__sflush_r+0xd4>
 8005394:	dfbffffe 	.word	0xdfbffffe

08005398 <_fflush_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	690b      	ldr	r3, [r1, #16]
 800539c:	4605      	mov	r5, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	b913      	cbnz	r3, 80053a8 <_fflush_r+0x10>
 80053a2:	2500      	movs	r5, #0
 80053a4:	4628      	mov	r0, r5
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	b118      	cbz	r0, 80053b2 <_fflush_r+0x1a>
 80053aa:	6a03      	ldr	r3, [r0, #32]
 80053ac:	b90b      	cbnz	r3, 80053b2 <_fflush_r+0x1a>
 80053ae:	f7ff fe3b 	bl	8005028 <__sinit>
 80053b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f3      	beq.n	80053a2 <_fflush_r+0xa>
 80053ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053bc:	07d0      	lsls	r0, r2, #31
 80053be:	d404      	bmi.n	80053ca <_fflush_r+0x32>
 80053c0:	0599      	lsls	r1, r3, #22
 80053c2:	d402      	bmi.n	80053ca <_fflush_r+0x32>
 80053c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053c6:	f7ff fe98 	bl	80050fa <__retarget_lock_acquire_recursive>
 80053ca:	4628      	mov	r0, r5
 80053cc:	4621      	mov	r1, r4
 80053ce:	f7ff ff5f 	bl	8005290 <__sflush_r>
 80053d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053d4:	07da      	lsls	r2, r3, #31
 80053d6:	4605      	mov	r5, r0
 80053d8:	d4e4      	bmi.n	80053a4 <_fflush_r+0xc>
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	059b      	lsls	r3, r3, #22
 80053de:	d4e1      	bmi.n	80053a4 <_fflush_r+0xc>
 80053e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053e2:	f7ff fe8b 	bl	80050fc <__retarget_lock_release_recursive>
 80053e6:	e7dd      	b.n	80053a4 <_fflush_r+0xc>

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	@ (80053f0 <__malloc_lock+0x8>)
 80053ea:	f7ff be86 	b.w	80050fa <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	200003c8 	.word	0x200003c8

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	@ (80053fc <__malloc_unlock+0x8>)
 80053f6:	f7ff be81 	b.w	80050fc <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	200003c8 	.word	0x200003c8

08005400 <__sread>:
 8005400:	b510      	push	{r4, lr}
 8005402:	460c      	mov	r4, r1
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	f000 f872 	bl	80054f0 <_read_r>
 800540c:	2800      	cmp	r0, #0
 800540e:	bfab      	itete	ge
 8005410:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005412:	89a3      	ldrhlt	r3, [r4, #12]
 8005414:	181b      	addge	r3, r3, r0
 8005416:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800541a:	bfac      	ite	ge
 800541c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800541e:	81a3      	strhlt	r3, [r4, #12]
 8005420:	bd10      	pop	{r4, pc}

08005422 <__swrite>:
 8005422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	461f      	mov	r7, r3
 8005428:	898b      	ldrh	r3, [r1, #12]
 800542a:	05db      	lsls	r3, r3, #23
 800542c:	4605      	mov	r5, r0
 800542e:	460c      	mov	r4, r1
 8005430:	4616      	mov	r6, r2
 8005432:	d505      	bpl.n	8005440 <__swrite+0x1e>
 8005434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005438:	2302      	movs	r3, #2
 800543a:	2200      	movs	r2, #0
 800543c:	f000 f846 	bl	80054cc <_lseek_r>
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005446:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800544a:	81a3      	strh	r3, [r4, #12]
 800544c:	4632      	mov	r2, r6
 800544e:	463b      	mov	r3, r7
 8005450:	4628      	mov	r0, r5
 8005452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005456:	f000 b86d 	b.w	8005534 <_write_r>

0800545a <__sseek>:
 800545a:	b510      	push	{r4, lr}
 800545c:	460c      	mov	r4, r1
 800545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005462:	f000 f833 	bl	80054cc <_lseek_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	bf15      	itete	ne
 800546c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800546e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005472:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005476:	81a3      	strheq	r3, [r4, #12]
 8005478:	bf18      	it	ne
 800547a:	81a3      	strhne	r3, [r4, #12]
 800547c:	bd10      	pop	{r4, pc}

0800547e <__sclose>:
 800547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005482:	f000 b813 	b.w	80054ac <_close_r>
	...

08005488 <fiprintf>:
 8005488:	b40e      	push	{r1, r2, r3}
 800548a:	b503      	push	{r0, r1, lr}
 800548c:	4601      	mov	r1, r0
 800548e:	ab03      	add	r3, sp, #12
 8005490:	4805      	ldr	r0, [pc, #20]	@ (80054a8 <fiprintf+0x20>)
 8005492:	f853 2b04 	ldr.w	r2, [r3], #4
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	f000 f8d9 	bl	8005650 <_vfiprintf_r>
 800549e:	b002      	add	sp, #8
 80054a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a4:	b003      	add	sp, #12
 80054a6:	4770      	bx	lr
 80054a8:	2000002c 	.word	0x2000002c

080054ac <_close_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	@ (80054c8 <_close_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fd f84e 	bl	8002558 <_close>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_close_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_close_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200003d4 	.word	0x200003d4

080054cc <_lseek_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d07      	ldr	r5, [pc, #28]	@ (80054ec <_lseek_r+0x20>)
 80054d0:	4604      	mov	r4, r0
 80054d2:	4608      	mov	r0, r1
 80054d4:	4611      	mov	r1, r2
 80054d6:	2200      	movs	r2, #0
 80054d8:	602a      	str	r2, [r5, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	f7fd f863 	bl	80025a6 <_lseek>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_lseek_r+0x1e>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_lseek_r+0x1e>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	200003d4 	.word	0x200003d4

080054f0 <_read_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d07      	ldr	r5, [pc, #28]	@ (8005510 <_read_r+0x20>)
 80054f4:	4604      	mov	r4, r0
 80054f6:	4608      	mov	r0, r1
 80054f8:	4611      	mov	r1, r2
 80054fa:	2200      	movs	r2, #0
 80054fc:	602a      	str	r2, [r5, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f7fc fff1 	bl	80024e6 <_read>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_read_r+0x1e>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_read_r+0x1e>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	200003d4 	.word	0x200003d4

08005514 <_sbrk_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d06      	ldr	r5, [pc, #24]	@ (8005530 <_sbrk_r+0x1c>)
 8005518:	2300      	movs	r3, #0
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	f7fd f84e 	bl	80025c0 <_sbrk>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_sbrk_r+0x1a>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_sbrk_r+0x1a>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	200003d4 	.word	0x200003d4

08005534 <_write_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	@ (8005554 <_write_r+0x20>)
 8005538:	4604      	mov	r4, r0
 800553a:	4608      	mov	r0, r1
 800553c:	4611      	mov	r1, r2
 800553e:	2200      	movs	r2, #0
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fc ffec 	bl	8002520 <_write>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_write_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_write_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200003d4 	.word	0x200003d4

08005558 <abort>:
 8005558:	b508      	push	{r3, lr}
 800555a:	2006      	movs	r0, #6
 800555c:	f000 fc5e 	bl	8005e1c <raise>
 8005560:	2001      	movs	r0, #1
 8005562:	f7fc ffb5 	bl	80024d0 <_exit>
	...

08005568 <_free_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4605      	mov	r5, r0
 800556c:	2900      	cmp	r1, #0
 800556e:	d041      	beq.n	80055f4 <_free_r+0x8c>
 8005570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005574:	1f0c      	subs	r4, r1, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	bfb8      	it	lt
 800557a:	18e4      	addlt	r4, r4, r3
 800557c:	f7ff ff34 	bl	80053e8 <__malloc_lock>
 8005580:	4a1d      	ldr	r2, [pc, #116]	@ (80055f8 <_free_r+0x90>)
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	b933      	cbnz	r3, 8005594 <_free_r+0x2c>
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6014      	str	r4, [r2, #0]
 800558a:	4628      	mov	r0, r5
 800558c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005590:	f7ff bf30 	b.w	80053f4 <__malloc_unlock>
 8005594:	42a3      	cmp	r3, r4
 8005596:	d908      	bls.n	80055aa <_free_r+0x42>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	1821      	adds	r1, r4, r0
 800559c:	428b      	cmp	r3, r1
 800559e:	bf01      	itttt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	1809      	addeq	r1, r1, r0
 80055a6:	6021      	streq	r1, [r4, #0]
 80055a8:	e7ed      	b.n	8005586 <_free_r+0x1e>
 80055aa:	461a      	mov	r2, r3
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	b10b      	cbz	r3, 80055b4 <_free_r+0x4c>
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d9fa      	bls.n	80055aa <_free_r+0x42>
 80055b4:	6811      	ldr	r1, [r2, #0]
 80055b6:	1850      	adds	r0, r2, r1
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d10b      	bne.n	80055d4 <_free_r+0x6c>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	4401      	add	r1, r0
 80055c0:	1850      	adds	r0, r2, r1
 80055c2:	4283      	cmp	r3, r0
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	d1e0      	bne.n	800558a <_free_r+0x22>
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	6053      	str	r3, [r2, #4]
 80055ce:	4408      	add	r0, r1
 80055d0:	6010      	str	r0, [r2, #0]
 80055d2:	e7da      	b.n	800558a <_free_r+0x22>
 80055d4:	d902      	bls.n	80055dc <_free_r+0x74>
 80055d6:	230c      	movs	r3, #12
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	e7d6      	b.n	800558a <_free_r+0x22>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428b      	cmp	r3, r1
 80055e2:	bf04      	itt	eq
 80055e4:	6819      	ldreq	r1, [r3, #0]
 80055e6:	685b      	ldreq	r3, [r3, #4]
 80055e8:	6063      	str	r3, [r4, #4]
 80055ea:	bf04      	itt	eq
 80055ec:	1809      	addeq	r1, r1, r0
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	6054      	str	r4, [r2, #4]
 80055f2:	e7ca      	b.n	800558a <_free_r+0x22>
 80055f4:	bd38      	pop	{r3, r4, r5, pc}
 80055f6:	bf00      	nop
 80055f8:	200003d0 	.word	0x200003d0

080055fc <__sfputc_r>:
 80055fc:	6893      	ldr	r3, [r2, #8]
 80055fe:	3b01      	subs	r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	b410      	push	{r4}
 8005604:	6093      	str	r3, [r2, #8]
 8005606:	da08      	bge.n	800561a <__sfputc_r+0x1e>
 8005608:	6994      	ldr	r4, [r2, #24]
 800560a:	42a3      	cmp	r3, r4
 800560c:	db01      	blt.n	8005612 <__sfputc_r+0x16>
 800560e:	290a      	cmp	r1, #10
 8005610:	d103      	bne.n	800561a <__sfputc_r+0x1e>
 8005612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005616:	f000 bac1 	b.w	8005b9c <__swbuf_r>
 800561a:	6813      	ldr	r3, [r2, #0]
 800561c:	1c58      	adds	r0, r3, #1
 800561e:	6010      	str	r0, [r2, #0]
 8005620:	7019      	strb	r1, [r3, #0]
 8005622:	4608      	mov	r0, r1
 8005624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005628:	4770      	bx	lr

0800562a <__sfputs_r>:
 800562a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	4614      	mov	r4, r2
 8005632:	18d5      	adds	r5, r2, r3
 8005634:	42ac      	cmp	r4, r5
 8005636:	d101      	bne.n	800563c <__sfputs_r+0x12>
 8005638:	2000      	movs	r0, #0
 800563a:	e007      	b.n	800564c <__sfputs_r+0x22>
 800563c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005640:	463a      	mov	r2, r7
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff ffda 	bl	80055fc <__sfputc_r>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d1f3      	bne.n	8005634 <__sfputs_r+0xa>
 800564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005650 <_vfiprintf_r>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	460d      	mov	r5, r1
 8005656:	b09d      	sub	sp, #116	@ 0x74
 8005658:	4614      	mov	r4, r2
 800565a:	4698      	mov	r8, r3
 800565c:	4606      	mov	r6, r0
 800565e:	b118      	cbz	r0, 8005668 <_vfiprintf_r+0x18>
 8005660:	6a03      	ldr	r3, [r0, #32]
 8005662:	b90b      	cbnz	r3, 8005668 <_vfiprintf_r+0x18>
 8005664:	f7ff fce0 	bl	8005028 <__sinit>
 8005668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d405      	bmi.n	800567a <_vfiprintf_r+0x2a>
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	059a      	lsls	r2, r3, #22
 8005672:	d402      	bmi.n	800567a <_vfiprintf_r+0x2a>
 8005674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005676:	f7ff fd40 	bl	80050fa <__retarget_lock_acquire_recursive>
 800567a:	89ab      	ldrh	r3, [r5, #12]
 800567c:	071b      	lsls	r3, r3, #28
 800567e:	d501      	bpl.n	8005684 <_vfiprintf_r+0x34>
 8005680:	692b      	ldr	r3, [r5, #16]
 8005682:	b99b      	cbnz	r3, 80056ac <_vfiprintf_r+0x5c>
 8005684:	4629      	mov	r1, r5
 8005686:	4630      	mov	r0, r6
 8005688:	f000 fac6 	bl	8005c18 <__swsetup_r>
 800568c:	b170      	cbz	r0, 80056ac <_vfiprintf_r+0x5c>
 800568e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005690:	07dc      	lsls	r4, r3, #31
 8005692:	d504      	bpl.n	800569e <_vfiprintf_r+0x4e>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005698:	b01d      	add	sp, #116	@ 0x74
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569e:	89ab      	ldrh	r3, [r5, #12]
 80056a0:	0598      	lsls	r0, r3, #22
 80056a2:	d4f7      	bmi.n	8005694 <_vfiprintf_r+0x44>
 80056a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056a6:	f7ff fd29 	bl	80050fc <__retarget_lock_release_recursive>
 80056aa:	e7f3      	b.n	8005694 <_vfiprintf_r+0x44>
 80056ac:	2300      	movs	r3, #0
 80056ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b0:	2320      	movs	r3, #32
 80056b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80056ba:	2330      	movs	r3, #48	@ 0x30
 80056bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800586c <_vfiprintf_r+0x21c>
 80056c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056c4:	f04f 0901 	mov.w	r9, #1
 80056c8:	4623      	mov	r3, r4
 80056ca:	469a      	mov	sl, r3
 80056cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d0:	b10a      	cbz	r2, 80056d6 <_vfiprintf_r+0x86>
 80056d2:	2a25      	cmp	r2, #37	@ 0x25
 80056d4:	d1f9      	bne.n	80056ca <_vfiprintf_r+0x7a>
 80056d6:	ebba 0b04 	subs.w	fp, sl, r4
 80056da:	d00b      	beq.n	80056f4 <_vfiprintf_r+0xa4>
 80056dc:	465b      	mov	r3, fp
 80056de:	4622      	mov	r2, r4
 80056e0:	4629      	mov	r1, r5
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7ff ffa1 	bl	800562a <__sfputs_r>
 80056e8:	3001      	adds	r0, #1
 80056ea:	f000 80a7 	beq.w	800583c <_vfiprintf_r+0x1ec>
 80056ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056f0:	445a      	add	r2, fp
 80056f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80056f4:	f89a 3000 	ldrb.w	r3, [sl]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 809f 	beq.w	800583c <_vfiprintf_r+0x1ec>
 80056fe:	2300      	movs	r3, #0
 8005700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005708:	f10a 0a01 	add.w	sl, sl, #1
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	9307      	str	r3, [sp, #28]
 8005710:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005714:	931a      	str	r3, [sp, #104]	@ 0x68
 8005716:	4654      	mov	r4, sl
 8005718:	2205      	movs	r2, #5
 800571a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571e:	4853      	ldr	r0, [pc, #332]	@ (800586c <_vfiprintf_r+0x21c>)
 8005720:	f7fa fd56 	bl	80001d0 <memchr>
 8005724:	9a04      	ldr	r2, [sp, #16]
 8005726:	b9d8      	cbnz	r0, 8005760 <_vfiprintf_r+0x110>
 8005728:	06d1      	lsls	r1, r2, #27
 800572a:	bf44      	itt	mi
 800572c:	2320      	movmi	r3, #32
 800572e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005732:	0713      	lsls	r3, r2, #28
 8005734:	bf44      	itt	mi
 8005736:	232b      	movmi	r3, #43	@ 0x2b
 8005738:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800573c:	f89a 3000 	ldrb.w	r3, [sl]
 8005740:	2b2a      	cmp	r3, #42	@ 0x2a
 8005742:	d015      	beq.n	8005770 <_vfiprintf_r+0x120>
 8005744:	9a07      	ldr	r2, [sp, #28]
 8005746:	4654      	mov	r4, sl
 8005748:	2000      	movs	r0, #0
 800574a:	f04f 0c0a 	mov.w	ip, #10
 800574e:	4621      	mov	r1, r4
 8005750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005754:	3b30      	subs	r3, #48	@ 0x30
 8005756:	2b09      	cmp	r3, #9
 8005758:	d94b      	bls.n	80057f2 <_vfiprintf_r+0x1a2>
 800575a:	b1b0      	cbz	r0, 800578a <_vfiprintf_r+0x13a>
 800575c:	9207      	str	r2, [sp, #28]
 800575e:	e014      	b.n	800578a <_vfiprintf_r+0x13a>
 8005760:	eba0 0308 	sub.w	r3, r0, r8
 8005764:	fa09 f303 	lsl.w	r3, r9, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	46a2      	mov	sl, r4
 800576e:	e7d2      	b.n	8005716 <_vfiprintf_r+0xc6>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	1d19      	adds	r1, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	9103      	str	r1, [sp, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	bfbb      	ittet	lt
 800577c:	425b      	neglt	r3, r3
 800577e:	f042 0202 	orrlt.w	r2, r2, #2
 8005782:	9307      	strge	r3, [sp, #28]
 8005784:	9307      	strlt	r3, [sp, #28]
 8005786:	bfb8      	it	lt
 8005788:	9204      	strlt	r2, [sp, #16]
 800578a:	7823      	ldrb	r3, [r4, #0]
 800578c:	2b2e      	cmp	r3, #46	@ 0x2e
 800578e:	d10a      	bne.n	80057a6 <_vfiprintf_r+0x156>
 8005790:	7863      	ldrb	r3, [r4, #1]
 8005792:	2b2a      	cmp	r3, #42	@ 0x2a
 8005794:	d132      	bne.n	80057fc <_vfiprintf_r+0x1ac>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	9203      	str	r2, [sp, #12]
 800579e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057a2:	3402      	adds	r4, #2
 80057a4:	9305      	str	r3, [sp, #20]
 80057a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800587c <_vfiprintf_r+0x22c>
 80057aa:	7821      	ldrb	r1, [r4, #0]
 80057ac:	2203      	movs	r2, #3
 80057ae:	4650      	mov	r0, sl
 80057b0:	f7fa fd0e 	bl	80001d0 <memchr>
 80057b4:	b138      	cbz	r0, 80057c6 <_vfiprintf_r+0x176>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	eba0 000a 	sub.w	r0, r0, sl
 80057bc:	2240      	movs	r2, #64	@ 0x40
 80057be:	4082      	lsls	r2, r0
 80057c0:	4313      	orrs	r3, r2
 80057c2:	3401      	adds	r4, #1
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ca:	4829      	ldr	r0, [pc, #164]	@ (8005870 <_vfiprintf_r+0x220>)
 80057cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057d0:	2206      	movs	r2, #6
 80057d2:	f7fa fcfd 	bl	80001d0 <memchr>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d03f      	beq.n	800585a <_vfiprintf_r+0x20a>
 80057da:	4b26      	ldr	r3, [pc, #152]	@ (8005874 <_vfiprintf_r+0x224>)
 80057dc:	bb1b      	cbnz	r3, 8005826 <_vfiprintf_r+0x1d6>
 80057de:	9b03      	ldr	r3, [sp, #12]
 80057e0:	3307      	adds	r3, #7
 80057e2:	f023 0307 	bic.w	r3, r3, #7
 80057e6:	3308      	adds	r3, #8
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ec:	443b      	add	r3, r7
 80057ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f0:	e76a      	b.n	80056c8 <_vfiprintf_r+0x78>
 80057f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f6:	460c      	mov	r4, r1
 80057f8:	2001      	movs	r0, #1
 80057fa:	e7a8      	b.n	800574e <_vfiprintf_r+0xfe>
 80057fc:	2300      	movs	r3, #0
 80057fe:	3401      	adds	r4, #1
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	4619      	mov	r1, r3
 8005804:	f04f 0c0a 	mov.w	ip, #10
 8005808:	4620      	mov	r0, r4
 800580a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800580e:	3a30      	subs	r2, #48	@ 0x30
 8005810:	2a09      	cmp	r2, #9
 8005812:	d903      	bls.n	800581c <_vfiprintf_r+0x1cc>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0c6      	beq.n	80057a6 <_vfiprintf_r+0x156>
 8005818:	9105      	str	r1, [sp, #20]
 800581a:	e7c4      	b.n	80057a6 <_vfiprintf_r+0x156>
 800581c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005820:	4604      	mov	r4, r0
 8005822:	2301      	movs	r3, #1
 8005824:	e7f0      	b.n	8005808 <_vfiprintf_r+0x1b8>
 8005826:	ab03      	add	r3, sp, #12
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	462a      	mov	r2, r5
 800582c:	4b12      	ldr	r3, [pc, #72]	@ (8005878 <_vfiprintf_r+0x228>)
 800582e:	a904      	add	r1, sp, #16
 8005830:	4630      	mov	r0, r6
 8005832:	f3af 8000 	nop.w
 8005836:	4607      	mov	r7, r0
 8005838:	1c78      	adds	r0, r7, #1
 800583a:	d1d6      	bne.n	80057ea <_vfiprintf_r+0x19a>
 800583c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800583e:	07d9      	lsls	r1, r3, #31
 8005840:	d405      	bmi.n	800584e <_vfiprintf_r+0x1fe>
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	059a      	lsls	r2, r3, #22
 8005846:	d402      	bmi.n	800584e <_vfiprintf_r+0x1fe>
 8005848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800584a:	f7ff fc57 	bl	80050fc <__retarget_lock_release_recursive>
 800584e:	89ab      	ldrh	r3, [r5, #12]
 8005850:	065b      	lsls	r3, r3, #25
 8005852:	f53f af1f 	bmi.w	8005694 <_vfiprintf_r+0x44>
 8005856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005858:	e71e      	b.n	8005698 <_vfiprintf_r+0x48>
 800585a:	ab03      	add	r3, sp, #12
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	462a      	mov	r2, r5
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <_vfiprintf_r+0x228>)
 8005862:	a904      	add	r1, sp, #16
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f879 	bl	800595c <_printf_i>
 800586a:	e7e4      	b.n	8005836 <_vfiprintf_r+0x1e6>
 800586c:	08008ecb 	.word	0x08008ecb
 8005870:	08008ed5 	.word	0x08008ed5
 8005874:	00000000 	.word	0x00000000
 8005878:	0800562b 	.word	0x0800562b
 800587c:	08008ed1 	.word	0x08008ed1

08005880 <_printf_common>:
 8005880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005884:	4616      	mov	r6, r2
 8005886:	4698      	mov	r8, r3
 8005888:	688a      	ldr	r2, [r1, #8]
 800588a:	690b      	ldr	r3, [r1, #16]
 800588c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005890:	4293      	cmp	r3, r2
 8005892:	bfb8      	it	lt
 8005894:	4613      	movlt	r3, r2
 8005896:	6033      	str	r3, [r6, #0]
 8005898:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800589c:	4607      	mov	r7, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	b10a      	cbz	r2, 80058a6 <_printf_common+0x26>
 80058a2:	3301      	adds	r3, #1
 80058a4:	6033      	str	r3, [r6, #0]
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	0699      	lsls	r1, r3, #26
 80058aa:	bf42      	ittt	mi
 80058ac:	6833      	ldrmi	r3, [r6, #0]
 80058ae:	3302      	addmi	r3, #2
 80058b0:	6033      	strmi	r3, [r6, #0]
 80058b2:	6825      	ldr	r5, [r4, #0]
 80058b4:	f015 0506 	ands.w	r5, r5, #6
 80058b8:	d106      	bne.n	80058c8 <_printf_common+0x48>
 80058ba:	f104 0a19 	add.w	sl, r4, #25
 80058be:	68e3      	ldr	r3, [r4, #12]
 80058c0:	6832      	ldr	r2, [r6, #0]
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	42ab      	cmp	r3, r5
 80058c6:	dc26      	bgt.n	8005916 <_printf_common+0x96>
 80058c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	3b00      	subs	r3, #0
 80058d0:	bf18      	it	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	0692      	lsls	r2, r2, #26
 80058d6:	d42b      	bmi.n	8005930 <_printf_common+0xb0>
 80058d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058dc:	4641      	mov	r1, r8
 80058de:	4638      	mov	r0, r7
 80058e0:	47c8      	blx	r9
 80058e2:	3001      	adds	r0, #1
 80058e4:	d01e      	beq.n	8005924 <_printf_common+0xa4>
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	6922      	ldr	r2, [r4, #16]
 80058ea:	f003 0306 	and.w	r3, r3, #6
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf02      	ittt	eq
 80058f2:	68e5      	ldreq	r5, [r4, #12]
 80058f4:	6833      	ldreq	r3, [r6, #0]
 80058f6:	1aed      	subeq	r5, r5, r3
 80058f8:	68a3      	ldr	r3, [r4, #8]
 80058fa:	bf0c      	ite	eq
 80058fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005900:	2500      	movne	r5, #0
 8005902:	4293      	cmp	r3, r2
 8005904:	bfc4      	itt	gt
 8005906:	1a9b      	subgt	r3, r3, r2
 8005908:	18ed      	addgt	r5, r5, r3
 800590a:	2600      	movs	r6, #0
 800590c:	341a      	adds	r4, #26
 800590e:	42b5      	cmp	r5, r6
 8005910:	d11a      	bne.n	8005948 <_printf_common+0xc8>
 8005912:	2000      	movs	r0, #0
 8005914:	e008      	b.n	8005928 <_printf_common+0xa8>
 8005916:	2301      	movs	r3, #1
 8005918:	4652      	mov	r2, sl
 800591a:	4641      	mov	r1, r8
 800591c:	4638      	mov	r0, r7
 800591e:	47c8      	blx	r9
 8005920:	3001      	adds	r0, #1
 8005922:	d103      	bne.n	800592c <_printf_common+0xac>
 8005924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800592c:	3501      	adds	r5, #1
 800592e:	e7c6      	b.n	80058be <_printf_common+0x3e>
 8005930:	18e1      	adds	r1, r4, r3
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	2030      	movs	r0, #48	@ 0x30
 8005936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800593a:	4422      	add	r2, r4
 800593c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005940:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005944:	3302      	adds	r3, #2
 8005946:	e7c7      	b.n	80058d8 <_printf_common+0x58>
 8005948:	2301      	movs	r3, #1
 800594a:	4622      	mov	r2, r4
 800594c:	4641      	mov	r1, r8
 800594e:	4638      	mov	r0, r7
 8005950:	47c8      	blx	r9
 8005952:	3001      	adds	r0, #1
 8005954:	d0e6      	beq.n	8005924 <_printf_common+0xa4>
 8005956:	3601      	adds	r6, #1
 8005958:	e7d9      	b.n	800590e <_printf_common+0x8e>
	...

0800595c <_printf_i>:
 800595c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	7e0f      	ldrb	r7, [r1, #24]
 8005962:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005964:	2f78      	cmp	r7, #120	@ 0x78
 8005966:	4691      	mov	r9, r2
 8005968:	4680      	mov	r8, r0
 800596a:	460c      	mov	r4, r1
 800596c:	469a      	mov	sl, r3
 800596e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005972:	d807      	bhi.n	8005984 <_printf_i+0x28>
 8005974:	2f62      	cmp	r7, #98	@ 0x62
 8005976:	d80a      	bhi.n	800598e <_printf_i+0x32>
 8005978:	2f00      	cmp	r7, #0
 800597a:	f000 80d2 	beq.w	8005b22 <_printf_i+0x1c6>
 800597e:	2f58      	cmp	r7, #88	@ 0x58
 8005980:	f000 80b9 	beq.w	8005af6 <_printf_i+0x19a>
 8005984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800598c:	e03a      	b.n	8005a04 <_printf_i+0xa8>
 800598e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005992:	2b15      	cmp	r3, #21
 8005994:	d8f6      	bhi.n	8005984 <_printf_i+0x28>
 8005996:	a101      	add	r1, pc, #4	@ (adr r1, 800599c <_printf_i+0x40>)
 8005998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800599c:	080059f5 	.word	0x080059f5
 80059a0:	08005a09 	.word	0x08005a09
 80059a4:	08005985 	.word	0x08005985
 80059a8:	08005985 	.word	0x08005985
 80059ac:	08005985 	.word	0x08005985
 80059b0:	08005985 	.word	0x08005985
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005985 	.word	0x08005985
 80059bc:	08005985 	.word	0x08005985
 80059c0:	08005985 	.word	0x08005985
 80059c4:	08005985 	.word	0x08005985
 80059c8:	08005b09 	.word	0x08005b09
 80059cc:	08005a33 	.word	0x08005a33
 80059d0:	08005ac3 	.word	0x08005ac3
 80059d4:	08005985 	.word	0x08005985
 80059d8:	08005985 	.word	0x08005985
 80059dc:	08005b2b 	.word	0x08005b2b
 80059e0:	08005985 	.word	0x08005985
 80059e4:	08005a33 	.word	0x08005a33
 80059e8:	08005985 	.word	0x08005985
 80059ec:	08005985 	.word	0x08005985
 80059f0:	08005acb 	.word	0x08005acb
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	1d1a      	adds	r2, r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6032      	str	r2, [r6, #0]
 80059fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a04:	2301      	movs	r3, #1
 8005a06:	e09d      	b.n	8005b44 <_printf_i+0x1e8>
 8005a08:	6833      	ldr	r3, [r6, #0]
 8005a0a:	6820      	ldr	r0, [r4, #0]
 8005a0c:	1d19      	adds	r1, r3, #4
 8005a0e:	6031      	str	r1, [r6, #0]
 8005a10:	0606      	lsls	r6, r0, #24
 8005a12:	d501      	bpl.n	8005a18 <_printf_i+0xbc>
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	e003      	b.n	8005a20 <_printf_i+0xc4>
 8005a18:	0645      	lsls	r5, r0, #25
 8005a1a:	d5fb      	bpl.n	8005a14 <_printf_i+0xb8>
 8005a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a20:	2d00      	cmp	r5, #0
 8005a22:	da03      	bge.n	8005a2c <_printf_i+0xd0>
 8005a24:	232d      	movs	r3, #45	@ 0x2d
 8005a26:	426d      	negs	r5, r5
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a2c:	4859      	ldr	r0, [pc, #356]	@ (8005b94 <_printf_i+0x238>)
 8005a2e:	230a      	movs	r3, #10
 8005a30:	e011      	b.n	8005a56 <_printf_i+0xfa>
 8005a32:	6821      	ldr	r1, [r4, #0]
 8005a34:	6833      	ldr	r3, [r6, #0]
 8005a36:	0608      	lsls	r0, r1, #24
 8005a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a3c:	d402      	bmi.n	8005a44 <_printf_i+0xe8>
 8005a3e:	0649      	lsls	r1, r1, #25
 8005a40:	bf48      	it	mi
 8005a42:	b2ad      	uxthmi	r5, r5
 8005a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a46:	4853      	ldr	r0, [pc, #332]	@ (8005b94 <_printf_i+0x238>)
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	bf14      	ite	ne
 8005a4c:	230a      	movne	r3, #10
 8005a4e:	2308      	moveq	r3, #8
 8005a50:	2100      	movs	r1, #0
 8005a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a56:	6866      	ldr	r6, [r4, #4]
 8005a58:	60a6      	str	r6, [r4, #8]
 8005a5a:	2e00      	cmp	r6, #0
 8005a5c:	bfa2      	ittt	ge
 8005a5e:	6821      	ldrge	r1, [r4, #0]
 8005a60:	f021 0104 	bicge.w	r1, r1, #4
 8005a64:	6021      	strge	r1, [r4, #0]
 8005a66:	b90d      	cbnz	r5, 8005a6c <_printf_i+0x110>
 8005a68:	2e00      	cmp	r6, #0
 8005a6a:	d04b      	beq.n	8005b04 <_printf_i+0x1a8>
 8005a6c:	4616      	mov	r6, r2
 8005a6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a72:	fb03 5711 	mls	r7, r3, r1, r5
 8005a76:	5dc7      	ldrb	r7, [r0, r7]
 8005a78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a7c:	462f      	mov	r7, r5
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	460d      	mov	r5, r1
 8005a82:	d9f4      	bls.n	8005a6e <_printf_i+0x112>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d10b      	bne.n	8005aa0 <_printf_i+0x144>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	07df      	lsls	r7, r3, #31
 8005a8c:	d508      	bpl.n	8005aa0 <_printf_i+0x144>
 8005a8e:	6923      	ldr	r3, [r4, #16]
 8005a90:	6861      	ldr	r1, [r4, #4]
 8005a92:	4299      	cmp	r1, r3
 8005a94:	bfde      	ittt	le
 8005a96:	2330      	movle	r3, #48	@ 0x30
 8005a98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a9c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005aa0:	1b92      	subs	r2, r2, r6
 8005aa2:	6122      	str	r2, [r4, #16]
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	aa03      	add	r2, sp, #12
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff fee6 	bl	8005880 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d14a      	bne.n	8005b4e <_printf_i+0x1f2>
 8005ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005abc:	b004      	add	sp, #16
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	f043 0320 	orr.w	r3, r3, #32
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	4833      	ldr	r0, [pc, #204]	@ (8005b98 <_printf_i+0x23c>)
 8005acc:	2778      	movs	r7, #120	@ 0x78
 8005ace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	6831      	ldr	r1, [r6, #0]
 8005ad6:	061f      	lsls	r7, r3, #24
 8005ad8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005adc:	d402      	bmi.n	8005ae4 <_printf_i+0x188>
 8005ade:	065f      	lsls	r7, r3, #25
 8005ae0:	bf48      	it	mi
 8005ae2:	b2ad      	uxthmi	r5, r5
 8005ae4:	6031      	str	r1, [r6, #0]
 8005ae6:	07d9      	lsls	r1, r3, #31
 8005ae8:	bf44      	itt	mi
 8005aea:	f043 0320 	orrmi.w	r3, r3, #32
 8005aee:	6023      	strmi	r3, [r4, #0]
 8005af0:	b11d      	cbz	r5, 8005afa <_printf_i+0x19e>
 8005af2:	2310      	movs	r3, #16
 8005af4:	e7ac      	b.n	8005a50 <_printf_i+0xf4>
 8005af6:	4827      	ldr	r0, [pc, #156]	@ (8005b94 <_printf_i+0x238>)
 8005af8:	e7e9      	b.n	8005ace <_printf_i+0x172>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f023 0320 	bic.w	r3, r3, #32
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	e7f6      	b.n	8005af2 <_printf_i+0x196>
 8005b04:	4616      	mov	r6, r2
 8005b06:	e7bd      	b.n	8005a84 <_printf_i+0x128>
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	6825      	ldr	r5, [r4, #0]
 8005b0c:	6961      	ldr	r1, [r4, #20]
 8005b0e:	1d18      	adds	r0, r3, #4
 8005b10:	6030      	str	r0, [r6, #0]
 8005b12:	062e      	lsls	r6, r5, #24
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	d501      	bpl.n	8005b1c <_printf_i+0x1c0>
 8005b18:	6019      	str	r1, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <_printf_i+0x1c6>
 8005b1c:	0668      	lsls	r0, r5, #25
 8005b1e:	d5fb      	bpl.n	8005b18 <_printf_i+0x1bc>
 8005b20:	8019      	strh	r1, [r3, #0]
 8005b22:	2300      	movs	r3, #0
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	4616      	mov	r6, r2
 8005b28:	e7bc      	b.n	8005aa4 <_printf_i+0x148>
 8005b2a:	6833      	ldr	r3, [r6, #0]
 8005b2c:	1d1a      	adds	r2, r3, #4
 8005b2e:	6032      	str	r2, [r6, #0]
 8005b30:	681e      	ldr	r6, [r3, #0]
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	2100      	movs	r1, #0
 8005b36:	4630      	mov	r0, r6
 8005b38:	f7fa fb4a 	bl	80001d0 <memchr>
 8005b3c:	b108      	cbz	r0, 8005b42 <_printf_i+0x1e6>
 8005b3e:	1b80      	subs	r0, r0, r6
 8005b40:	6060      	str	r0, [r4, #4]
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	2300      	movs	r3, #0
 8005b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b4c:	e7aa      	b.n	8005aa4 <_printf_i+0x148>
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	4632      	mov	r2, r6
 8005b52:	4649      	mov	r1, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	47d0      	blx	sl
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d0ad      	beq.n	8005ab8 <_printf_i+0x15c>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	079b      	lsls	r3, r3, #30
 8005b60:	d413      	bmi.n	8005b8a <_printf_i+0x22e>
 8005b62:	68e0      	ldr	r0, [r4, #12]
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	4298      	cmp	r0, r3
 8005b68:	bfb8      	it	lt
 8005b6a:	4618      	movlt	r0, r3
 8005b6c:	e7a6      	b.n	8005abc <_printf_i+0x160>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4632      	mov	r2, r6
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	47d0      	blx	sl
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d09d      	beq.n	8005ab8 <_printf_i+0x15c>
 8005b7c:	3501      	adds	r5, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	9903      	ldr	r1, [sp, #12]
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	42ab      	cmp	r3, r5
 8005b86:	dcf2      	bgt.n	8005b6e <_printf_i+0x212>
 8005b88:	e7eb      	b.n	8005b62 <_printf_i+0x206>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	f104 0619 	add.w	r6, r4, #25
 8005b90:	e7f5      	b.n	8005b7e <_printf_i+0x222>
 8005b92:	bf00      	nop
 8005b94:	08008edc 	.word	0x08008edc
 8005b98:	08008eed 	.word	0x08008eed

08005b9c <__swbuf_r>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	460e      	mov	r6, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	b118      	cbz	r0, 8005bae <__swbuf_r+0x12>
 8005ba6:	6a03      	ldr	r3, [r0, #32]
 8005ba8:	b90b      	cbnz	r3, 8005bae <__swbuf_r+0x12>
 8005baa:	f7ff fa3d 	bl	8005028 <__sinit>
 8005bae:	69a3      	ldr	r3, [r4, #24]
 8005bb0:	60a3      	str	r3, [r4, #8]
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	071a      	lsls	r2, r3, #28
 8005bb6:	d501      	bpl.n	8005bbc <__swbuf_r+0x20>
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	b943      	cbnz	r3, 8005bce <__swbuf_r+0x32>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 f82a 	bl	8005c18 <__swsetup_r>
 8005bc4:	b118      	cbz	r0, 8005bce <__swbuf_r+0x32>
 8005bc6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005bca:	4638      	mov	r0, r7
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	1a98      	subs	r0, r3, r2
 8005bd4:	6963      	ldr	r3, [r4, #20]
 8005bd6:	b2f6      	uxtb	r6, r6
 8005bd8:	4283      	cmp	r3, r0
 8005bda:	4637      	mov	r7, r6
 8005bdc:	dc05      	bgt.n	8005bea <__swbuf_r+0x4e>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f7ff fbd9 	bl	8005398 <_fflush_r>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d1ed      	bne.n	8005bc6 <__swbuf_r+0x2a>
 8005bea:	68a3      	ldr	r3, [r4, #8]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	60a3      	str	r3, [r4, #8]
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	6022      	str	r2, [r4, #0]
 8005bf6:	701e      	strb	r6, [r3, #0]
 8005bf8:	6962      	ldr	r2, [r4, #20]
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d004      	beq.n	8005c0a <__swbuf_r+0x6e>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	07db      	lsls	r3, r3, #31
 8005c04:	d5e1      	bpl.n	8005bca <__swbuf_r+0x2e>
 8005c06:	2e0a      	cmp	r6, #10
 8005c08:	d1df      	bne.n	8005bca <__swbuf_r+0x2e>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f7ff fbc3 	bl	8005398 <_fflush_r>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d0d9      	beq.n	8005bca <__swbuf_r+0x2e>
 8005c16:	e7d6      	b.n	8005bc6 <__swbuf_r+0x2a>

08005c18 <__swsetup_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4b29      	ldr	r3, [pc, #164]	@ (8005cc0 <__swsetup_r+0xa8>)
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	460c      	mov	r4, r1
 8005c22:	b118      	cbz	r0, 8005c2c <__swsetup_r+0x14>
 8005c24:	6a03      	ldr	r3, [r0, #32]
 8005c26:	b90b      	cbnz	r3, 8005c2c <__swsetup_r+0x14>
 8005c28:	f7ff f9fe 	bl	8005028 <__sinit>
 8005c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c30:	0719      	lsls	r1, r3, #28
 8005c32:	d422      	bmi.n	8005c7a <__swsetup_r+0x62>
 8005c34:	06da      	lsls	r2, r3, #27
 8005c36:	d407      	bmi.n	8005c48 <__swsetup_r+0x30>
 8005c38:	2209      	movs	r2, #9
 8005c3a:	602a      	str	r2, [r5, #0]
 8005c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c40:	81a3      	strh	r3, [r4, #12]
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c46:	e033      	b.n	8005cb0 <__swsetup_r+0x98>
 8005c48:	0758      	lsls	r0, r3, #29
 8005c4a:	d512      	bpl.n	8005c72 <__swsetup_r+0x5a>
 8005c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c4e:	b141      	cbz	r1, 8005c62 <__swsetup_r+0x4a>
 8005c50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c54:	4299      	cmp	r1, r3
 8005c56:	d002      	beq.n	8005c5e <__swsetup_r+0x46>
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7ff fc85 	bl	8005568 <_free_r>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c68:	81a3      	strh	r3, [r4, #12]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6063      	str	r3, [r4, #4]
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f043 0308 	orr.w	r3, r3, #8
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	b94b      	cbnz	r3, 8005c92 <__swsetup_r+0x7a>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c88:	d003      	beq.n	8005c92 <__swsetup_r+0x7a>
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 f83f 	bl	8005d10 <__smakebuf_r>
 8005c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c96:	f013 0201 	ands.w	r2, r3, #1
 8005c9a:	d00a      	beq.n	8005cb2 <__swsetup_r+0x9a>
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	60a2      	str	r2, [r4, #8]
 8005ca0:	6962      	ldr	r2, [r4, #20]
 8005ca2:	4252      	negs	r2, r2
 8005ca4:	61a2      	str	r2, [r4, #24]
 8005ca6:	6922      	ldr	r2, [r4, #16]
 8005ca8:	b942      	cbnz	r2, 8005cbc <__swsetup_r+0xa4>
 8005caa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cae:	d1c5      	bne.n	8005c3c <__swsetup_r+0x24>
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	0799      	lsls	r1, r3, #30
 8005cb4:	bf58      	it	pl
 8005cb6:	6962      	ldrpl	r2, [r4, #20]
 8005cb8:	60a2      	str	r2, [r4, #8]
 8005cba:	e7f4      	b.n	8005ca6 <__swsetup_r+0x8e>
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e7f7      	b.n	8005cb0 <__swsetup_r+0x98>
 8005cc0:	2000002c 	.word	0x2000002c

08005cc4 <__swhatbuf_r>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	b096      	sub	sp, #88	@ 0x58
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	461e      	mov	r6, r3
 8005cd4:	da0d      	bge.n	8005cf2 <__swhatbuf_r+0x2e>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005cdc:	f04f 0100 	mov.w	r1, #0
 8005ce0:	bf14      	ite	ne
 8005ce2:	2340      	movne	r3, #64	@ 0x40
 8005ce4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ce8:	2000      	movs	r0, #0
 8005cea:	6031      	str	r1, [r6, #0]
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	b016      	add	sp, #88	@ 0x58
 8005cf0:	bd70      	pop	{r4, r5, r6, pc}
 8005cf2:	466a      	mov	r2, sp
 8005cf4:	f000 f848 	bl	8005d88 <_fstat_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	dbec      	blt.n	8005cd6 <__swhatbuf_r+0x12>
 8005cfc:	9901      	ldr	r1, [sp, #4]
 8005cfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d06:	4259      	negs	r1, r3
 8005d08:	4159      	adcs	r1, r3
 8005d0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d0e:	e7eb      	b.n	8005ce8 <__swhatbuf_r+0x24>

08005d10 <__smakebuf_r>:
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d14:	079d      	lsls	r5, r3, #30
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	d507      	bpl.n	8005d2c <__smakebuf_r+0x1c>
 8005d1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	b003      	add	sp, #12
 8005d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d2c:	ab01      	add	r3, sp, #4
 8005d2e:	466a      	mov	r2, sp
 8005d30:	f7ff ffc8 	bl	8005cc4 <__swhatbuf_r>
 8005d34:	9f00      	ldr	r7, [sp, #0]
 8005d36:	4605      	mov	r5, r0
 8005d38:	4639      	mov	r1, r7
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff fa28 	bl	8005190 <_malloc_r>
 8005d40:	b948      	cbnz	r0, 8005d56 <__smakebuf_r+0x46>
 8005d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d46:	059a      	lsls	r2, r3, #22
 8005d48:	d4ee      	bmi.n	8005d28 <__smakebuf_r+0x18>
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	f043 0302 	orr.w	r3, r3, #2
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	e7e2      	b.n	8005d1c <__smakebuf_r+0xc>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	6020      	str	r0, [r4, #0]
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	9b01      	ldr	r3, [sp, #4]
 8005d62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d66:	b15b      	cbz	r3, 8005d80 <__smakebuf_r+0x70>
 8005d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 f81d 	bl	8005dac <_isatty_r>
 8005d72:	b128      	cbz	r0, 8005d80 <__smakebuf_r+0x70>
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	431d      	orrs	r5, r3
 8005d84:	81a5      	strh	r5, [r4, #12]
 8005d86:	e7cf      	b.n	8005d28 <__smakebuf_r+0x18>

08005d88 <_fstat_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d07      	ldr	r5, [pc, #28]	@ (8005da8 <_fstat_r+0x20>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	f7fc fbeb 	bl	8002570 <_fstat>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	d102      	bne.n	8005da4 <_fstat_r+0x1c>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	b103      	cbz	r3, 8005da4 <_fstat_r+0x1c>
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	bf00      	nop
 8005da8:	200003d4 	.word	0x200003d4

08005dac <_isatty_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	@ (8005dc8 <_isatty_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fc fbea 	bl	8002590 <_isatty>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_isatty_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_isatty_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	200003d4 	.word	0x200003d4

08005dcc <_raise_r>:
 8005dcc:	291f      	cmp	r1, #31
 8005dce:	b538      	push	{r3, r4, r5, lr}
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	d904      	bls.n	8005de0 <_raise_r+0x14>
 8005dd6:	2316      	movs	r3, #22
 8005dd8:	6003      	str	r3, [r0, #0]
 8005dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005de2:	b112      	cbz	r2, 8005dea <_raise_r+0x1e>
 8005de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005de8:	b94b      	cbnz	r3, 8005dfe <_raise_r+0x32>
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 f830 	bl	8005e50 <_getpid_r>
 8005df0:	4622      	mov	r2, r4
 8005df2:	4601      	mov	r1, r0
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dfa:	f000 b817 	b.w	8005e2c <_kill_r>
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d00a      	beq.n	8005e18 <_raise_r+0x4c>
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	d103      	bne.n	8005e0e <_raise_r+0x42>
 8005e06:	2316      	movs	r3, #22
 8005e08:	6003      	str	r3, [r0, #0]
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	e7e7      	b.n	8005dde <_raise_r+0x12>
 8005e0e:	2100      	movs	r1, #0
 8005e10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e14:	4620      	mov	r0, r4
 8005e16:	4798      	blx	r3
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e7e0      	b.n	8005dde <_raise_r+0x12>

08005e1c <raise>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	@ (8005e28 <raise+0xc>)
 8005e1e:	4601      	mov	r1, r0
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	f7ff bfd3 	b.w	8005dcc <_raise_r>
 8005e26:	bf00      	nop
 8005e28:	2000002c 	.word	0x2000002c

08005e2c <_kill_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4d07      	ldr	r5, [pc, #28]	@ (8005e4c <_kill_r+0x20>)
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	f7fc fb39 	bl	80024b0 <_kill>
 8005e3e:	1c43      	adds	r3, r0, #1
 8005e40:	d102      	bne.n	8005e48 <_kill_r+0x1c>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	b103      	cbz	r3, 8005e48 <_kill_r+0x1c>
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	bd38      	pop	{r3, r4, r5, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200003d4 	.word	0x200003d4

08005e50 <_getpid_r>:
 8005e50:	f7fc bb26 	b.w	80024a0 <_getpid>

08005e54 <_init>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr

08005e60 <_fini>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	bf00      	nop
 8005e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e66:	bc08      	pop	{r3}
 8005e68:	469e      	mov	lr, r3
 8005e6a:	4770      	bx	lr
