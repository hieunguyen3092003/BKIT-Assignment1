
Assignment1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000665c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000318c  080067ec  080067ec  000077ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009978  08009978  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009978  08009978  0000a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009980  08009980  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009980  08009980  0000a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009984  08009984  0000a984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009988  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          000003f4  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000470  20000470  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f970  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fec  00000000  00000000  0001aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  0001da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c3a  00000000  00000000  0001ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d60  00000000  00000000  0001f65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d54  00000000  00000000  000433ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d036e  00000000  00000000  0005710e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012747c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a6c  00000000  00000000  001274c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012bf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067d4 	.word	0x080067d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080067d4 	.word	0x080067d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <button_init+0x14>)
 800056a:	f003 f96f 	bl	800384c <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00

08000578 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	482f      	ldr	r0, [pc, #188]	@ (8000640 <button_scan+0xc8>)
 8000584:	f003 f962 	bl	800384c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	482c      	ldr	r0, [pc, #176]	@ (8000640 <button_scan+0xc8>)
 800058e:	f003 f95d 	bl	800384c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000592:	230a      	movs	r3, #10
 8000594:	2202      	movs	r2, #2
 8000596:	492b      	ldr	r1, [pc, #172]	@ (8000644 <button_scan+0xcc>)
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <button_scan+0xd0>)
 800059a:	f003 ffb4 	bl	8004506 <HAL_SPI_Receive>

	int button_index = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	e03f      	b.n	800062e <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db06      	blt.n	80005c2 <button_scan+0x4a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dc03      	bgt.n	80005c2 <button_scan+0x4a>
			button_index = i + 4;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e018      	b.n	80005f4 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dd07      	ble.n	80005d8 <button_scan+0x60>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dc04      	bgt.n	80005d8 <button_scan+0x60>
			button_index = 7 - i;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f1c3 0307 	rsb	r3, r3, #7
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00d      	b.n	80005f4 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dd06      	ble.n	80005ec <button_scan+0x74>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	dc03      	bgt.n	80005ec <button_scan+0x74>
			button_index = i + 4;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3304      	adds	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e003      	b.n	80005f4 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1c3 0317 	rsb	r3, r3, #23
 80005f2:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <button_scan+0xcc>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	897b      	ldrh	r3, [r7, #10]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <button_scan+0x96>
			button_count[button_index] = 0;
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <button_scan+0xd4>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2100      	movs	r1, #0
 8000608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060c:	e009      	b.n	8000622 <button_scan+0xaa>
		else
			button_count[button_index]++;
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <button_scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	3301      	adds	r3, #1
 8000618:	b299      	uxth	r1, r3
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <button_scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	ddbc      	ble.n	80005ae <button_scan+0x36>
	}
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	200000b8 	.word	0x200000b8
 8000648:	20000234 	.word	0x20000234
 800064c:	20000098 	.word	0x20000098

08000650 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	@ 0x38
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800066a:	463b      	mov	r3, r7
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800067c:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <MX_FSMC_Init+0xec>)
 800067e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000682:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000684:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_FSMC_Init+0xec>)
 8000686:	4a2e      	ldr	r2, [pc, #184]	@ (8000740 <MX_FSMC_Init+0xf0>)
 8000688:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_FSMC_Init+0xec>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_FSMC_Init+0xec>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_FSMC_Init+0xec>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_FSMC_Init+0xec>)
 800069e:	2210      	movs	r2, #16
 80006a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_FSMC_Init+0xec>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_FSMC_Init+0xec>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <MX_FSMC_Init+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_FSMC_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_FSMC_Init+0xec>)
 80006bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_FSMC_Init+0xec>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006c8:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_FSMC_Init+0xec>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_FSMC_Init+0xec>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_FSMC_Init+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006dc:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_FSMC_Init+0xec>)
 80006de:	2200      	movs	r2, #0
 80006e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006e2:	230f      	movs	r3, #15
 80006e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006e6:	230f      	movs	r3, #15
 80006e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006ea:	233c      	movs	r3, #60	@ 0x3c
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80006f2:	2310      	movs	r3, #16
 80006f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80006f6:	2311      	movs	r3, #17
 80006f8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80006fa:	2300      	movs	r3, #0
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80006fe:	2308      	movs	r3, #8
 8000700:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000702:	230f      	movs	r3, #15
 8000704:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000706:	2309      	movs	r3, #9
 8000708:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800070e:	2310      	movs	r3, #16
 8000710:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000712:	2311      	movs	r3, #17
 8000714:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800071a:	463a      	mov	r2, r7
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	@ (800073c <MX_FSMC_Init+0xec>)
 8000724:	f004 fad2 	bl	8004ccc <HAL_SRAM_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800072e:	f001 f8d5 	bl	80018dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000732:	bf00      	nop
 8000734:	3738      	adds	r7, #56	@ 0x38
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000bc 	.word	0x200000bc
 8000740:	a0000104 	.word	0xa0000104

08000744 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <HAL_FSMC_MspInit+0x88>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d131      	bne.n	80007c4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <HAL_FSMC_MspInit+0x88>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <HAL_FSMC_MspInit+0x8c>)
 800076c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <HAL_FSMC_MspInit+0x8c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6393      	str	r3, [r2, #56]	@ 0x38
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <HAL_FSMC_MspInit+0x8c>)
 8000778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000782:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000786:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000794:	230c      	movs	r3, #12
 8000796:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <HAL_FSMC_MspInit+0x90>)
 800079e:	f002 feb9 	bl	8003514 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007a2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80007a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007b4:	230c      	movs	r3, #12
 80007b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <HAL_FSMC_MspInit+0x94>)
 80007be:	f002 fea9 	bl	8003514 <HAL_GPIO_Init>
 80007c2:	e000      	b.n	80007c6 <HAL_FSMC_MspInit+0x82>
    return;
 80007c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000010c 	.word	0x2000010c
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40020c00 	.word	0x40020c00

080007dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007e4:	f7ff ffae 	bl	8000744 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a6e      	ldr	r2, [pc, #440]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b6c      	ldr	r3, [pc, #432]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b68      	ldr	r3, [pc, #416]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a67      	ldr	r2, [pc, #412]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b65      	ldr	r3, [pc, #404]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b61      	ldr	r3, [pc, #388]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a60      	ldr	r2, [pc, #384]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b5e      	ldr	r3, [pc, #376]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b5a      	ldr	r3, [pc, #360]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a59      	ldr	r2, [pc, #356]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b57      	ldr	r3, [pc, #348]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b53      	ldr	r3, [pc, #332]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a52      	ldr	r2, [pc, #328]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000880:	f043 0308 	orr.w	r3, r3, #8
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b4c      	ldr	r3, [pc, #304]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a4b      	ldr	r2, [pc, #300]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b49      	ldr	r3, [pc, #292]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b45      	ldr	r3, [pc, #276]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a44      	ldr	r2, [pc, #272]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b42      	ldr	r3, [pc, #264]	@ (80009c8 <MX_GPIO_Init+0x1d8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2170      	movs	r1, #112	@ 0x70
 80008ce:	483f      	ldr	r0, [pc, #252]	@ (80009cc <MX_GPIO_Init+0x1dc>)
 80008d0:	f002 ffbc 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	483d      	ldr	r0, [pc, #244]	@ (80009d0 <MX_GPIO_Init+0x1e0>)
 80008dc:	f002 ffb6 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	483b      	ldr	r0, [pc, #236]	@ (80009d4 <MX_GPIO_Init+0x1e4>)
 80008e6:	f002 ffb1 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f0:	4839      	ldr	r0, [pc, #228]	@ (80009d8 <MX_GPIO_Init+0x1e8>)
 80008f2:	f002 ffab 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4838      	ldr	r0, [pc, #224]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 80008fc:	f002 ffa6 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000900:	2370      	movs	r3, #112	@ 0x70
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	482d      	ldr	r0, [pc, #180]	@ (80009cc <MX_GPIO_Init+0x1dc>)
 8000918:	f002 fdfc 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4826      	ldr	r0, [pc, #152]	@ (80009d0 <MX_GPIO_Init+0x1e0>)
 8000936:	f002 fded 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800093a:	23c0      	movs	r3, #192	@ 0xc0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4822      	ldr	r0, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0x1e8>)
 800094e:	f002 fde1 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000952:	2330      	movs	r3, #48	@ 0x30
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	@ (80009d0 <MX_GPIO_Init+0x1e0>)
 8000966:	f002 fdd5 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4814      	ldr	r0, [pc, #80]	@ (80009d4 <MX_GPIO_Init+0x1e4>)
 8000982:	f002 fdc7 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <MX_GPIO_Init+0x1e8>)
 80009a0:	f002 fdb8 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009a4:	2308      	movs	r3, #8
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 80009bc:	f002 fdaa 	bl	8003514 <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3730      	adds	r7, #48	@ 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40021800 	.word	0x40021800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <LCD_WR_REG+0x1c>)
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	8013      	strh	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	600ffffe 	.word	0x600ffffe

08000a00 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <LCD_WR_DATA+0x1c>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	8053      	strh	r3, [r2, #2]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	600ffffe 	.word	0x600ffffe

08000a20 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <LCD_RD_DATA+0x20>)
 8000a28:	885b      	ldrh	r3, [r3, #2]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	b29b      	uxth	r3, r3
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	600ffffe 	.word	0x600ffffe

08000a44 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	4603      	mov	r3, r0
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8000a62:	202a      	movs	r0, #42	@ 0x2a
 8000a64:	f7ff ffbc 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ffc6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ffc0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	0a1b      	lsrs	r3, r3, #8
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ffba 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8000a8c:	887b      	ldrh	r3, [r7, #2]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffb4 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000a98:	202b      	movs	r0, #43	@ 0x2b
 8000a9a:	f7ff ffa1 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ffab 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffa5 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8000ab6:	883b      	ldrh	r3, [r7, #0]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff9f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000ac2:	883b      	ldrh	r3, [r7, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff99 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000ace:	202c      	movs	r0, #44	@ 0x2c
 8000ad0:	f7ff ff86 	bl	80009e0 <LCD_WR_REG>
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd90      	pop	{r4, r7, pc}

08000adc <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <lcd_clear+0x60>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <lcd_clear+0x60>)
 8000af0:	885b      	ldrh	r3, [r3, #2]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ffa3 	bl	8000a44 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	81fb      	strh	r3, [r7, #14]
 8000b02:	e011      	b.n	8000b28 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	81bb      	strh	r3, [r7, #12]
 8000b08:	e006      	b.n	8000b18 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff77 	bl	8000a00 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000b12:	89bb      	ldrh	r3, [r7, #12]
 8000b14:	3301      	adds	r3, #1
 8000b16:	81bb      	strh	r3, [r7, #12]
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <lcd_clear+0x60>)
 8000b1a:	885b      	ldrh	r3, [r3, #2]
 8000b1c:	89ba      	ldrh	r2, [r7, #12]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3f3      	bcc.n	8000b0a <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	81fb      	strh	r3, [r7, #14]
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <lcd_clear+0x60>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	89fa      	ldrh	r2, [r7, #14]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3e8      	bcc.n	8000b04 <lcd_clear+0x28>
		}
	}
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000110 	.word	0x20000110

08000b40 <lcd_fill>:
 * @param  yend	End row
 * @param  color Color to fill
 * @retval None
 */
void lcd_fill(uint16_t xsta, uint16_t ysta, uint16_t xend, uint16_t yend,
		uint16_t color) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4604      	mov	r4, r0
 8000b48:	4608      	mov	r0, r1
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4623      	mov	r3, r4
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	4603      	mov	r3, r0
 8000b54:	80bb      	strh	r3, [r7, #4]
 8000b56:	460b      	mov	r3, r1
 8000b58:	807b      	strh	r3, [r7, #2]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	lcd_set_address(xsta, ysta, xend - 1, yend - 1);
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	883b      	ldrh	r3, [r7, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	88b9      	ldrh	r1, [r7, #4]
 8000b6c:	88f8      	ldrh	r0, [r7, #6]
 8000b6e:	f7ff ff69 	bl	8000a44 <lcd_set_address>
	for (i = ysta; i < yend; i++) {
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	e010      	b.n	8000b9a <lcd_fill+0x5a>
		for (j = xsta; j < xend; j++) {
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	81bb      	strh	r3, [r7, #12]
 8000b7c:	e006      	b.n	8000b8c <lcd_fill+0x4c>
			LCD_WR_DATA(color);
 8000b7e:	8c3b      	ldrh	r3, [r7, #32]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff3d 	bl	8000a00 <LCD_WR_DATA>
		for (j = xsta; j < xend; j++) {
 8000b86:	89bb      	ldrh	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	81bb      	strh	r3, [r7, #12]
 8000b8c:	89ba      	ldrh	r2, [r7, #12]
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3f4      	bcc.n	8000b7e <lcd_fill+0x3e>
	for (i = ysta; i < yend; i++) {
 8000b94:	89fb      	ldrh	r3, [r7, #14]
 8000b96:	3301      	adds	r3, #1
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	89fa      	ldrh	r2, [r7, #14]
 8000b9c:	883b      	ldrh	r3, [r7, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d3ea      	bcc.n	8000b78 <lcd_fill+0x38>
		}
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}

08000bac <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	80bb      	strh	r3, [r7, #4]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	88b9      	ldrh	r1, [r7, #4]
 8000bc4:	88f8      	ldrh	r0, [r7, #6]
 8000bc6:	f7ff ff3d 	bl	8000a44 <lcd_set_address>
	LCD_WR_DATA(color);
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff17 	bl	8000a00 <LCD_WR_DATA>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <lcd_draw_line>:
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color)
{
 8000bda:	b590      	push	{r4, r7, lr}
 8000bdc:	b08d      	sub	sp, #52	@ 0x34
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4604      	mov	r4, r0
 8000be2:	4608      	mov	r0, r1
 8000be4:	4611      	mov	r1, r2
 8000be6:	461a      	mov	r2, r3
 8000be8:	4623      	mov	r3, r4
 8000bea:	80fb      	strh	r3, [r7, #6]
 8000bec:	4603      	mov	r3, r0
 8000bee:	80bb      	strh	r3, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8000c08:	883a      	ldrh	r2, [r7, #0]
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	dd02      	ble.n	8000c24 <lcd_draw_line+0x4a>
		incx = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e00b      	b.n	8000c3c <lcd_draw_line+0x62>
	else if (delta_x == 0)
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <lcd_draw_line+0x56>
		incx = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	e005      	b.n	8000c3c <lcd_draw_line+0x62>
	else {
		incx = -1;
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c34:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	425b      	negs	r3, r3
 8000c3a:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dd02      	ble.n	8000c48 <lcd_draw_line+0x6e>
		incy = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e00b      	b.n	8000c60 <lcd_draw_line+0x86>
	else if (delta_y == 0)
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <lcd_draw_line+0x7a>
		incy = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	e005      	b.n	8000c60 <lcd_draw_line+0x86>
	else {
		incy = -1;
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c58:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8000c60:	6a3a      	ldr	r2, [r7, #32]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dd02      	ble.n	8000c6e <lcd_draw_line+0x94>
		distance = delta_x;
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	e001      	b.n	8000c72 <lcd_draw_line+0x98>
	else
		distance = delta_y;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++) {
 8000c72:	2300      	movs	r3, #0
 8000c74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000c76:	e02b      	b.n	8000cd0 <lcd_draw_line+0xf6>
		lcd_draw_point(uRow, uCol, color);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	b291      	uxth	r1, r2
 8000c80:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff91 	bl	8000bac <lcd_draw_point>
		xerr += delta_x;
 8000c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	4413      	add	r3, r2
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 8000c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	4413      	add	r3, r2
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance) {
 8000c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dd07      	ble.n	8000cb2 <lcd_draw_line+0xd8>
			xerr -= distance;
 8000ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8000cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dd07      	ble.n	8000cca <lcd_draw_line+0xf0>
			yerr -= distance;
 8000cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++) {
 8000cca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000ccc:	3301      	adds	r3, #1
 8000cce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000cd0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dacf      	bge.n	8000c78 <lcd_draw_line+0x9e>
		}
	}
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3734      	adds	r7, #52	@ 0x34
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd90      	pop	{r4, r7, pc}

08000ce2 <lcd_draw_rectangle>:

void lcd_draw_rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000ce2:	b590      	push	{r4, r7, lr}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af02      	add	r7, sp, #8
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4611      	mov	r1, r2
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4623      	mov	r3, r4
 8000cf2:	80fb      	strh	r3, [r7, #6]
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	80bb      	strh	r3, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	803b      	strh	r3, [r7, #0]
	lcd_draw_line(x1, y1, x2, y1, color);
 8000d00:	88bc      	ldrh	r4, [r7, #4]
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	88b9      	ldrh	r1, [r7, #4]
 8000d06:	88f8      	ldrh	r0, [r7, #6]
 8000d08:	8b3b      	ldrh	r3, [r7, #24]
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	4623      	mov	r3, r4
 8000d0e:	f7ff ff64 	bl	8000bda <lcd_draw_line>
	lcd_draw_line(x1, y1, x1, y2, color);
 8000d12:	883c      	ldrh	r4, [r7, #0]
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	88b9      	ldrh	r1, [r7, #4]
 8000d18:	88f8      	ldrh	r0, [r7, #6]
 8000d1a:	8b3b      	ldrh	r3, [r7, #24]
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4623      	mov	r3, r4
 8000d20:	f7ff ff5b 	bl	8000bda <lcd_draw_line>
	lcd_draw_line(x1, y2, x2, y2, color);
 8000d24:	883c      	ldrh	r4, [r7, #0]
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	8839      	ldrh	r1, [r7, #0]
 8000d2a:	88f8      	ldrh	r0, [r7, #6]
 8000d2c:	8b3b      	ldrh	r3, [r7, #24]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4623      	mov	r3, r4
 8000d32:	f7ff ff52 	bl	8000bda <lcd_draw_line>
	lcd_draw_line(x2, y1, x2, y2, color);
 8000d36:	883c      	ldrh	r4, [r7, #0]
 8000d38:	887a      	ldrh	r2, [r7, #2]
 8000d3a:	88b9      	ldrh	r1, [r7, #4]
 8000d3c:	8878      	ldrh	r0, [r7, #2]
 8000d3e:	8b3b      	ldrh	r3, [r7, #24]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4623      	mov	r3, r4
 8000d44:	f7ff ff49 	bl	8000bda <lcd_draw_line>
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd90      	pop	{r4, r7, pc}

08000d50 <lcd_show_char>:

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b087      	sub	sp, #28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4604      	mov	r4, r0
 8000d58:	4608      	mov	r0, r1
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4623      	mov	r3, r4
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	4603      	mov	r3, r0
 8000d64:	80bb      	strh	r3, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	70fb      	strb	r3, [r7, #3]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000d76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d7a:	085b      	lsrs	r3, r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	fb12 f303 	smulbb	r3, r2, r3
 8000da6:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	3b20      	subs	r3, #32
 8000dac:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	4413      	add	r3, r2
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3b01      	subs	r3, #1
 8000dba:	b29c      	uxth	r4, r3
 8000dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	88b9      	ldrh	r1, [r7, #4]
 8000dce:	88f8      	ldrh	r0, [r7, #6]
 8000dd0:	4622      	mov	r2, r4
 8000dd2:	f7ff fe37 	bl	8000a44 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	827b      	strh	r3, [r7, #18]
 8000dda:	e07a      	b.n	8000ed2 <lcd_show_char+0x182>
		if (sizey == 12)
 8000ddc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000de0:	2b0c      	cmp	r3, #12
 8000de2:	d028      	beq.n	8000e36 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000de4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000de8:	2b10      	cmp	r3, #16
 8000dea:	d108      	bne.n	8000dfe <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000dec:	78fa      	ldrb	r2, [r7, #3]
 8000dee:	8a7b      	ldrh	r3, [r7, #18]
 8000df0:	493c      	ldr	r1, [pc, #240]	@ (8000ee4 <lcd_show_char+0x194>)
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	440a      	add	r2, r1
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	75fb      	strb	r3, [r7, #23]
 8000dfc:	e01b      	b.n	8000e36 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000dfe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e02:	2b18      	cmp	r3, #24
 8000e04:	d10b      	bne.n	8000e1e <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	8a79      	ldrh	r1, [r7, #18]
 8000e0a:	4837      	ldr	r0, [pc, #220]	@ (8000ee8 <lcd_show_char+0x198>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	4403      	add	r3, r0
 8000e16:	440b      	add	r3, r1
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	75fb      	strb	r3, [r7, #23]
 8000e1c:	e00b      	b.n	8000e36 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000e1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	d15a      	bne.n	8000edc <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	8a7b      	ldrh	r3, [r7, #18]
 8000e2a:	4930      	ldr	r1, [pc, #192]	@ (8000eec <lcd_show_char+0x19c>)
 8000e2c:	0192      	lsls	r2, r2, #6
 8000e2e:	440a      	add	r2, r1
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	75bb      	strb	r3, [r7, #22]
 8000e3a:	e044      	b.n	8000ec6 <lcd_show_char+0x176>
			if (!mode) {
 8000e3c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d120      	bne.n	8000e86 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000e44:	7dfa      	ldrb	r2, [r7, #23]
 8000e46:	7dbb      	ldrb	r3, [r7, #22]
 8000e48:	fa42 f303 	asr.w	r3, r2, r3
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000e54:	883b      	ldrh	r3, [r7, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fdd2 	bl	8000a00 <LCD_WR_DATA>
 8000e5c:	e003      	b.n	8000e66 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000e5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fdcd 	bl	8000a00 <LCD_WR_DATA>
				m++;
 8000e66:	7d7b      	ldrb	r3, [r7, #21]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000e6c:	7d7b      	ldrb	r3, [r7, #21]
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e74:	fb01 f202 	mul.w	r2, r1, r2
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d11f      	bne.n	8000ec0 <lcd_show_char+0x170>
					m = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	757b      	strb	r3, [r7, #21]
					break;
 8000e84:	e022      	b.n	8000ecc <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000e86:	7dfa      	ldrb	r2, [r7, #23]
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	fa42 f303 	asr.w	r3, r2, r3
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8000e96:	883a      	ldrh	r2, [r7, #0]
 8000e98:	88b9      	ldrh	r1, [r7, #4]
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe85 	bl	8000bac <lcd_draw_point>
				x++;
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	8a3b      	ldrh	r3, [r7, #16]
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d105      	bne.n	8000ec0 <lcd_show_char+0x170>
					x = x0;
 8000eb4:	8a3b      	ldrh	r3, [r7, #16]
 8000eb6:	80fb      	strh	r3, [r7, #6]
					y++;
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	80bb      	strh	r3, [r7, #4]
					break;
 8000ebe:	e005      	b.n	8000ecc <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000ec0:	7dbb      	ldrb	r3, [r7, #22]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	75bb      	strb	r3, [r7, #22]
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	2b07      	cmp	r3, #7
 8000eca:	d9b7      	bls.n	8000e3c <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000ecc:	8a7b      	ldrh	r3, [r7, #18]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	827b      	strh	r3, [r7, #18]
 8000ed2:	8a7a      	ldrh	r2, [r7, #18]
 8000ed4:	89bb      	ldrh	r3, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d380      	bcc.n	8000ddc <lcd_show_char+0x8c>
 8000eda:	e000      	b.n	8000ede <lcd_show_char+0x18e>
			return;
 8000edc:	bf00      	nop
				}
			}
		}
	}
}
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	08006824 	.word	0x08006824
 8000ee8:	08006e14 	.word	0x08006e14
 8000eec:	08007fe4 	.word	0x08007fe4

08000ef0 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000f04:	e004      	b.n	8000f10 <mypow+0x20>
		result *= m;
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	fb02 f303 	mul.w	r3, r2, r3
 8000f0e:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	71ba      	strb	r2, [r7, #6]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f5      	bne.n	8000f06 <mypow+0x16>
	return result;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8000f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f4e:	085b      	lsrs	r3, r3, #1
 8000f50:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e059      	b.n	800100c <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8000f58:	887c      	ldrh	r4, [r7, #2]
 8000f5a:	787a      	ldrb	r2, [r7, #1]
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4619      	mov	r1, r3
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f7ff ffc1 	bl	8000ef0 <mypow>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	fbb4 f1f3 	udiv	r1, r4, r3
 8000f74:	4b2a      	ldr	r3, [pc, #168]	@ (8001020 <lcd_show_int_num+0xf8>)
 8000f76:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	1aca      	subs	r2, r1, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d121      	bne.n	8000fd4 <lcd_show_int_num+0xac>
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	787b      	ldrb	r3, [r7, #1]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	429a      	cmp	r2, r3
 8000f98:	da1c      	bge.n	8000fd4 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8000f9a:	7b3b      	ldrb	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d117      	bne.n	8000fd0 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	fb12 f303 	smulbb	r3, r2, r3
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b298      	uxth	r0, r3
 8000fb4:	8c3a      	ldrh	r2, [r7, #32]
 8000fb6:	88b9      	ldrh	r1, [r7, #4]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	2220      	movs	r2, #32
 8000fca:	f7ff fec1 	bl	8000d50 <lcd_show_char>
				continue;
 8000fce:	e01a      	b.n	8001006 <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	fb12 f303 	smulbb	r3, r2, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b298      	uxth	r0, r3
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	3330      	adds	r3, #48	@ 0x30
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	8c3c      	ldrh	r4, [r7, #32]
 8000ff0:	88b9      	ldrh	r1, [r7, #4]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	4623      	mov	r3, r4
 8001002:	f7ff fea5 	bl	8000d50 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	3301      	adds	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	787b      	ldrb	r3, [r7, #1]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3a1      	bcc.n	8000f58 <lcd_show_int_num+0x30>
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	cccccccd 	.word	0xcccccccd

08001024 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <lcd_set_direction+0x2a>
		lcddev.width = 320;
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <lcd_set_direction+0x44>)
 8001040:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001044:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <lcd_set_direction+0x44>)
 8001048:	22f0      	movs	r2, #240	@ 0xf0
 800104a:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 800104c:	e006      	b.n	800105c <lcd_set_direction+0x38>
		lcddev.width = 240;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <lcd_set_direction+0x44>)
 8001050:	22f0      	movs	r2, #240	@ 0xf0
 8001052:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <lcd_set_direction+0x44>)
 8001056:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800105a:	805a      	strh	r2, [r3, #2]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000110 	.word	0x20000110

0800106c <lcd_init>:

void lcd_init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001076:	48aa      	ldr	r0, [pc, #680]	@ (8001320 <lcd_init+0x2b4>)
 8001078:	f002 fbe8 	bl	800384c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800107c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001080:	f002 f912 	bl	80032a8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800108a:	48a5      	ldr	r0, [pc, #660]	@ (8001320 <lcd_init+0x2b4>)
 800108c:	f002 fbde 	bl	800384c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001090:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001094:	f002 f908 	bl	80032a8 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ffc3 	bl	8001024 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 800109e:	20d3      	movs	r0, #211	@ 0xd3
 80010a0:	f7ff fc9e 	bl	80009e0 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 80010a4:	f7ff fcbc 	bl	8000a20 <LCD_RD_DATA>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001324 <lcd_init+0x2b8>)
 80010ae:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80010b0:	f7ff fcb6 	bl	8000a20 <LCD_RD_DATA>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b9a      	ldr	r3, [pc, #616]	@ (8001324 <lcd_init+0x2b8>)
 80010ba:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80010bc:	f7ff fcb0 	bl	8000a20 <LCD_RD_DATA>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b97      	ldr	r3, [pc, #604]	@ (8001324 <lcd_init+0x2b8>)
 80010c6:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 80010c8:	4b96      	ldr	r3, [pc, #600]	@ (8001324 <lcd_init+0x2b8>)
 80010ca:	889b      	ldrh	r3, [r3, #4]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b94      	ldr	r3, [pc, #592]	@ (8001324 <lcd_init+0x2b8>)
 80010d2:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 80010d4:	f7ff fca4 	bl	8000a20 <LCD_RD_DATA>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b91      	ldr	r3, [pc, #580]	@ (8001324 <lcd_init+0x2b8>)
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001324 <lcd_init+0x2b8>)
 80010e6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80010e8:	20cf      	movs	r0, #207	@ 0xcf
 80010ea:	f7ff fc79 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fc86 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80010f4:	20c1      	movs	r0, #193	@ 0xc1
 80010f6:	f7ff fc83 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80010fa:	2030      	movs	r0, #48	@ 0x30
 80010fc:	f7ff fc80 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001100:	20ed      	movs	r0, #237	@ 0xed
 8001102:	f7ff fc6d 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001106:	2064      	movs	r0, #100	@ 0x64
 8001108:	f7ff fc7a 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800110c:	2003      	movs	r0, #3
 800110e:	f7ff fc77 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001112:	2012      	movs	r0, #18
 8001114:	f7ff fc74 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001118:	2081      	movs	r0, #129	@ 0x81
 800111a:	f7ff fc71 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800111e:	20e8      	movs	r0, #232	@ 0xe8
 8001120:	f7ff fc5e 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001124:	2085      	movs	r0, #133	@ 0x85
 8001126:	f7ff fc6b 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800112a:	2010      	movs	r0, #16
 800112c:	f7ff fc68 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001130:	207a      	movs	r0, #122	@ 0x7a
 8001132:	f7ff fc65 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001136:	20cb      	movs	r0, #203	@ 0xcb
 8001138:	f7ff fc52 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800113c:	2039      	movs	r0, #57	@ 0x39
 800113e:	f7ff fc5f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001142:	202c      	movs	r0, #44	@ 0x2c
 8001144:	f7ff fc5c 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fc59 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800114e:	2034      	movs	r0, #52	@ 0x34
 8001150:	f7ff fc56 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fc53 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800115a:	20f7      	movs	r0, #247	@ 0xf7
 800115c:	f7ff fc40 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001160:	2020      	movs	r0, #32
 8001162:	f7ff fc4d 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001166:	20ea      	movs	r0, #234	@ 0xea
 8001168:	f7ff fc3a 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fc47 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fc44 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001178:	20c0      	movs	r0, #192	@ 0xc0
 800117a:	f7ff fc31 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800117e:	201b      	movs	r0, #27
 8001180:	f7ff fc3e 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001184:	20c1      	movs	r0, #193	@ 0xc1
 8001186:	f7ff fc2b 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fc38 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001190:	20c5      	movs	r0, #197	@ 0xc5
 8001192:	f7ff fc25 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001196:	2030      	movs	r0, #48	@ 0x30
 8001198:	f7ff fc32 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800119c:	2030      	movs	r0, #48	@ 0x30
 800119e:	f7ff fc2f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011a2:	20c7      	movs	r0, #199	@ 0xc7
 80011a4:	f7ff fc1c 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011a8:	20b7      	movs	r0, #183	@ 0xb7
 80011aa:	f7ff fc29 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ae:	2036      	movs	r0, #54	@ 0x36
 80011b0:	f7ff fc16 	bl	80009e0 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 80011b4:	2008      	movs	r0, #8
 80011b6:	f7ff fc23 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011ba:	203a      	movs	r0, #58	@ 0x3a
 80011bc:	f7ff fc10 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011c0:	2055      	movs	r0, #85	@ 0x55
 80011c2:	f7ff fc1d 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011c6:	20b1      	movs	r0, #177	@ 0xb1
 80011c8:	f7ff fc0a 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fc17 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011d2:	201a      	movs	r0, #26
 80011d4:	f7ff fc14 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80011d8:	20b6      	movs	r0, #182	@ 0xb6
 80011da:	f7ff fc01 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80011de:	200a      	movs	r0, #10
 80011e0:	f7ff fc0e 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80011e4:	20a2      	movs	r0, #162	@ 0xa2
 80011e6:	f7ff fc0b 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80011ea:	20f2      	movs	r0, #242	@ 0xf2
 80011ec:	f7ff fbf8 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fc05 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80011f6:	2026      	movs	r0, #38	@ 0x26
 80011f8:	f7ff fbf2 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fbff 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001202:	20e0      	movs	r0, #224	@ 0xe0
 8001204:	f7ff fbec 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001208:	200f      	movs	r0, #15
 800120a:	f7ff fbf9 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800120e:	202a      	movs	r0, #42	@ 0x2a
 8001210:	f7ff fbf6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	f7ff fbf3 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800121a:	2008      	movs	r0, #8
 800121c:	f7ff fbf0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001220:	200e      	movs	r0, #14
 8001222:	f7ff fbed 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001226:	2008      	movs	r0, #8
 8001228:	f7ff fbea 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800122c:	2054      	movs	r0, #84	@ 0x54
 800122e:	f7ff fbe7 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001232:	20a9      	movs	r0, #169	@ 0xa9
 8001234:	f7ff fbe4 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001238:	2043      	movs	r0, #67	@ 0x43
 800123a:	f7ff fbe1 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800123e:	200a      	movs	r0, #10
 8001240:	f7ff fbde 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001244:	200f      	movs	r0, #15
 8001246:	f7ff fbdb 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fbd8 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fbd5 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fbd2 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fbcf 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001262:	20e1      	movs	r0, #225	@ 0xe1
 8001264:	f7ff fbbc 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fbc9 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800126e:	2015      	movs	r0, #21
 8001270:	f7ff fbc6 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001274:	2017      	movs	r0, #23
 8001276:	f7ff fbc3 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800127a:	2007      	movs	r0, #7
 800127c:	f7ff fbc0 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001280:	2011      	movs	r0, #17
 8001282:	f7ff fbbd 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001286:	2006      	movs	r0, #6
 8001288:	f7ff fbba 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800128c:	202b      	movs	r0, #43	@ 0x2b
 800128e:	f7ff fbb7 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001292:	2056      	movs	r0, #86	@ 0x56
 8001294:	f7ff fbb4 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001298:	203c      	movs	r0, #60	@ 0x3c
 800129a:	f7ff fbb1 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800129e:	2005      	movs	r0, #5
 80012a0:	f7ff fbae 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012a4:	2010      	movs	r0, #16
 80012a6:	f7ff fbab 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012aa:	200f      	movs	r0, #15
 80012ac:	f7ff fba8 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012b0:	203f      	movs	r0, #63	@ 0x3f
 80012b2:	f7ff fba5 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012b6:	203f      	movs	r0, #63	@ 0x3f
 80012b8:	f7ff fba2 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012bc:	200f      	movs	r0, #15
 80012be:	f7ff fb9f 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012c2:	202b      	movs	r0, #43	@ 0x2b
 80012c4:	f7ff fb8c 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fb99 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fb96 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fb93 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80012da:	203f      	movs	r0, #63	@ 0x3f
 80012dc:	f7ff fb90 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80012e0:	202a      	movs	r0, #42	@ 0x2a
 80012e2:	f7ff fb7d 	bl	80009e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fb8a 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fb87 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fb84 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80012f8:	20ef      	movs	r0, #239	@ 0xef
 80012fa:	f7ff fb81 	bl	8000a00 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 80012fe:	2011      	movs	r0, #17
 8001300:	f7ff fb6e 	bl	80009e0 <LCD_WR_REG>
	HAL_Delay(120);
 8001304:	2078      	movs	r0, #120	@ 0x78
 8001306:	f001 ffcf 	bl	80032a8 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800130a:	2029      	movs	r0, #41	@ 0x29
 800130c:	f7ff fb68 	bl	80009e0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	4804      	ldr	r0, [pc, #16]	@ (8001328 <lcd_init+0x2bc>)
 8001318:	f002 fa98 	bl	800384c <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020800 	.word	0x40020800
 8001324:	20000110 	.word	0x20000110
 8001328:	40020000 	.word	0x40020000

0800132c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4413      	add	r3, r2
 8001344:	b298      	uxth	r0, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	b29a      	uxth	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b29b      	uxth	r3, r3
 8001352:	8b3a      	ldrh	r2, [r7, #24]
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc29 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b298      	uxth	r0, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	b29a      	uxth	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	8b3a      	ldrh	r2, [r7, #24]
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fc19 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4413      	add	r3, r2
 8001384:	b298      	uxth	r0, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	b29a      	uxth	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	8b3a      	ldrh	r2, [r7, #24]
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fc09 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	b298      	uxth	r0, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fbf9 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	b298      	uxth	r0, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	8b3a      	ldrh	r2, [r7, #24]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbe9 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b298      	uxth	r0, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	8b3a      	ldrh	r2, [r7, #24]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fbd9 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	4413      	add	r3, r2
 8001404:	b298      	uxth	r0, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	b29b      	uxth	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	8b3a      	ldrh	r2, [r7, #24]
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbc9 	bl	8000bac <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	b29a      	uxth	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b298      	uxth	r0, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	b29b      	uxth	r3, r3
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	8b3a      	ldrh	r2, [r7, #24]
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbb9 	bl	8000bac <lcd_draw_point>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <lcd_draw_circle>:

void lcd_draw_circle(int xc, int yc, uint16_t c, int r, int fill)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b08a      	sub	sp, #40	@ 0x28
 8001446:	af02      	add	r7, sp, #8
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4613      	mov	r3, r2
 8001450:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	f1c3 0303 	rsb	r3, r3, #3
 8001462:	613b      	str	r3, [r7, #16]

	if (fill) {
 8001464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	d04f      	beq.n	800150a <lcd_draw_circle+0xc8>
		while (x <= y) {
 800146a:	e029      	b.n	80014c0 <lcd_draw_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e00a      	b.n	8001488 <lcd_draw_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff ff55 	bl	800132c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	429a      	cmp	r2, r3
 800148e:	ddf0      	ble.n	8001472 <lcd_draw_circle+0x30>

			if (d < 0) {
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da06      	bge.n	80014a4 <lcd_draw_circle+0x62>
				d = d + 4 * x + 6;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	009a      	lsls	r2, r3, #2
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4413      	add	r3, r2
 800149e:	3306      	adds	r3, #6
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	e00a      	b.n	80014ba <lcd_draw_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	009a      	lsls	r2, r3, #2
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4413      	add	r3, r2
 80014b0:	330a      	adds	r3, #10
 80014b2:	613b      	str	r3, [r7, #16]
				y--;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	ddd1      	ble.n	800146c <lcd_draw_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80014c8:	e023      	b.n	8001512 <lcd_draw_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff ff29 	bl	800132c <_draw_circle_8>
			if (d < 0) {
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da06      	bge.n	80014ee <lcd_draw_circle+0xac>
				d = d + 4 * x + 6;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	009a      	lsls	r2, r3, #2
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	3306      	adds	r3, #6
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	e00a      	b.n	8001504 <lcd_draw_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	009a      	lsls	r2, r3, #2
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	330a      	adds	r3, #10
 80014fc:	613b      	str	r3, [r7, #16]
				y--;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3b01      	subs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
			x++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3301      	adds	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	dddb      	ble.n	80014ca <lcd_draw_circle+0x88>
}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <lcd_show_string>:

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08b      	sub	sp, #44	@ 0x2c
 8001520:	af04      	add	r7, sp, #16
 8001522:	60ba      	str	r2, [r7, #8]
 8001524:	461a      	mov	r2, r3
 8001526:	4603      	mov	r3, r0
 8001528:	81fb      	strh	r3, [r7, #14]
 800152a:	460b      	mov	r3, r1
 800152c:	81bb      	strh	r3, [r7, #12]
 800152e:	4613      	mov	r3, r2
 8001530:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800153a:	e048      	b.n	80015ce <lcd_show_string+0xb2>
		if (!bHz) {
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d145      	bne.n	80015ce <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001542:	89fa      	ldrh	r2, [r7, #14]
 8001544:	4b26      	ldr	r3, [pc, #152]	@ (80015e0 <lcd_show_string+0xc4>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	1acb      	subs	r3, r1, r3
 8001554:	429a      	cmp	r2, r3
 8001556:	dc3f      	bgt.n	80015d8 <lcd_show_string+0xbc>
 8001558:	89ba      	ldrh	r2, [r7, #12]
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <lcd_show_string+0xc4>)
 800155c:	885b      	ldrh	r3, [r3, #2]
 800155e:	4619      	mov	r1, r3
 8001560:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001564:	1acb      	subs	r3, r1, r3
 8001566:	429a      	cmp	r2, r3
 8001568:	dc36      	bgt.n	80015d8 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b80      	cmp	r3, #128	@ 0x80
 8001570:	d902      	bls.n	8001578 <lcd_show_string+0x5c>
				bHz = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	75fb      	strb	r3, [r7, #23]
 8001576:	e02a      	b.n	80015ce <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	d10b      	bne.n	8001598 <lcd_show_string+0x7c>
					y += sizey;
 8001580:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001584:	b29a      	uxth	r2, r3
 8001586:	89bb      	ldrh	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	81bb      	strh	r3, [r7, #12]
					x = x0;
 800158c:	8abb      	ldrh	r3, [r7, #20]
 800158e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3301      	adds	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	e017      	b.n	80015c8 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	88fc      	ldrh	r4, [r7, #6]
 800159e:	89b9      	ldrh	r1, [r7, #12]
 80015a0:	89f8      	ldrh	r0, [r7, #14]
 80015a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4623      	mov	r3, r4
 80015b4:	f7ff fbcc 	bl	8000d50 <lcd_show_char>
					x += sizey / 2;
 80015b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	4413      	add	r3, r2
 80015c6:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3301      	adds	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1b2      	bne.n	800153c <lcd_show_string+0x20>
 80015d6:	e000      	b.n	80015da <lcd_show_string+0xbe>
				return;
 80015d8:	bf00      	nop
			}
		}
	}
}
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	20000110 	.word	0x20000110

080015e4 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <led_7seg_init+0x14>)
 80015ee:	f002 f92d 	bl	800384c <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021800 	.word	0x40021800

080015fc <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt (Be called in default in Timer 4 callback function)
 * @retval 	None
 */
void led_7seg_display() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001600:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <led_7seg_display+0x104>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <led_7seg_display+0x104>)
 800160a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 800160c:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <led_7seg_display+0x108>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <led_7seg_display+0x10c>)
 8001614:	5c9b      	ldrb	r3, [r3, r2]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <led_7seg_display+0x104>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <led_7seg_display+0x104>)
 8001628:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 800162a:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <led_7seg_display+0x108>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d846      	bhi.n	80016c0 <led_7seg_display+0xc4>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <led_7seg_display+0x3c>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	08001649 	.word	0x08001649
 800163c:	08001667 	.word	0x08001667
 8001640:	08001685 	.word	0x08001685
 8001644:	080016a3 	.word	0x080016a3
	case 0:
		spi_buffer |= 0x00b0;
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <led_7seg_display+0x104>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <led_7seg_display+0x104>)
 8001654:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <led_7seg_display+0x104>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <led_7seg_display+0x104>)
 8001662:	801a      	strh	r2, [r3, #0]
		break;
 8001664:	e02d      	b.n	80016c2 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <led_7seg_display+0x104>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <led_7seg_display+0x104>)
 8001672:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <led_7seg_display+0x104>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f023 0320 	bic.w	r3, r3, #32
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <led_7seg_display+0x104>)
 8001680:	801a      	strh	r2, [r3, #0]
		break;
 8001682:	e01e      	b.n	80016c2 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <led_7seg_display+0x104>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <led_7seg_display+0x104>)
 8001690:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <led_7seg_display+0x104>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	f023 0310 	bic.w	r3, r3, #16
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <led_7seg_display+0x104>)
 800169e:	801a      	strh	r2, [r3, #0]
		break;
 80016a0:	e00f      	b.n	80016c2 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <led_7seg_display+0x104>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <led_7seg_display+0x104>)
 80016ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <led_7seg_display+0x104>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <led_7seg_display+0x104>)
 80016bc:	801a      	strh	r2, [r3, #0]
		break;
 80016be:	e000      	b.n	80016c2 <led_7seg_display+0xc6>
	default:
		break;
 80016c0:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <led_7seg_display+0x108>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	425a      	negs	r2, r3
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	bf58      	it	pl
 80016d4:	4253      	negpl	r3, r2
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <led_7seg_display+0x108>)
 80016da:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2140      	movs	r1, #64	@ 0x40
 80016e0:	480a      	ldr	r0, [pc, #40]	@ (800170c <led_7seg_display+0x110>)
 80016e2:	f002 f8b3 	bl	800384c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 80016e6:	2301      	movs	r3, #1
 80016e8:	2202      	movs	r2, #2
 80016ea:	4905      	ldr	r1, [pc, #20]	@ (8001700 <led_7seg_display+0x104>)
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <led_7seg_display+0x114>)
 80016ee:	f002 fdce 	bl	800428e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2140      	movs	r1, #64	@ 0x40
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <led_7seg_display+0x110>)
 80016f8:	f002 f8a8 	bl	800384c <HAL_GPIO_WritePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000000e 	.word	0x2000000e
 8001704:	20000116 	.word	0x20000116
 8001708:	20000000 	.word	0x20000000
 800170c:	40021800 	.word	0x40021800
 8001710:	20000234 	.word	0x20000234

08001714 <led_7seg_set_digit>:
 * @param  	num	Number displayed
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led_7seg_set_digit(int num, int position, uint8_t show_dot) {
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 9) {
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0e      	blt.n	8001746 <led_7seg_set_digit+0x32>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b09      	cmp	r3, #9
 800172c:	dc0b      	bgt.n	8001746 <led_7seg_set_digit+0x32>
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <led_7seg_set_digit+0x40>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	b2d9      	uxtb	r1, r3
 800173c:	4a06      	ldr	r2, [pc, #24]	@ (8001758 <led_7seg_set_digit+0x44>)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4413      	add	r3, r2
 8001742:	460a      	mov	r2, r1
 8001744:	701a      	strb	r2, [r3, #0]
	}
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000004 	.word	0x20000004
 8001758:	20000000 	.word	0x20000000

0800175c <led_7seg_set_colon>:
 *          This parameter can be one of the following values:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led_7seg_set_colon(uint8_t status) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d107      	bne.n	800177c <led_7seg_set_colon+0x20>
		spi_buffer &= ~(1 << 3);
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <led_7seg_set_colon+0x3c>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	f023 0308 	bic.w	r3, r3, #8
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <led_7seg_set_colon+0x3c>)
 8001778:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 800177a:	e006      	b.n	800178a <led_7seg_set_colon+0x2e>
		spi_buffer |= (1 << 3);
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <led_7seg_set_colon+0x3c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <led_7seg_set_colon+0x3c>)
 8001788:	801a      	strh	r2, [r3, #0]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000000e 	.word	0x2000000e

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f001 fd10 	bl	80031c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f820 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff f822 	bl	80007f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017ac:	f001 fc02 	bl	8002fb4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80017b0:	f001 fa3e 	bl	8002c30 <MX_SPI1_Init>
  MX_FSMC_Init();
 80017b4:	f7fe ff4c 	bl	8000650 <MX_FSMC_Init>
  MX_TIM4_Init();
 80017b8:	f001 fc48 	bl	800304c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	init_system();
 80017bc:	f000 f87e 	bl	80018bc <init_system>
	timer2_set(50);
 80017c0:	2032      	movs	r0, #50	@ 0x32
 80017c2:	f001 f9b1 	bl	8002b28 <timer2_set>
	timer4_set(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f001 f9ca 	bl	8002b60 <timer4_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (timer2_flag) {
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <main+0x48>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0fb      	beq.n	80017cc <main+0x30>
			timer2_flag = 0;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <main+0x48>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
			button_scan();
 80017da:	f7fe fecd 	bl	8000578 <button_scan>

			game_process();
 80017de:	f000 f9d9 	bl	8001b94 <game_process>
		if (timer2_flag) {
 80017e2:	e7f3      	b.n	80017cc <main+0x30>
 80017e4:	20000227 	.word	0x20000227

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	@ 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f8fe 	bl	80059f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a27      	ldr	r2, [pc, #156]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001858:	2308      	movs	r3, #8
 800185a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800185c:	23a8      	movs	r3, #168	@ 0xa8
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f002 f821 	bl	80038b4 <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001878:	f000 f830 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187c:	230f      	movs	r3, #15
 800187e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001888:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800188c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800188e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2105      	movs	r1, #5
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fa82 	bl	8003da4 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018a6:	f000 f819 	bl	80018dc <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	@ 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <init_system>:

/* USER CODE BEGIN 4 */
void init_system() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	button_init();
 80018c0:	f7fe fe4e 	bl	8000560 <button_init>
	led_7seg_init();
 80018c4:	f7ff fe8e 	bl	80015e4 <led_7seg_init>
	lcd_init();
 80018c8:	f7ff fbd0 	bl	800106c <lcd_init>

	timer2_init();
 80018cc:	f001 f918 	bl	8002b00 <timer2_init>

	timer4_init();
 80018d0:	f001 f920 	bl	8002b14 <timer4_init>

	game_init();
 80018d4:	f000 f808 	bl	80018e8 <game_init>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <game_init>:
};
const int TOTAL_SCORE = 100; // if re-assign the map remember to change the TOTAL_SCORE
const int POINTS_PER_DOT = 1;
bool game_loop = true;
void game_init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af04      	add	r7, sp, #16
	game_loop = true;
 80018ee:	4b9f      	ldr	r3, [pc, #636]	@ (8001b6c <game_init+0x284>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
	maze = DEFAULT_MAZE;
 80018f4:	4a9e      	ldr	r2, [pc, #632]	@ (8001b70 <game_init+0x288>)
 80018f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001b74 <game_init+0x28c>)
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	23e1      	movs	r3, #225	@ 0xe1
 80018fe:	461a      	mov	r2, r3
 8001900:	f004 f8af 	bl	8005a62 <memcpy>

	lcd_clear(BACKGROUND_COLOR); // set bg color to white
 8001904:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001908:	f7ff f8e8 	bl	8000adc <lcd_clear>
	lcd_draw_rectangle(MAZE_TOP_BORDER, MAZE_LEFT_BORDER, MAZE_BOTTOM_BORDER, MAZE_RIGHT_BORDER, BLACK);
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	23f0      	movs	r3, #240	@ 0xf0
 8001912:	22f0      	movs	r2, #240	@ 0xf0
 8001914:	2100      	movs	r1, #0
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff f9e3 	bl	8000ce2 <lcd_draw_rectangle>

	lcd_show_string(20, 250, "Extremely simple PAC-MAN", BLACK, BACKGROUND_COLOR, 16, 0);
 800191c:	2300      	movs	r3, #0
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2310      	movs	r3, #16
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	4a92      	ldr	r2, [pc, #584]	@ (8001b78 <game_init+0x290>)
 800192e:	21fa      	movs	r1, #250	@ 0xfa
 8001930:	2014      	movs	r0, #20
 8001932:	f7ff fdf3 	bl	800151c <lcd_show_string>
	lcd_show_string(20, 270, "Score: ", BLACK, BACKGROUND_COLOR, 16, 0);
 8001936:	2300      	movs	r3, #0
 8001938:	9302      	str	r3, [sp, #8]
 800193a:	2310      	movs	r3, #16
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	4a8d      	ldr	r2, [pc, #564]	@ (8001b7c <game_init+0x294>)
 8001948:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800194c:	2014      	movs	r0, #20
 800194e:	f7ff fde5 	bl	800151c <lcd_show_string>
	lcd_show_int_num(80, 270, 0, 1, RED, BACKGROUND_COLOR, 16);
 8001952:	2310      	movs	r3, #16
 8001954:	9302      	str	r3, [sp, #8]
 8001956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2301      	movs	r3, #1
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800196a:	2050      	movs	r0, #80	@ 0x50
 800196c:	f7ff fadc 	bl	8000f28 <lcd_show_int_num>

//	led 7 seg
	led_7seg_set_colon(0);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fef3 	bl	800175c <led_7seg_set_colon>
	led_7seg_set_digit(0, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff feca 	bl	8001714 <led_7seg_set_digit>
	led_7seg_set_digit(0, 1, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2101      	movs	r1, #1
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fec5 	bl	8001714 <led_7seg_set_digit>
	led_7seg_set_digit(0, 2, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fec0 	bl	8001714 <led_7seg_set_digit>
	led_7seg_set_digit(0, 3, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2103      	movs	r1, #3
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff febb 	bl	8001714 <led_7seg_set_digit>

	//	DRAW MAP
	for (int i = 0; i < MAZE_ROW_N; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	e034      	b.n	8001a0e <game_init+0x126>
	{
		for (int j = 0; j < MAZE_COLUMN_N; j++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	e02b      	b.n	8001a02 <game_init+0x11a>
		{
			if(maze.cells[i][j] == PAC_DOT)
 80019aa:	4971      	ldr	r1, [pc, #452]	@ (8001b70 <game_init+0x288>)
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	18ca      	adds	r2, r1, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d109      	bne.n	80019d4 <game_init+0xec>
			{
				pac_dot_draw(i, j, PAC_DOTS_COLOR); // Draw pac-dot on the maze
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 ffd1 	bl	8002974 <pac_dot_draw>
 80019d2:	e013      	b.n	80019fc <game_init+0x114>
			}
			else if(maze.cells[i][j] == WALL)
 80019d4:	4966      	ldr	r1, [pc, #408]	@ (8001b70 <game_init+0x288>)
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	18ca      	adds	r2, r1, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d108      	bne.n	80019fc <game_init+0x114>
			{
				wall_draw(i, j, WALL_COLOR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	b2d1      	uxtb	r1, r2
 80019f2:	f240 12cf 	movw	r2, #463	@ 0x1cf
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 ffe8 	bl	80029cc <wall_draw>
		for (int j = 0; j < MAZE_COLUMN_N; j++)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b0e      	cmp	r3, #14
 8001a06:	ddd0      	ble.n	80019aa <game_init+0xc2>
	for (int i = 0; i < MAZE_ROW_N; i++)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0e      	cmp	r3, #14
 8001a12:	ddc7      	ble.n	80019a4 <game_init+0xbc>
			else;
		}
	}

//	at first you must check PACMAN_STARTING_I PACMAN_STARTING_J is not a wall
	maze.cells[PACMAN_STARTING_I][PACMAN_STARTING_J] = NONE; // reset maze cell at pacman position
 8001a14:	4b56      	ldr	r3, [pc, #344]	@ (8001b70 <game_init+0x288>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
	pacman.i = PACMAN_STARTING_I;
 8001a1c:	4b58      	ldr	r3, [pc, #352]	@ (8001b80 <game_init+0x298>)
 8001a1e:	2207      	movs	r2, #7
 8001a20:	701a      	strb	r2, [r3, #0]
	pacman.j = PACMAN_STARTING_J;
 8001a22:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <game_init+0x298>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	705a      	strb	r2, [r3, #1]
	pacman.i_pre = pacman.i;
 8001a28:	4b55      	ldr	r3, [pc, #340]	@ (8001b80 <game_init+0x298>)
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	4b54      	ldr	r3, [pc, #336]	@ (8001b80 <game_init+0x298>)
 8001a2e:	709a      	strb	r2, [r3, #2]
	pacman.j_pre = pacman.j;
 8001a30:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <game_init+0x298>)
 8001a32:	785a      	ldrb	r2, [r3, #1]
 8001a34:	4b52      	ldr	r3, [pc, #328]	@ (8001b80 <game_init+0x298>)
 8001a36:	70da      	strb	r2, [r3, #3]
	pacman.direction = STOP;
 8001a38:	4b51      	ldr	r3, [pc, #324]	@ (8001b80 <game_init+0x298>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	711a      	strb	r2, [r3, #4]
	pacman.score = 0;
 8001a3e:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <game_init+0x298>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
	pacman_draw(pacman.i, pacman.j, PACMAN_COLOR);
 8001a44:	4b4e      	ldr	r3, [pc, #312]	@ (8001b80 <game_init+0x298>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4a4d      	ldr	r2, [pc, #308]	@ (8001b80 <game_init+0x298>)
 8001a4a:	7851      	ldrb	r1, [r2, #1]
 8001a4c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 ffdf 	bl	8002a14 <pacman_draw>

//	at first you must check GHOST_STARTING_I GHOST_STARTING_J is not a wall
	if(maze.cells[GHOST_0_STARTING_I][GHOST_0_STARTING_J] == WALL)
 8001a56:	4b46      	ldr	r3, [pc, #280]	@ (8001b70 <game_init+0x288>)
 8001a58:	7c1b      	ldrb	r3, [r3, #16]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d102      	bne.n	8001a64 <game_init+0x17c>
	{
		maze.cells[GHOST_0_STARTING_I][GHOST_0_STARTING_J] = NONE;
 8001a5e:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <game_init+0x288>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	741a      	strb	r2, [r3, #16]
	}
	ghost_0.i = GHOST_0_STARTING_I;
 8001a64:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <game_init+0x29c>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
	ghost_0.j = GHOST_0_STARTING_J;
 8001a6a:	4b46      	ldr	r3, [pc, #280]	@ (8001b84 <game_init+0x29c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
	ghost_0.i_pre = ghost_0.i;
 8001a70:	4b44      	ldr	r3, [pc, #272]	@ (8001b84 <game_init+0x29c>)
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <game_init+0x29c>)
 8001a76:	709a      	strb	r2, [r3, #2]
	ghost_0.j_pre = ghost_0.j;
 8001a78:	4b42      	ldr	r3, [pc, #264]	@ (8001b84 <game_init+0x29c>)
 8001a7a:	785a      	ldrb	r2, [r3, #1]
 8001a7c:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <game_init+0x29c>)
 8001a7e:	70da      	strb	r2, [r3, #3]
	ghost_0.direction = STOP;
 8001a80:	4b40      	ldr	r3, [pc, #256]	@ (8001b84 <game_init+0x29c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	711a      	strb	r2, [r3, #4]
	ghost_draw(ghost_0.i, ghost_0.j, GHOST_0_COLOR);
 8001a86:	4b3f      	ldr	r3, [pc, #252]	@ (8001b84 <game_init+0x29c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b84 <game_init+0x29c>)
 8001a8c:	7851      	ldrb	r1, [r2, #1]
 8001a8e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 ffd9 	bl	8002a4a <ghost_draw>

	if(maze.cells[GHOST_1_STARTING_I][GHOST_1_STARTING_J] == WALL)
 8001a98:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <game_init+0x288>)
 8001a9a:	7f1b      	ldrb	r3, [r3, #28]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d102      	bne.n	8001aa6 <game_init+0x1be>
	{
		maze.cells[GHOST_1_STARTING_I][GHOST_1_STARTING_J] = NONE;
 8001aa0:	4b33      	ldr	r3, [pc, #204]	@ (8001b70 <game_init+0x288>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	771a      	strb	r2, [r3, #28]
	}
	ghost_1.i = GHOST_1_STARTING_I;
 8001aa6:	4b38      	ldr	r3, [pc, #224]	@ (8001b88 <game_init+0x2a0>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
	ghost_1.j = GHOST_1_STARTING_J;
 8001aac:	4b36      	ldr	r3, [pc, #216]	@ (8001b88 <game_init+0x2a0>)
 8001aae:	220d      	movs	r2, #13
 8001ab0:	705a      	strb	r2, [r3, #1]
	ghost_1.i_pre = ghost_1.i;
 8001ab2:	4b35      	ldr	r3, [pc, #212]	@ (8001b88 <game_init+0x2a0>)
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b34      	ldr	r3, [pc, #208]	@ (8001b88 <game_init+0x2a0>)
 8001ab8:	709a      	strb	r2, [r3, #2]
	ghost_1.j_pre = ghost_1.j;
 8001aba:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <game_init+0x2a0>)
 8001abc:	785a      	ldrb	r2, [r3, #1]
 8001abe:	4b32      	ldr	r3, [pc, #200]	@ (8001b88 <game_init+0x2a0>)
 8001ac0:	70da      	strb	r2, [r3, #3]
	ghost_1.direction = STOP;
 8001ac2:	4b31      	ldr	r3, [pc, #196]	@ (8001b88 <game_init+0x2a0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	711a      	strb	r2, [r3, #4]
	ghost_draw(ghost_1.i, ghost_1.j, GHOST_1_COLOR);
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b88 <game_init+0x2a0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4a2e      	ldr	r2, [pc, #184]	@ (8001b88 <game_init+0x2a0>)
 8001ace:	7851      	ldrb	r1, [r2, #1]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 ffb9 	bl	8002a4a <ghost_draw>

	if(maze.cells[GHOST_2_STARTING_I][GHOST_2_STARTING_J] == WALL)
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <game_init+0x288>)
 8001ada:	f893 30c4 	ldrb.w	r3, [r3, #196]	@ 0xc4
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d103      	bne.n	8001aea <game_init+0x202>
	{
		maze.cells[GHOST_2_STARTING_I][GHOST_2_STARTING_J] = NONE;
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <game_init+0x288>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
	}
	ghost_2.i = GHOST_2_STARTING_I;
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <game_init+0x2a4>)
 8001aec:	220d      	movs	r2, #13
 8001aee:	701a      	strb	r2, [r3, #0]
	ghost_2.j = GHOST_2_STARTING_J;
 8001af0:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <game_init+0x2a4>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	705a      	strb	r2, [r3, #1]
	ghost_2.i_pre = ghost_2.i;
 8001af6:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <game_init+0x2a4>)
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <game_init+0x2a4>)
 8001afc:	709a      	strb	r2, [r3, #2]
	ghost_2.j_pre = ghost_2.j;
 8001afe:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <game_init+0x2a4>)
 8001b00:	785a      	ldrb	r2, [r3, #1]
 8001b02:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <game_init+0x2a4>)
 8001b04:	70da      	strb	r2, [r3, #3]
	ghost_2.direction = STOP;
 8001b06:	4b21      	ldr	r3, [pc, #132]	@ (8001b8c <game_init+0x2a4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	711a      	strb	r2, [r3, #4]
	ghost_draw(ghost_2.i, ghost_2.j, GHOST_2_COLOR);
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <game_init+0x2a4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <game_init+0x2a4>)
 8001b12:	7851      	ldrb	r1, [r2, #1]
 8001b14:	f64f 4207 	movw	r2, #64519	@ 0xfc07
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 ff96 	bl	8002a4a <ghost_draw>

	if(maze.cells[GHOST_3_STARTING_I][GHOST_3_STARTING_J] == WALL)
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <game_init+0x288>)
 8001b20:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d103      	bne.n	8001b30 <game_init+0x248>
	{
		maze.cells[GHOST_3_STARTING_I][GHOST_3_STARTING_J] = NONE;
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <game_init+0x288>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
	}
	ghost_3.i = GHOST_3_STARTING_I;
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <game_init+0x2a8>)
 8001b32:	220d      	movs	r2, #13
 8001b34:	701a      	strb	r2, [r3, #0]
	ghost_3.j = GHOST_3_STARTING_J;
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <game_init+0x2a8>)
 8001b38:	220d      	movs	r2, #13
 8001b3a:	705a      	strb	r2, [r3, #1]
	ghost_3.i_pre = ghost_3.i;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <game_init+0x2a8>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <game_init+0x2a8>)
 8001b42:	709a      	strb	r2, [r3, #2]
	ghost_3.j_pre = ghost_3.j;
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <game_init+0x2a8>)
 8001b46:	785a      	ldrb	r2, [r3, #1]
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <game_init+0x2a8>)
 8001b4a:	70da      	strb	r2, [r3, #3]
	ghost_3.direction = STOP;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <game_init+0x2a8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	711a      	strb	r2, [r3, #4]
	ghost_draw(ghost_3.i, ghost_3.j, GHOST_3_COLOR);
 8001b52:	4b0f      	ldr	r3, [pc, #60]	@ (8001b90 <game_init+0x2a8>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4a0e      	ldr	r2, [pc, #56]	@ (8001b90 <game_init+0x2a8>)
 8001b58:	7851      	ldrb	r1, [r2, #1]
 8001b5a:	f24a 6251 	movw	r2, #42577	@ 0xa651
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 ff73 	bl	8002a4a <ghost_draw>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	20000144 	.word	0x20000144
 8001b74:	080097a4 	.word	0x080097a4
 8001b78:	080067ec 	.word	0x080067ec
 8001b7c:	08006808 	.word	0x08006808
 8001b80:	20000118 	.word	0x20000118
 8001b84:	20000124 	.word	0x20000124
 8001b88:	2000012c 	.word	0x2000012c
 8001b8c:	20000134 	.word	0x20000134
 8001b90:	2000013c 	.word	0x2000013c

08001b94 <game_process>:
 * @param  	None
 * @note  	Call in loop (main) every 50ms
 * @retval 	None
 */
void game_process(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if(game_loop)
 8001b98:	4b63      	ldr	r3, [pc, #396]	@ (8001d28 <game_process+0x194>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80a9 	beq.w	8001cf4 <game_process+0x160>
	{
		static uint8_t counter_game = 0;
		counter_game = (counter_game + 1) % 20;
 8001ba2:	4b62      	ldr	r3, [pc, #392]	@ (8001d2c <game_process+0x198>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <game_process+0x19c>)
 8001baa:	fb83 1302 	smull	r1, r3, r3, r2
 8001bae:	10d9      	asrs	r1, r3, #3
 8001bb0:	17d3      	asrs	r3, r2, #31
 8001bb2:	1ac9      	subs	r1, r1, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	1ad1      	subs	r1, r2, r3
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <game_process+0x198>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		pacman_direction_process(); // Put this function here to read buttons.
 8001bc4:	f000 faf2 	bl	80021ac <pacman_direction_process>
		if ((button_count[15] + 1) % 60 == 0)
 8001bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d34 <game_process+0x1a0>)
 8001bca:	8bdb      	ldrh	r3, [r3, #30]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	4b5a      	ldr	r3, [pc, #360]	@ (8001d38 <game_process+0x1a4>)
 8001bd0:	fb83 1302 	smull	r1, r3, r3, r2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	1159      	asrs	r1, r3, #5
 8001bd8:	17d3      	asrs	r3, r2, #31
 8001bda:	1ac9      	subs	r1, r1, r3
 8001bdc:	460b      	mov	r3, r1
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a5b      	subs	r3, r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	1ad1      	subs	r1, r2, r3
 8001be6:	2900      	cmp	r1, #0
 8001be8:	d102      	bne.n	8001bf0 <game_process+0x5c>
		{
			game_init();
 8001bea:	f7ff fe7d 	bl	80018e8 <game_init>
			return;
 8001bee:	e09a      	b.n	8001d26 <game_process+0x192>
		}

		if ((counter_game % 5) == 0)
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <game_process+0x198>)
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	4b51      	ldr	r3, [pc, #324]	@ (8001d3c <game_process+0x1a8>)
 8001bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bfa:	0899      	lsrs	r1, r3, #2
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <game_process+0x8a>
		{ // update every 250ms
			pacman_moving_process();
 8001c0a:	f000 faf9 	bl	8002200 <pacman_moving_process>
			ghost_direction_process();
 8001c0e:	f000 fb9f 	bl	8002350 <ghost_direction_process>
			ghost_moving_process();
 8001c12:	f000 fc37 	bl	8002484 <ghost_moving_process>

			game_draw();
 8001c16:	f000 f89b 	bl	8001d50 <game_draw>

			game_handler();
 8001c1a:	f000 fa11 	bl	8002040 <game_handler>
		}

	//	blink led according to points
		if (pacman.score < TOTAL_SCORE * 30 / 100)
 8001c1e:	4b48      	ldr	r3, [pc, #288]	@ (8001d40 <game_process+0x1ac>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	2164      	movs	r1, #100	@ 0x64
 8001c24:	460b      	mov	r3, r1
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4945      	ldr	r1, [pc, #276]	@ (8001d44 <game_process+0x1b0>)
 8001c2e:	fb81 0103 	smull	r0, r1, r1, r3
 8001c32:	1149      	asrs	r1, r1, #5
 8001c34:	17db      	asrs	r3, r3, #31
 8001c36:	1acb      	subs	r3, r1, r3
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	da12      	bge.n	8001c62 <game_process+0xce>
		{
			if (counter_game == 0)
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <game_process+0x198>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d170      	bne.n	8001d26 <game_process+0x192>
			{
				HAL_GPIO_TogglePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin);
 8001c44:	2120      	movs	r1, #32
 8001c46:	4840      	ldr	r0, [pc, #256]	@ (8001d48 <game_process+0x1b4>)
 8001c48:	f001 fe19 	bl	800387e <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2110      	movs	r1, #16
 8001c50:	483d      	ldr	r0, [pc, #244]	@ (8001d48 <game_process+0x1b4>)
 8001c52:	f001 fdfb 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2140      	movs	r1, #64	@ 0x40
 8001c5a:	483b      	ldr	r0, [pc, #236]	@ (8001d48 <game_process+0x1b4>)
 8001c5c:	f001 fdf6 	bl	800384c <HAL_GPIO_WritePin>
 8001c60:	e061      	b.n	8001d26 <game_process+0x192>
			}
		}
		else if (pacman.score >= TOTAL_SCORE * 75 / 100)
 8001c62:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <game_process+0x1ac>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	2164      	movs	r1, #100	@ 0x64
 8001c68:	460b      	mov	r3, r1
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	0119      	lsls	r1, r3, #4
 8001c70:	1acb      	subs	r3, r1, r3
 8001c72:	4934      	ldr	r1, [pc, #208]	@ (8001d44 <game_process+0x1b0>)
 8001c74:	fb81 0103 	smull	r0, r1, r1, r3
 8001c78:	1149      	asrs	r1, r1, #5
 8001c7a:	17db      	asrs	r3, r3, #31
 8001c7c:	1acb      	subs	r3, r1, r3
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	db1b      	blt.n	8001cba <game_process+0x126>
		{
			if ((counter_game % 5) == 0)
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <game_process+0x198>)
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <game_process+0x1a8>)
 8001c88:	fba3 1302 	umull	r1, r3, r3, r2
 8001c8c:	0899      	lsrs	r1, r3, #2
 8001c8e:	460b      	mov	r3, r1
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d144      	bne.n	8001d26 <game_process+0x192>
			{
				HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	482a      	ldr	r0, [pc, #168]	@ (8001d48 <game_process+0x1b4>)
 8001ca0:	f001 fded 	bl	800387e <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	4827      	ldr	r0, [pc, #156]	@ (8001d48 <game_process+0x1b4>)
 8001caa:	f001 fdcf 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2140      	movs	r1, #64	@ 0x40
 8001cb2:	4825      	ldr	r0, [pc, #148]	@ (8001d48 <game_process+0x1b4>)
 8001cb4:	f001 fdca 	bl	800384c <HAL_GPIO_WritePin>
 8001cb8:	e035      	b.n	8001d26 <game_process+0x192>
			}
		}
		else
		{
			if ((counter_game % 10) == 0)
 8001cba:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <game_process+0x198>)
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <game_process+0x1a8>)
 8001cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc4:	08d9      	lsrs	r1, r3, #3
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d127      	bne.n	8001d26 <game_process+0x192>
			{
				HAL_GPIO_TogglePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin);
 8001cd6:	2140      	movs	r1, #64	@ 0x40
 8001cd8:	481b      	ldr	r0, [pc, #108]	@ (8001d48 <game_process+0x1b4>)
 8001cda:	f001 fdd0 	bl	800387e <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <game_process+0x1b4>)
 8001ce4:	f001 fdb2 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2120      	movs	r1, #32
 8001cec:	4816      	ldr	r0, [pc, #88]	@ (8001d48 <game_process+0x1b4>)
 8001cee:	f001 fdad 	bl	800384c <HAL_GPIO_WritePin>
 8001cf2:	e018      	b.n	8001d26 <game_process+0x192>
		}
	}
	else
	{
		static uint8_t counter_game = 0;
		counter_game = (counter_game + 1) % 60;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <game_process+0x1b8>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <game_process+0x1a4>)
 8001cfc:	fb83 1302 	smull	r1, r3, r3, r2
 8001d00:	4413      	add	r3, r2
 8001d02:	1159      	asrs	r1, r3, #5
 8001d04:	17d3      	asrs	r3, r2, #31
 8001d06:	1ac9      	subs	r1, r1, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a5b      	subs	r3, r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	1ad1      	subs	r1, r2, r3
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <game_process+0x1b8>)
 8001d16:	701a      	strb	r2, [r3, #0]

		if(counter_game == 0)
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <game_process+0x1b8>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <game_process+0x192>
		{
			game_init();
 8001d20:	f7ff fde2 	bl	80018e8 <game_init>
			return;
 8001d24:	bf00      	nop
		}
	}
}
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	20000225 	.word	0x20000225
 8001d30:	66666667 	.word	0x66666667
 8001d34:	20000098 	.word	0x20000098
 8001d38:	88888889 	.word	0x88888889
 8001d3c:	cccccccd 	.word	0xcccccccd
 8001d40:	20000118 	.word	0x20000118
 8001d44:	51eb851f 	.word	0x51eb851f
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	20000226 	.word	0x20000226

08001d50 <game_draw>:

/* Private Functions ---------------------------------------------------------*/
void game_draw(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	if (pacman.direction != STOP  || pacman.direction != STOP)
 8001d54:	4b61      	ldr	r3, [pc, #388]	@ (8001edc <game_draw+0x18c>)
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <game_draw+0x14>
 8001d5c:	4b5f      	ldr	r3, [pc, #380]	@ (8001edc <game_draw+0x18c>)
 8001d5e:	791b      	ldrb	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d011      	beq.n	8001d88 <game_draw+0x38>
	{
		pacman_draw(pacman.i_pre, pacman.j_pre, BACKGROUND_COLOR);
 8001d64:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <game_draw+0x18c>)
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	4a5c      	ldr	r2, [pc, #368]	@ (8001edc <game_draw+0x18c>)
 8001d6a:	78d1      	ldrb	r1, [r2, #3]
 8001d6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fe4f 	bl	8002a14 <pacman_draw>
		pacman_draw(pacman.i, pacman.j, PACMAN_COLOR);
 8001d76:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <game_draw+0x18c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <game_draw+0x18c>)
 8001d7c:	7851      	ldrb	r1, [r2, #1]
 8001d7e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fe46 	bl	8002a14 <pacman_draw>
	}

	ghost_draw(ghost_0.i_pre, ghost_0.j_pre, BACKGROUND_COLOR);
 8001d88:	4b55      	ldr	r3, [pc, #340]	@ (8001ee0 <game_draw+0x190>)
 8001d8a:	789b      	ldrb	r3, [r3, #2]
 8001d8c:	4a54      	ldr	r2, [pc, #336]	@ (8001ee0 <game_draw+0x190>)
 8001d8e:	78d1      	ldrb	r1, [r2, #3]
 8001d90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fe58 	bl	8002a4a <ghost_draw>
	if(maze.cells[ghost_0.i_pre][ghost_0.j_pre] != NONE)
 8001d9a:	4b51      	ldr	r3, [pc, #324]	@ (8001ee0 <game_draw+0x190>)
 8001d9c:	789b      	ldrb	r3, [r3, #2]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <game_draw+0x190>)
 8001da2:	78db      	ldrb	r3, [r3, #3]
 8001da4:	4618      	mov	r0, r3
 8001da6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <game_draw+0x194>)
 8001da8:	460b      	mov	r3, r1
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	4413      	add	r3, r2
 8001db0:	4403      	add	r3, r0
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <game_draw+0x7a>
	{
		pac_dot_draw(ghost_0.i_pre, ghost_0.j_pre, PAC_DOTS_COLOR);
 8001db8:	4b49      	ldr	r3, [pc, #292]	@ (8001ee0 <game_draw+0x190>)
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	4a48      	ldr	r2, [pc, #288]	@ (8001ee0 <game_draw+0x190>)
 8001dbe:	78d1      	ldrb	r1, [r2, #3]
 8001dc0:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fdd5 	bl	8002974 <pac_dot_draw>
	}
	ghost_draw(ghost_0.i, ghost_0.j, GHOST_0_COLOR);
 8001dca:	4b45      	ldr	r3, [pc, #276]	@ (8001ee0 <game_draw+0x190>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4a44      	ldr	r2, [pc, #272]	@ (8001ee0 <game_draw+0x190>)
 8001dd0:	7851      	ldrb	r1, [r2, #1]
 8001dd2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fe37 	bl	8002a4a <ghost_draw>

	ghost_draw(ghost_1.i_pre, ghost_1.j_pre, BACKGROUND_COLOR);
 8001ddc:	4b42      	ldr	r3, [pc, #264]	@ (8001ee8 <game_draw+0x198>)
 8001dde:	789b      	ldrb	r3, [r3, #2]
 8001de0:	4a41      	ldr	r2, [pc, #260]	@ (8001ee8 <game_draw+0x198>)
 8001de2:	78d1      	ldrb	r1, [r2, #3]
 8001de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fe2e 	bl	8002a4a <ghost_draw>
	if(maze.cells[ghost_1.i_pre][ghost_1.j_pre] == PAC_DOT)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee8 <game_draw+0x198>)
 8001df0:	789b      	ldrb	r3, [r3, #2]
 8001df2:	4619      	mov	r1, r3
 8001df4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <game_draw+0x198>)
 8001df6:	78db      	ldrb	r3, [r3, #3]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee4 <game_draw+0x194>)
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a5b      	subs	r3, r3, r1
 8001e02:	4413      	add	r3, r2
 8001e04:	4403      	add	r3, r0
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <game_draw+0xce>
	{
		pac_dot_draw(ghost_1.i_pre, ghost_1.j_pre, PAC_DOTS_COLOR);
 8001e0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <game_draw+0x198>)
 8001e0e:	789b      	ldrb	r3, [r3, #2]
 8001e10:	4a35      	ldr	r2, [pc, #212]	@ (8001ee8 <game_draw+0x198>)
 8001e12:	78d1      	ldrb	r1, [r2, #3]
 8001e14:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fdab 	bl	8002974 <pac_dot_draw>
	}
	ghost_draw(ghost_1.i, ghost_1.j, GHOST_1_COLOR);
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <game_draw+0x198>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4a31      	ldr	r2, [pc, #196]	@ (8001ee8 <game_draw+0x198>)
 8001e24:	7851      	ldrb	r1, [r2, #1]
 8001e26:	2200      	movs	r2, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fe0e 	bl	8002a4a <ghost_draw>

	ghost_draw(ghost_2.i_pre, ghost_2.j_pre, BACKGROUND_COLOR);
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <game_draw+0x19c>)
 8001e30:	789b      	ldrb	r3, [r3, #2]
 8001e32:	4a2e      	ldr	r2, [pc, #184]	@ (8001eec <game_draw+0x19c>)
 8001e34:	78d1      	ldrb	r1, [r2, #3]
 8001e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fe05 	bl	8002a4a <ghost_draw>
	if(maze.cells[ghost_2.i_pre][ghost_2.j_pre] != NONE)
 8001e40:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <game_draw+0x19c>)
 8001e42:	789b      	ldrb	r3, [r3, #2]
 8001e44:	4619      	mov	r1, r3
 8001e46:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <game_draw+0x19c>)
 8001e48:	78db      	ldrb	r3, [r3, #3]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ee4 <game_draw+0x194>)
 8001e4e:	460b      	mov	r3, r1
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a5b      	subs	r3, r3, r1
 8001e54:	4413      	add	r3, r2
 8001e56:	4403      	add	r3, r0
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <game_draw+0x120>
	{
		pac_dot_draw(ghost_2.i_pre, ghost_2.j_pre, PAC_DOTS_COLOR);
 8001e5e:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <game_draw+0x19c>)
 8001e60:	789b      	ldrb	r3, [r3, #2]
 8001e62:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <game_draw+0x19c>)
 8001e64:	78d1      	ldrb	r1, [r2, #3]
 8001e66:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fd82 	bl	8002974 <pac_dot_draw>
	}
	ghost_draw(ghost_2.i, ghost_2.j, GHOST_2_COLOR);
 8001e70:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <game_draw+0x19c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <game_draw+0x19c>)
 8001e76:	7851      	ldrb	r1, [r2, #1]
 8001e78:	f64f 4207 	movw	r2, #64519	@ 0xfc07
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fde4 	bl	8002a4a <ghost_draw>

	ghost_draw(ghost_3.i_pre, ghost_3.j_pre, BACKGROUND_COLOR);
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <game_draw+0x1a0>)
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef0 <game_draw+0x1a0>)
 8001e88:	78d1      	ldrb	r1, [r2, #3]
 8001e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fddb 	bl	8002a4a <ghost_draw>
	if(maze.cells[ghost_3.i_pre][ghost_3.j_pre] != NONE)
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <game_draw+0x1a0>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <game_draw+0x1a0>)
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <game_draw+0x194>)
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	1a5b      	subs	r3, r3, r1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4403      	add	r3, r0
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <game_draw+0x174>
	{
		pac_dot_draw(ghost_3.i_pre, ghost_3.j_pre, PAC_DOTS_COLOR);
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <game_draw+0x1a0>)
 8001eb4:	789b      	ldrb	r3, [r3, #2]
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <game_draw+0x1a0>)
 8001eb8:	78d1      	ldrb	r1, [r2, #3]
 8001eba:	f64b 4240 	movw	r2, #48192	@ 0xbc40
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fd58 	bl	8002974 <pac_dot_draw>
	}
	ghost_draw(ghost_3.i, ghost_3.j, GHOST_3_COLOR);
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <game_draw+0x1a0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <game_draw+0x1a0>)
 8001eca:	7851      	ldrb	r1, [r2, #1]
 8001ecc:	f24a 6251 	movw	r2, #42577	@ 0xa651
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f000 fdba 	bl	8002a4a <ghost_draw>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000118 	.word	0x20000118
 8001ee0:	20000124 	.word	0x20000124
 8001ee4:	20000144 	.word	0x20000144
 8001ee8:	2000012c 	.word	0x2000012c
 8001eec:	20000134 	.word	0x20000134
 8001ef0:	2000013c 	.word	0x2000013c

08001ef4 <is_loss_condition_met>:

/**
 * handle game event
 */
uint8_t is_loss_condition_met()
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
	return ((ghost_0.i == pacman.i && ghost_0.j == pacman.j) ||
 8001ef8:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <is_loss_condition_met+0xd8>)
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
			(ghost_1.i == pacman.i && ghost_1.j == pacman.j) ||
			(ghost_2.i == pacman.i && ghost_2.j == pacman.j) ||
			(ghost_3.i == pacman.i && ghost_3.j == pacman.j) ||
			(ghost_0.i_pre == pacman.i_pre && ghost_0.j_pre == pacman.j_pre) ||
			(ghost_1.i_pre == pacman.i_pre && ghost_1.j_pre == pacman.j_pre) ||
			(ghost_2.i_pre == pacman.i_pre && ghost_2.j_pre == pacman.j_pre) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d105      	bne.n	8001f10 <is_loss_condition_met+0x1c>
	return ((ghost_0.i == pacman.i && ghost_0.j == pacman.j) ||
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <is_loss_condition_met+0xd8>)
 8001f06:	785a      	ldrb	r2, [r3, #1]
 8001f08:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d053      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_1.i == pacman.i && ghost_1.j == pacman.j) ||
 8001f10:	4b30      	ldr	r3, [pc, #192]	@ (8001fd4 <is_loss_condition_met+0xe0>)
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
	return ((ghost_0.i == pacman.i && ghost_0.j == pacman.j) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d105      	bne.n	8001f28 <is_loss_condition_met+0x34>
			(ghost_1.i == pacman.i && ghost_1.j == pacman.j) ||
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <is_loss_condition_met+0xe0>)
 8001f1e:	785a      	ldrb	r2, [r3, #1]
 8001f20:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d047      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_2.i == pacman.i && ghost_2.j == pacman.j) ||
 8001f28:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <is_loss_condition_met+0xe4>)
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
			(ghost_1.i == pacman.i && ghost_1.j == pacman.j) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d105      	bne.n	8001f40 <is_loss_condition_met+0x4c>
			(ghost_2.i == pacman.i && ghost_2.j == pacman.j) ||
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <is_loss_condition_met+0xe4>)
 8001f36:	785a      	ldrb	r2, [r3, #1]
 8001f38:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d03b      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_3.i == pacman.i && ghost_3.j == pacman.j) ||
 8001f40:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <is_loss_condition_met+0xe8>)
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
			(ghost_2.i == pacman.i && ghost_2.j == pacman.j) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d105      	bne.n	8001f58 <is_loss_condition_met+0x64>
			(ghost_3.i == pacman.i && ghost_3.j == pacman.j) ||
 8001f4c:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <is_loss_condition_met+0xe8>)
 8001f4e:	785a      	ldrb	r2, [r3, #1]
 8001f50:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d02f      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_0.i_pre == pacman.i_pre && ghost_0.j_pre == pacman.j_pre) ||
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <is_loss_condition_met+0xd8>)
 8001f5a:	789a      	ldrb	r2, [r3, #2]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f5e:	789b      	ldrb	r3, [r3, #2]
			(ghost_3.i == pacman.i && ghost_3.j == pacman.j) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d105      	bne.n	8001f70 <is_loss_condition_met+0x7c>
			(ghost_0.i_pre == pacman.i_pre && ghost_0.j_pre == pacman.j_pre) ||
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <is_loss_condition_met+0xd8>)
 8001f66:	78da      	ldrb	r2, [r3, #3]
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f6a:	78db      	ldrb	r3, [r3, #3]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d023      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_1.i_pre == pacman.i_pre && ghost_1.j_pre == pacman.j_pre) ||
 8001f70:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <is_loss_condition_met+0xe0>)
 8001f72:	789a      	ldrb	r2, [r3, #2]
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f76:	789b      	ldrb	r3, [r3, #2]
			(ghost_0.i_pre == pacman.i_pre && ghost_0.j_pre == pacman.j_pre) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d105      	bne.n	8001f88 <is_loss_condition_met+0x94>
			(ghost_1.i_pre == pacman.i_pre && ghost_1.j_pre == pacman.j_pre) ||
 8001f7c:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <is_loss_condition_met+0xe0>)
 8001f7e:	78da      	ldrb	r2, [r3, #3]
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f82:	78db      	ldrb	r3, [r3, #3]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d017      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_2.i_pre == pacman.i_pre && ghost_2.j_pre == pacman.j_pre) ||
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <is_loss_condition_met+0xe4>)
 8001f8a:	789a      	ldrb	r2, [r3, #2]
 8001f8c:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f8e:	789b      	ldrb	r3, [r3, #2]
			(ghost_1.i_pre == pacman.i_pre && ghost_1.j_pre == pacman.j_pre) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d105      	bne.n	8001fa0 <is_loss_condition_met+0xac>
			(ghost_2.i_pre == pacman.i_pre && ghost_2.j_pre == pacman.j_pre) ||
 8001f94:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <is_loss_condition_met+0xe4>)
 8001f96:	78da      	ldrb	r2, [r3, #3]
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001f9a:	78db      	ldrb	r3, [r3, #3]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d00b      	beq.n	8001fb8 <is_loss_condition_met+0xc4>
			(ghost_3.i_pre == pacman.i_pre && ghost_3.j_pre == pacman.j_pre)   );
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <is_loss_condition_met+0xe8>)
 8001fa2:	789a      	ldrb	r2, [r3, #2]
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001fa6:	789b      	ldrb	r3, [r3, #2]
			(ghost_2.i_pre == pacman.i_pre && ghost_2.j_pre == pacman.j_pre) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <is_loss_condition_met+0xc8>
			(ghost_3.i_pre == pacman.i_pre && ghost_3.j_pre == pacman.j_pre)   );
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <is_loss_condition_met+0xe8>)
 8001fae:	78da      	ldrb	r2, [r3, #3]
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <is_loss_condition_met+0xdc>)
 8001fb2:	78db      	ldrb	r3, [r3, #3]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d101      	bne.n	8001fbc <is_loss_condition_met+0xc8>
			(ghost_2.i_pre == pacman.i_pre && ghost_2.j_pre == pacman.j_pre) ||
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <is_loss_condition_met+0xca>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000124 	.word	0x20000124
 8001fd0:	20000118 	.word	0x20000118
 8001fd4:	2000012c 	.word	0x2000012c
 8001fd8:	20000134 	.word	0x20000134
 8001fdc:	2000013c 	.word	0x2000013c

08001fe0 <is_win_condition_met>:
uint8_t is_win_condition_met()
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
	return (pacman.score >= TOTAL_SCORE);
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <is_win_condition_met+0x20>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2264      	movs	r2, #100	@ 0x64
 8001fea:	4293      	cmp	r3, r2
 8001fec:	bfac      	ite	ge
 8001fee:	2301      	movge	r3, #1
 8001ff0:	2300      	movlt	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000118 	.word	0x20000118

08002004 <has_pacman_eaten_dot>:
uint8_t has_pacman_eaten_dot()
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
	return maze.cells[pacman.i][pacman.j] == PAC_DOT;
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <has_pacman_eaten_dot+0x34>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <has_pacman_eaten_dot+0x34>)
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	4618      	mov	r0, r3
 8002014:	4a09      	ldr	r2, [pc, #36]	@ (800203c <has_pacman_eaten_dot+0x38>)
 8002016:	460b      	mov	r3, r1
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a5b      	subs	r3, r3, r1
 800201c:	4413      	add	r3, r2
 800201e:	4403      	add	r3, r0
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000118 	.word	0x20000118
 800203c:	20000144 	.word	0x20000144

08002040 <game_handler>:
void game_handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af04      	add	r7, sp, #16
	if (is_loss_condition_met())
 8002046:	f7ff ff55 	bl	8001ef4 <is_loss_condition_met>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d014      	beq.n	800207a <game_handler+0x3a>
	{
		lcd_clear(BACKGROUND_COLOR); // set bg color to white
 8002050:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002054:	f7fe fd42 	bl	8000adc <lcd_clear>
		lcd_show_string(80, 100, "YOU LOSE", BLACK, BACKGROUND_COLOR, 16, 0);
 8002058:	2300      	movs	r3, #0
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	2310      	movs	r3, #16
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2300      	movs	r3, #0
 8002068:	4a48      	ldr	r2, [pc, #288]	@ (800218c <game_handler+0x14c>)
 800206a:	2164      	movs	r1, #100	@ 0x64
 800206c:	2050      	movs	r0, #80	@ 0x50
 800206e:	f7ff fa55 	bl	800151c <lcd_show_string>

		game_loop = false;
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <game_handler+0x150>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
		led_7seg_set_digit(pacman.score % 10, 3, 0);

		lcd_show_int_num(80, 270, pacman.score, 2, RED, BACKGROUND_COLOR, 16);
	}
	else;
}
 8002078:	e085      	b.n	8002186 <game_handler+0x146>
	else if (is_win_condition_met())
 800207a:	f7ff ffb1 	bl	8001fe0 <is_win_condition_met>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d014      	beq.n	80020ae <game_handler+0x6e>
		lcd_clear(BACKGROUND_COLOR); // set bg color to white
 8002084:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002088:	f7fe fd28 	bl	8000adc <lcd_clear>
		lcd_show_string(80, 100, "YOU WIN", BLACK, BACKGROUND_COLOR, 16, 0);
 800208c:	2300      	movs	r3, #0
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	2310      	movs	r3, #16
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	4a3d      	ldr	r2, [pc, #244]	@ (8002194 <game_handler+0x154>)
 800209e:	2164      	movs	r1, #100	@ 0x64
 80020a0:	2050      	movs	r0, #80	@ 0x50
 80020a2:	f7ff fa3b 	bl	800151c <lcd_show_string>
		game_loop = false;
 80020a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <game_handler+0x150>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
}
 80020ac:	e06b      	b.n	8002186 <game_handler+0x146>
	else if (has_pacman_eaten_dot())
 80020ae:	f7ff ffa9 	bl	8002004 <has_pacman_eaten_dot>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d066      	beq.n	8002186 <game_handler+0x146>
		maze.cells[pacman.i][pacman.j] = NONE;
 80020b8:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <game_handler+0x158>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4619      	mov	r1, r3
 80020be:	4b36      	ldr	r3, [pc, #216]	@ (8002198 <game_handler+0x158>)
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	4618      	mov	r0, r3
 80020c4:	4a35      	ldr	r2, [pc, #212]	@ (800219c <game_handler+0x15c>)
 80020c6:	460b      	mov	r3, r1
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a5b      	subs	r3, r3, r1
 80020cc:	4413      	add	r3, r2
 80020ce:	4403      	add	r3, r0
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
		pacman.score += POINTS_PER_DOT;
 80020d4:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <game_handler+0x158>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2201      	movs	r2, #1
 80020da:	4413      	add	r3, r2
 80020dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002198 <game_handler+0x158>)
 80020de:	6093      	str	r3, [r2, #8]
		led_7seg_set_digit(pacman.score / 1000, 0, 0);
 80020e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <game_handler+0x158>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a2e      	ldr	r2, [pc, #184]	@ (80021a0 <game_handler+0x160>)
 80020e6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ea:	1192      	asrs	r2, r2, #6
 80020ec:	17db      	asrs	r3, r3, #31
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fb0d 	bl	8001714 <led_7seg_set_digit>
		led_7seg_set_digit((pacman.score / 100) % 10, 1, 0);
 80020fa:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <game_handler+0x158>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a29      	ldr	r2, [pc, #164]	@ (80021a4 <game_handler+0x164>)
 8002100:	fb82 1203 	smull	r1, r2, r2, r3
 8002104:	1152      	asrs	r2, r2, #5
 8002106:	17db      	asrs	r3, r3, #31
 8002108:	1ad2      	subs	r2, r2, r3
 800210a:	4b27      	ldr	r3, [pc, #156]	@ (80021a8 <game_handler+0x168>)
 800210c:	fb83 1302 	smull	r1, r3, r3, r2
 8002110:	1099      	asrs	r1, r3, #2
 8002112:	17d3      	asrs	r3, r2, #31
 8002114:	1ac8      	subs	r0, r1, r3
 8002116:	4603      	mov	r3, r0
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4403      	add	r3, r0
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	1ad0      	subs	r0, r2, r3
 8002120:	2200      	movs	r2, #0
 8002122:	2101      	movs	r1, #1
 8002124:	f7ff faf6 	bl	8001714 <led_7seg_set_digit>
		led_7seg_set_digit(pacman.score / 10, 2, 0);
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <game_handler+0x158>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a1e      	ldr	r2, [pc, #120]	@ (80021a8 <game_handler+0x168>)
 800212e:	fb82 1203 	smull	r1, r2, r2, r3
 8002132:	1092      	asrs	r2, r2, #2
 8002134:	17db      	asrs	r3, r3, #31
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2200      	movs	r2, #0
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fae9 	bl	8001714 <led_7seg_set_digit>
		led_7seg_set_digit(pacman.score % 10, 3, 0);
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <game_handler+0x158>)
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <game_handler+0x168>)
 8002148:	fb83 1302 	smull	r1, r3, r3, r2
 800214c:	1099      	asrs	r1, r3, #2
 800214e:	17d3      	asrs	r3, r2, #31
 8002150:	1ac8      	subs	r0, r1, r3
 8002152:	4603      	mov	r3, r0
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4403      	add	r3, r0
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	1ad0      	subs	r0, r2, r3
 800215c:	2200      	movs	r2, #0
 800215e:	2103      	movs	r1, #3
 8002160:	f7ff fad8 	bl	8001714 <led_7seg_set_digit>
		lcd_show_int_num(80, 270, pacman.score, 2, RED, BACKGROUND_COLOR, 16);
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <game_handler+0x158>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	b29a      	uxth	r2, r3
 800216a:	2310      	movs	r3, #16
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2302      	movs	r3, #2
 800217c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002180:	2050      	movs	r0, #80	@ 0x50
 8002182:	f7fe fed1 	bl	8000f28 <lcd_show_int_num>
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	08006810 	.word	0x08006810
 8002190:	20000010 	.word	0x20000010
 8002194:	0800681c 	.word	0x0800681c
 8002198:	20000118 	.word	0x20000118
 800219c:	20000144 	.word	0x20000144
 80021a0:	10624dd3 	.word	0x10624dd3
 80021a4:	51eb851f 	.word	0x51eb851f
 80021a8:	66666667 	.word	0x66666667

080021ac <pacman_direction_process>:

void pacman_direction_process(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	if (isButtonUp())
 80021b0:	f000 fc66 	bl	8002a80 <isButtonUp>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <pacman_direction_process+0x16>
	{
		pacman.direction = UP;
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <pacman_direction_process+0x50>)
 80021bc:	2201      	movs	r2, #1
 80021be:	711a      	strb	r2, [r3, #4]
	else if (isButtonRight())
	{
		pacman.direction = RIGHT;
	}
	else;
}
 80021c0:	e019      	b.n	80021f6 <pacman_direction_process+0x4a>
	else if (isButtonDown())
 80021c2:	f000 fc6d 	bl	8002aa0 <isButtonDown>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <pacman_direction_process+0x28>
		pacman.direction = DOWN;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <pacman_direction_process+0x50>)
 80021ce:	2202      	movs	r2, #2
 80021d0:	711a      	strb	r2, [r3, #4]
}
 80021d2:	e010      	b.n	80021f6 <pacman_direction_process+0x4a>
	else if (isButtonLeft())
 80021d4:	f000 fc74 	bl	8002ac0 <isButtonLeft>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <pacman_direction_process+0x3a>
		pacman.direction = LEFT;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <pacman_direction_process+0x50>)
 80021e0:	2203      	movs	r2, #3
 80021e2:	711a      	strb	r2, [r3, #4]
}
 80021e4:	e007      	b.n	80021f6 <pacman_direction_process+0x4a>
	else if (isButtonRight())
 80021e6:	f000 fc7b 	bl	8002ae0 <isButtonRight>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <pacman_direction_process+0x4a>
		pacman.direction = RIGHT;
 80021f0:	4b02      	ldr	r3, [pc, #8]	@ (80021fc <pacman_direction_process+0x50>)
 80021f2:	2204      	movs	r2, #4
 80021f4:	711a      	strb	r2, [r3, #4]
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000118 	.word	0x20000118

08002200 <pacman_moving_process>:

void pacman_moving_process(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
	if (pacman.direction == UP && pacman.i > 0 && maze.cells[pacman.i - 1][pacman.j] != WALL)
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <pacman_moving_process+0x148>)
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d121      	bne.n	8002250 <pacman_moving_process+0x50>
 800220c:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <pacman_moving_process+0x148>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01d      	beq.n	8002250 <pacman_moving_process+0x50>
 8002214:	4b4c      	ldr	r3, [pc, #304]	@ (8002348 <pacman_moving_process+0x148>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <pacman_moving_process+0x148>)
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	4618      	mov	r0, r3
 8002220:	494a      	ldr	r1, [pc, #296]	@ (800234c <pacman_moving_process+0x14c>)
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	440b      	add	r3, r1
 800222a:	4403      	add	r3, r0
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d00e      	beq.n	8002250 <pacman_moving_process+0x50>
	{
		pacman.i_pre = pacman.i;
 8002232:	4b45      	ldr	r3, [pc, #276]	@ (8002348 <pacman_moving_process+0x148>)
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	4b44      	ldr	r3, [pc, #272]	@ (8002348 <pacman_moving_process+0x148>)
 8002238:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 800223a:	4b43      	ldr	r3, [pc, #268]	@ (8002348 <pacman_moving_process+0x148>)
 800223c:	785a      	ldrb	r2, [r3, #1]
 800223e:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <pacman_moving_process+0x148>)
 8002240:	70da      	strb	r2, [r3, #3]
		pacman.i--;
 8002242:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <pacman_moving_process+0x148>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	3b01      	subs	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <pacman_moving_process+0x148>)
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e075      	b.n	800233c <pacman_moving_process+0x13c>
	}
	else if (pacman.direction == DOWN && pacman.i < MAZE_ROW_N - 1 && maze.cells[pacman.i + 1][pacman.j] != WALL)
 8002250:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <pacman_moving_process+0x148>)
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d121      	bne.n	800229c <pacman_moving_process+0x9c>
 8002258:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <pacman_moving_process+0x148>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b0d      	cmp	r3, #13
 800225e:	d81d      	bhi.n	800229c <pacman_moving_process+0x9c>
 8002260:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <pacman_moving_process+0x148>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <pacman_moving_process+0x148>)
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	4618      	mov	r0, r3
 800226c:	4937      	ldr	r1, [pc, #220]	@ (800234c <pacman_moving_process+0x14c>)
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	440b      	add	r3, r1
 8002276:	4403      	add	r3, r0
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d00e      	beq.n	800229c <pacman_moving_process+0x9c>
	{
		pacman.i_pre = pacman.i;
 800227e:	4b32      	ldr	r3, [pc, #200]	@ (8002348 <pacman_moving_process+0x148>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <pacman_moving_process+0x148>)
 8002284:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 8002286:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <pacman_moving_process+0x148>)
 8002288:	785a      	ldrb	r2, [r3, #1]
 800228a:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <pacman_moving_process+0x148>)
 800228c:	70da      	strb	r2, [r3, #3]
		pacman.i++;
 800228e:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <pacman_moving_process+0x148>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <pacman_moving_process+0x148>)
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e04f      	b.n	800233c <pacman_moving_process+0x13c>
	}
	else if (pacman.direction == LEFT && pacman.j > 0 && maze.cells[pacman.i][pacman.j - 1] != WALL)
 800229c:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <pacman_moving_process+0x148>)
 800229e:	791b      	ldrb	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d121      	bne.n	80022e8 <pacman_moving_process+0xe8>
 80022a4:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <pacman_moving_process+0x148>)
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01d      	beq.n	80022e8 <pacman_moving_process+0xe8>
 80022ac:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <pacman_moving_process+0x148>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <pacman_moving_process+0x148>)
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	1e5a      	subs	r2, r3, #1
 80022b8:	4924      	ldr	r1, [pc, #144]	@ (800234c <pacman_moving_process+0x14c>)
 80022ba:	4603      	mov	r3, r0
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a1b      	subs	r3, r3, r0
 80022c0:	440b      	add	r3, r1
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d00e      	beq.n	80022e8 <pacman_moving_process+0xe8>
	{
		pacman.i_pre = pacman.i;
 80022ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <pacman_moving_process+0x148>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <pacman_moving_process+0x148>)
 80022d0:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002348 <pacman_moving_process+0x148>)
 80022d4:	785a      	ldrb	r2, [r3, #1]
 80022d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <pacman_moving_process+0x148>)
 80022d8:	70da      	strb	r2, [r3, #3]
		pacman.j--;
 80022da:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <pacman_moving_process+0x148>)
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	3b01      	subs	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <pacman_moving_process+0x148>)
 80022e4:	705a      	strb	r2, [r3, #1]
 80022e6:	e029      	b.n	800233c <pacman_moving_process+0x13c>
	}
	else if (pacman.direction == RIGHT && pacman.j < MAZE_COLUMN_N - 1 && maze.cells[pacman.i][pacman.j + 1] != WALL)
 80022e8:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <pacman_moving_process+0x148>)
 80022ea:	791b      	ldrb	r3, [r3, #4]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d121      	bne.n	8002334 <pacman_moving_process+0x134>
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <pacman_moving_process+0x148>)
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b0d      	cmp	r3, #13
 80022f6:	d81d      	bhi.n	8002334 <pacman_moving_process+0x134>
 80022f8:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <pacman_moving_process+0x148>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <pacman_moving_process+0x148>)
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	4911      	ldr	r1, [pc, #68]	@ (800234c <pacman_moving_process+0x14c>)
 8002306:	4603      	mov	r3, r0
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a1b      	subs	r3, r3, r0
 800230c:	440b      	add	r3, r1
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d00e      	beq.n	8002334 <pacman_moving_process+0x134>
	{
		pacman.i_pre = pacman.i;
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <pacman_moving_process+0x148>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <pacman_moving_process+0x148>)
 800231c:	709a      	strb	r2, [r3, #2]
		pacman.j_pre = pacman.j;
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <pacman_moving_process+0x148>)
 8002320:	785a      	ldrb	r2, [r3, #1]
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <pacman_moving_process+0x148>)
 8002324:	70da      	strb	r2, [r3, #3]
		pacman.j++;
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <pacman_moving_process+0x148>)
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	3301      	adds	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <pacman_moving_process+0x148>)
 8002330:	705a      	strb	r2, [r3, #1]
 8002332:	e003      	b.n	800233c <pacman_moving_process+0x13c>
	}
	else
	{
		pacman.direction = STOP;
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <pacman_moving_process+0x148>)
 8002336:	2200      	movs	r2, #0
 8002338:	711a      	strb	r2, [r3, #4]
	}
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000118 	.word	0x20000118
 800234c:	20000144 	.word	0x20000144

08002350 <ghost_direction_process>:

void ghost_direction_process(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
	int random_direction = rand() % 4;
 8002356:	f003 fa4f 	bl	80057f8 <rand>
 800235a:	4603      	mov	r3, r0
 800235c:	425a      	negs	r2, r3
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	bf58      	it	pl
 8002368:	4253      	negpl	r3, r2
 800236a:	607b      	str	r3, [r7, #4]

	switch (random_direction)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d81a      	bhi.n	80023a8 <ghost_direction_process+0x58>
 8002372:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <ghost_direction_process+0x28>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	08002389 	.word	0x08002389
 800237c:	08002391 	.word	0x08002391
 8002380:	08002399 	.word	0x08002399
 8002384:	080023a1 	.word	0x080023a1
	{
	case 0:
		ghost_0.direction = UP;
 8002388:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <ghost_direction_process+0x124>)
 800238a:	2201      	movs	r2, #1
 800238c:	711a      	strb	r2, [r3, #4]
		break;
 800238e:	e00c      	b.n	80023aa <ghost_direction_process+0x5a>
	case 1:
		ghost_0.direction = DOWN;
 8002390:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <ghost_direction_process+0x124>)
 8002392:	2202      	movs	r2, #2
 8002394:	711a      	strb	r2, [r3, #4]
		break;
 8002396:	e008      	b.n	80023aa <ghost_direction_process+0x5a>
	case 2:
		ghost_0.direction = LEFT;
 8002398:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <ghost_direction_process+0x124>)
 800239a:	2203      	movs	r2, #3
 800239c:	711a      	strb	r2, [r3, #4]
		break;
 800239e:	e004      	b.n	80023aa <ghost_direction_process+0x5a>
	case 3:
		ghost_0.direction = RIGHT;
 80023a0:	4b34      	ldr	r3, [pc, #208]	@ (8002474 <ghost_direction_process+0x124>)
 80023a2:	2204      	movs	r2, #4
 80023a4:	711a      	strb	r2, [r3, #4]
		break;
 80023a6:	e000      	b.n	80023aa <ghost_direction_process+0x5a>
	default:
		break;
 80023a8:	bf00      	nop
	}

	switch (random_direction)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d81b      	bhi.n	80023e8 <ghost_direction_process+0x98>
 80023b0:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <ghost_direction_process+0x68>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023d1 	.word	0x080023d1
 80023c0:	080023d9 	.word	0x080023d9
 80023c4:	080023e1 	.word	0x080023e1
	{
	case 0:
		ghost_1.direction = DOWN;
 80023c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002478 <ghost_direction_process+0x128>)
 80023ca:	2202      	movs	r2, #2
 80023cc:	711a      	strb	r2, [r3, #4]
		break;
 80023ce:	e00c      	b.n	80023ea <ghost_direction_process+0x9a>
	case 1:
		ghost_1.direction = UP;
 80023d0:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <ghost_direction_process+0x128>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	711a      	strb	r2, [r3, #4]
		break;
 80023d6:	e008      	b.n	80023ea <ghost_direction_process+0x9a>
	case 2:
		ghost_1.direction = RIGHT;
 80023d8:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <ghost_direction_process+0x128>)
 80023da:	2204      	movs	r2, #4
 80023dc:	711a      	strb	r2, [r3, #4]
		break;
 80023de:	e004      	b.n	80023ea <ghost_direction_process+0x9a>
	case 3:
		ghost_1.direction = LEFT;
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <ghost_direction_process+0x128>)
 80023e2:	2203      	movs	r2, #3
 80023e4:	711a      	strb	r2, [r3, #4]
		break;
 80023e6:	e000      	b.n	80023ea <ghost_direction_process+0x9a>
	default:
		break;
 80023e8:	bf00      	nop
	}

	switch (random_direction)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d81b      	bhi.n	8002428 <ghost_direction_process+0xd8>
 80023f0:	a201      	add	r2, pc, #4	@ (adr r2, 80023f8 <ghost_direction_process+0xa8>)
 80023f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	08002409 	.word	0x08002409
 80023fc:	08002411 	.word	0x08002411
 8002400:	08002419 	.word	0x08002419
 8002404:	08002421 	.word	0x08002421
	{
	case 0:
		ghost_2.direction = LEFT;
 8002408:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <ghost_direction_process+0x12c>)
 800240a:	2203      	movs	r2, #3
 800240c:	711a      	strb	r2, [r3, #4]
		break;
 800240e:	e00c      	b.n	800242a <ghost_direction_process+0xda>
	case 1:
		ghost_2.direction = RIGHT;
 8002410:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <ghost_direction_process+0x12c>)
 8002412:	2204      	movs	r2, #4
 8002414:	711a      	strb	r2, [r3, #4]
		break;
 8002416:	e008      	b.n	800242a <ghost_direction_process+0xda>
	case 2:
		ghost_2.direction = UP;
 8002418:	4b18      	ldr	r3, [pc, #96]	@ (800247c <ghost_direction_process+0x12c>)
 800241a:	2201      	movs	r2, #1
 800241c:	711a      	strb	r2, [r3, #4]
		break;
 800241e:	e004      	b.n	800242a <ghost_direction_process+0xda>
	case 3:
		ghost_2.direction = DOWN;
 8002420:	4b16      	ldr	r3, [pc, #88]	@ (800247c <ghost_direction_process+0x12c>)
 8002422:	2202      	movs	r2, #2
 8002424:	711a      	strb	r2, [r3, #4]
		break;
 8002426:	e000      	b.n	800242a <ghost_direction_process+0xda>
	default:
		break;
 8002428:	bf00      	nop
	}

	switch (random_direction)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d81b      	bhi.n	8002468 <ghost_direction_process+0x118>
 8002430:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <ghost_direction_process+0xe8>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	08002451 	.word	0x08002451
 8002440:	08002459 	.word	0x08002459
 8002444:	08002461 	.word	0x08002461
	{
	case 0:
		ghost_3.direction = RIGHT;
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <ghost_direction_process+0x130>)
 800244a:	2204      	movs	r2, #4
 800244c:	711a      	strb	r2, [r3, #4]
		break;
 800244e:	e00c      	b.n	800246a <ghost_direction_process+0x11a>
	case 1:
		ghost_3.direction = LEFT;
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <ghost_direction_process+0x130>)
 8002452:	2203      	movs	r2, #3
 8002454:	711a      	strb	r2, [r3, #4]
		break;
 8002456:	e008      	b.n	800246a <ghost_direction_process+0x11a>
	case 2:
		ghost_3.direction = DOWN;
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <ghost_direction_process+0x130>)
 800245a:	2202      	movs	r2, #2
 800245c:	711a      	strb	r2, [r3, #4]
		break;
 800245e:	e004      	b.n	800246a <ghost_direction_process+0x11a>
	case 3:
		ghost_3.direction = UP;
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <ghost_direction_process+0x130>)
 8002462:	2201      	movs	r2, #1
 8002464:	711a      	strb	r2, [r3, #4]
		break;
 8002466:	e000      	b.n	800246a <ghost_direction_process+0x11a>
	default:
		break;
 8002468:	bf00      	nop
	}
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000124 	.word	0x20000124
 8002478:	2000012c 	.word	0x2000012c
 800247c:	20000134 	.word	0x20000134
 8002480:	2000013c 	.word	0x2000013c

08002484 <ghost_moving_process>:

void ghost_moving_process(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	if (ghost_0.direction == UP && ghost_0.i > 0 && maze.cells[ghost_0.i - 1][ghost_0.j] != WALL)
 8002488:	4b84      	ldr	r3, [pc, #528]	@ (800269c <ghost_moving_process+0x218>)
 800248a:	791b      	ldrb	r3, [r3, #4]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d121      	bne.n	80024d4 <ghost_moving_process+0x50>
 8002490:	4b82      	ldr	r3, [pc, #520]	@ (800269c <ghost_moving_process+0x218>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01d      	beq.n	80024d4 <ghost_moving_process+0x50>
 8002498:	4b80      	ldr	r3, [pc, #512]	@ (800269c <ghost_moving_process+0x218>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <ghost_moving_process+0x218>)
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	4618      	mov	r0, r3
 80024a4:	497e      	ldr	r1, [pc, #504]	@ (80026a0 <ghost_moving_process+0x21c>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	440b      	add	r3, r1
 80024ae:	4403      	add	r3, r0
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d00e      	beq.n	80024d4 <ghost_moving_process+0x50>
	{
		ghost_0.i_pre = ghost_0.i;
 80024b6:	4b79      	ldr	r3, [pc, #484]	@ (800269c <ghost_moving_process+0x218>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b78      	ldr	r3, [pc, #480]	@ (800269c <ghost_moving_process+0x218>)
 80024bc:	709a      	strb	r2, [r3, #2]
		ghost_0.j_pre = ghost_0.j;
 80024be:	4b77      	ldr	r3, [pc, #476]	@ (800269c <ghost_moving_process+0x218>)
 80024c0:	785a      	ldrb	r2, [r3, #1]
 80024c2:	4b76      	ldr	r3, [pc, #472]	@ (800269c <ghost_moving_process+0x218>)
 80024c4:	70da      	strb	r2, [r3, #3]
		ghost_0.i--;
 80024c6:	4b75      	ldr	r3, [pc, #468]	@ (800269c <ghost_moving_process+0x218>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b73      	ldr	r3, [pc, #460]	@ (800269c <ghost_moving_process+0x218>)
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	e070      	b.n	80025b6 <ghost_moving_process+0x132>
	}
	else if (ghost_0.direction == DOWN && ghost_0.i < MAZE_ROW_N - 1 && maze.cells[ghost_0.i + 1][ghost_0.j] != WALL)
 80024d4:	4b71      	ldr	r3, [pc, #452]	@ (800269c <ghost_moving_process+0x218>)
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d121      	bne.n	8002520 <ghost_moving_process+0x9c>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <ghost_moving_process+0x218>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b0d      	cmp	r3, #13
 80024e2:	d81d      	bhi.n	8002520 <ghost_moving_process+0x9c>
 80024e4:	4b6d      	ldr	r3, [pc, #436]	@ (800269c <ghost_moving_process+0x218>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <ghost_moving_process+0x218>)
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	4618      	mov	r0, r3
 80024f0:	496b      	ldr	r1, [pc, #428]	@ (80026a0 <ghost_moving_process+0x21c>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	440b      	add	r3, r1
 80024fa:	4403      	add	r3, r0
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d00e      	beq.n	8002520 <ghost_moving_process+0x9c>
	{
		ghost_0.i_pre = ghost_0.i;
 8002502:	4b66      	ldr	r3, [pc, #408]	@ (800269c <ghost_moving_process+0x218>)
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	4b65      	ldr	r3, [pc, #404]	@ (800269c <ghost_moving_process+0x218>)
 8002508:	709a      	strb	r2, [r3, #2]
		ghost_0.j_pre = ghost_0.j;
 800250a:	4b64      	ldr	r3, [pc, #400]	@ (800269c <ghost_moving_process+0x218>)
 800250c:	785a      	ldrb	r2, [r3, #1]
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <ghost_moving_process+0x218>)
 8002510:	70da      	strb	r2, [r3, #3]
		ghost_0.i++;
 8002512:	4b62      	ldr	r3, [pc, #392]	@ (800269c <ghost_moving_process+0x218>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	3301      	adds	r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b60      	ldr	r3, [pc, #384]	@ (800269c <ghost_moving_process+0x218>)
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e04a      	b.n	80025b6 <ghost_moving_process+0x132>
	}
	else if (ghost_0.direction == LEFT && ghost_0.j > 0 && maze.cells[ghost_0.i][ghost_0.j - 1] != WALL)
 8002520:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <ghost_moving_process+0x218>)
 8002522:	791b      	ldrb	r3, [r3, #4]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d121      	bne.n	800256c <ghost_moving_process+0xe8>
 8002528:	4b5c      	ldr	r3, [pc, #368]	@ (800269c <ghost_moving_process+0x218>)
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01d      	beq.n	800256c <ghost_moving_process+0xe8>
 8002530:	4b5a      	ldr	r3, [pc, #360]	@ (800269c <ghost_moving_process+0x218>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	4b59      	ldr	r3, [pc, #356]	@ (800269c <ghost_moving_process+0x218>)
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	4958      	ldr	r1, [pc, #352]	@ (80026a0 <ghost_moving_process+0x21c>)
 800253e:	4603      	mov	r3, r0
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a1b      	subs	r3, r3, r0
 8002544:	440b      	add	r3, r1
 8002546:	4413      	add	r3, r2
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d00e      	beq.n	800256c <ghost_moving_process+0xe8>
	{
		ghost_0.i_pre = ghost_0.i;
 800254e:	4b53      	ldr	r3, [pc, #332]	@ (800269c <ghost_moving_process+0x218>)
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	4b52      	ldr	r3, [pc, #328]	@ (800269c <ghost_moving_process+0x218>)
 8002554:	709a      	strb	r2, [r3, #2]
		ghost_0.j_pre = ghost_0.j;
 8002556:	4b51      	ldr	r3, [pc, #324]	@ (800269c <ghost_moving_process+0x218>)
 8002558:	785a      	ldrb	r2, [r3, #1]
 800255a:	4b50      	ldr	r3, [pc, #320]	@ (800269c <ghost_moving_process+0x218>)
 800255c:	70da      	strb	r2, [r3, #3]
		ghost_0.j--;
 800255e:	4b4f      	ldr	r3, [pc, #316]	@ (800269c <ghost_moving_process+0x218>)
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	3b01      	subs	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b4d      	ldr	r3, [pc, #308]	@ (800269c <ghost_moving_process+0x218>)
 8002568:	705a      	strb	r2, [r3, #1]
 800256a:	e024      	b.n	80025b6 <ghost_moving_process+0x132>
	}
	else if (ghost_0.direction == RIGHT && ghost_0.j < MAZE_COLUMN_N - 1 && maze.cells[ghost_0.i][ghost_0.j + 1] != WALL)
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <ghost_moving_process+0x218>)
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d120      	bne.n	80025b6 <ghost_moving_process+0x132>
 8002574:	4b49      	ldr	r3, [pc, #292]	@ (800269c <ghost_moving_process+0x218>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	2b0d      	cmp	r3, #13
 800257a:	d81c      	bhi.n	80025b6 <ghost_moving_process+0x132>
 800257c:	4b47      	ldr	r3, [pc, #284]	@ (800269c <ghost_moving_process+0x218>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	4b46      	ldr	r3, [pc, #280]	@ (800269c <ghost_moving_process+0x218>)
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	4945      	ldr	r1, [pc, #276]	@ (80026a0 <ghost_moving_process+0x21c>)
 800258a:	4603      	mov	r3, r0
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a1b      	subs	r3, r3, r0
 8002590:	440b      	add	r3, r1
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d00d      	beq.n	80025b6 <ghost_moving_process+0x132>
	{
		ghost_0.i_pre = ghost_0.i;
 800259a:	4b40      	ldr	r3, [pc, #256]	@ (800269c <ghost_moving_process+0x218>)
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <ghost_moving_process+0x218>)
 80025a0:	709a      	strb	r2, [r3, #2]
		ghost_0.j_pre = ghost_0.j;
 80025a2:	4b3e      	ldr	r3, [pc, #248]	@ (800269c <ghost_moving_process+0x218>)
 80025a4:	785a      	ldrb	r2, [r3, #1]
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <ghost_moving_process+0x218>)
 80025a8:	70da      	strb	r2, [r3, #3]
		ghost_0.j++;
 80025aa:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <ghost_moving_process+0x218>)
 80025ac:	785b      	ldrb	r3, [r3, #1]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b3a      	ldr	r3, [pc, #232]	@ (800269c <ghost_moving_process+0x218>)
 80025b4:	705a      	strb	r2, [r3, #1]
	}
	else;

	if (ghost_1.direction == UP && ghost_1.i > 0 && maze.cells[ghost_1.i - 1][ghost_1.j] != WALL)
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <ghost_moving_process+0x220>)
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d121      	bne.n	8002602 <ghost_moving_process+0x17e>
 80025be:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <ghost_moving_process+0x220>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01d      	beq.n	8002602 <ghost_moving_process+0x17e>
 80025c6:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <ghost_moving_process+0x220>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	4b35      	ldr	r3, [pc, #212]	@ (80026a4 <ghost_moving_process+0x220>)
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	4618      	mov	r0, r3
 80025d2:	4933      	ldr	r1, [pc, #204]	@ (80026a0 <ghost_moving_process+0x21c>)
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	440b      	add	r3, r1
 80025dc:	4403      	add	r3, r0
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d00e      	beq.n	8002602 <ghost_moving_process+0x17e>
	{
		ghost_1.i_pre = ghost_1.i;
 80025e4:	4b2f      	ldr	r3, [pc, #188]	@ (80026a4 <ghost_moving_process+0x220>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <ghost_moving_process+0x220>)
 80025ea:	709a      	strb	r2, [r3, #2]
		ghost_1.j_pre = ghost_1.j;
 80025ec:	4b2d      	ldr	r3, [pc, #180]	@ (80026a4 <ghost_moving_process+0x220>)
 80025ee:	785a      	ldrb	r2, [r3, #1]
 80025f0:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <ghost_moving_process+0x220>)
 80025f2:	70da      	strb	r2, [r3, #3]
		ghost_1.i--;
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <ghost_moving_process+0x220>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <ghost_moving_process+0x220>)
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e077      	b.n	80026f2 <ghost_moving_process+0x26e>
	}
	else if (ghost_1.direction == DOWN && ghost_1.i < MAZE_ROW_N - 1 && maze.cells[ghost_1.i + 1][ghost_1.j] != WALL)
 8002602:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <ghost_moving_process+0x220>)
 8002604:	791b      	ldrb	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d121      	bne.n	800264e <ghost_moving_process+0x1ca>
 800260a:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <ghost_moving_process+0x220>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b0d      	cmp	r3, #13
 8002610:	d81d      	bhi.n	800264e <ghost_moving_process+0x1ca>
 8002612:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <ghost_moving_process+0x220>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <ghost_moving_process+0x220>)
 800261a:	785b      	ldrb	r3, [r3, #1]
 800261c:	4618      	mov	r0, r3
 800261e:	4920      	ldr	r1, [pc, #128]	@ (80026a0 <ghost_moving_process+0x21c>)
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	440b      	add	r3, r1
 8002628:	4403      	add	r3, r0
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d00e      	beq.n	800264e <ghost_moving_process+0x1ca>
	{
		ghost_1.i_pre = ghost_1.i;
 8002630:	4b1c      	ldr	r3, [pc, #112]	@ (80026a4 <ghost_moving_process+0x220>)
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <ghost_moving_process+0x220>)
 8002636:	709a      	strb	r2, [r3, #2]
		ghost_1.j_pre = ghost_1.j;
 8002638:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <ghost_moving_process+0x220>)
 800263a:	785a      	ldrb	r2, [r3, #1]
 800263c:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <ghost_moving_process+0x220>)
 800263e:	70da      	strb	r2, [r3, #3]
		ghost_1.i++;
 8002640:	4b18      	ldr	r3, [pc, #96]	@ (80026a4 <ghost_moving_process+0x220>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b16      	ldr	r3, [pc, #88]	@ (80026a4 <ghost_moving_process+0x220>)
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e051      	b.n	80026f2 <ghost_moving_process+0x26e>
	}
	else if (ghost_1.direction == LEFT && ghost_1.j > 0 && maze.cells[ghost_1.i][ghost_1.j - 1] != WALL)
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <ghost_moving_process+0x220>)
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d128      	bne.n	80026a8 <ghost_moving_process+0x224>
 8002656:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <ghost_moving_process+0x220>)
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d024      	beq.n	80026a8 <ghost_moving_process+0x224>
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <ghost_moving_process+0x220>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <ghost_moving_process+0x220>)
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	490d      	ldr	r1, [pc, #52]	@ (80026a0 <ghost_moving_process+0x21c>)
 800266c:	4603      	mov	r3, r0
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a1b      	subs	r3, r3, r0
 8002672:	440b      	add	r3, r1
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d015      	beq.n	80026a8 <ghost_moving_process+0x224>
	{
		ghost_1.i_pre = ghost_1.i;
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <ghost_moving_process+0x220>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <ghost_moving_process+0x220>)
 8002682:	709a      	strb	r2, [r3, #2]
		ghost_1.j_pre = ghost_1.j;
 8002684:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <ghost_moving_process+0x220>)
 8002686:	785a      	ldrb	r2, [r3, #1]
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <ghost_moving_process+0x220>)
 800268a:	70da      	strb	r2, [r3, #3]
		ghost_1.j--;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <ghost_moving_process+0x220>)
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	3b01      	subs	r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <ghost_moving_process+0x220>)
 8002696:	705a      	strb	r2, [r3, #1]
 8002698:	e02b      	b.n	80026f2 <ghost_moving_process+0x26e>
 800269a:	bf00      	nop
 800269c:	20000124 	.word	0x20000124
 80026a0:	20000144 	.word	0x20000144
 80026a4:	2000012c 	.word	0x2000012c
	}
	else if (ghost_1.direction == RIGHT && ghost_1.j < MAZE_COLUMN_N - 1 && maze.cells[ghost_1.i][ghost_1.j + 1] != WALL)
 80026a8:	4b83      	ldr	r3, [pc, #524]	@ (80028b8 <ghost_moving_process+0x434>)
 80026aa:	791b      	ldrb	r3, [r3, #4]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d120      	bne.n	80026f2 <ghost_moving_process+0x26e>
 80026b0:	4b81      	ldr	r3, [pc, #516]	@ (80028b8 <ghost_moving_process+0x434>)
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b0d      	cmp	r3, #13
 80026b6:	d81c      	bhi.n	80026f2 <ghost_moving_process+0x26e>
 80026b8:	4b7f      	ldr	r3, [pc, #508]	@ (80028b8 <ghost_moving_process+0x434>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	4b7e      	ldr	r3, [pc, #504]	@ (80028b8 <ghost_moving_process+0x434>)
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	497d      	ldr	r1, [pc, #500]	@ (80028bc <ghost_moving_process+0x438>)
 80026c6:	4603      	mov	r3, r0
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a1b      	subs	r3, r3, r0
 80026cc:	440b      	add	r3, r1
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d00d      	beq.n	80026f2 <ghost_moving_process+0x26e>
	{
		ghost_1.i_pre = ghost_1.i;
 80026d6:	4b78      	ldr	r3, [pc, #480]	@ (80028b8 <ghost_moving_process+0x434>)
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	4b77      	ldr	r3, [pc, #476]	@ (80028b8 <ghost_moving_process+0x434>)
 80026dc:	709a      	strb	r2, [r3, #2]
		ghost_1.j_pre = ghost_1.j;
 80026de:	4b76      	ldr	r3, [pc, #472]	@ (80028b8 <ghost_moving_process+0x434>)
 80026e0:	785a      	ldrb	r2, [r3, #1]
 80026e2:	4b75      	ldr	r3, [pc, #468]	@ (80028b8 <ghost_moving_process+0x434>)
 80026e4:	70da      	strb	r2, [r3, #3]
		ghost_1.j++;
 80026e6:	4b74      	ldr	r3, [pc, #464]	@ (80028b8 <ghost_moving_process+0x434>)
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <ghost_moving_process+0x434>)
 80026f0:	705a      	strb	r2, [r3, #1]
	}
	else;

	if (ghost_2.direction == UP && ghost_2.i > 0 && maze.cells[ghost_2.i - 1][ghost_2.j] != WALL)
 80026f2:	4b73      	ldr	r3, [pc, #460]	@ (80028c0 <ghost_moving_process+0x43c>)
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d121      	bne.n	800273e <ghost_moving_process+0x2ba>
 80026fa:	4b71      	ldr	r3, [pc, #452]	@ (80028c0 <ghost_moving_process+0x43c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01d      	beq.n	800273e <ghost_moving_process+0x2ba>
 8002702:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	4b6d      	ldr	r3, [pc, #436]	@ (80028c0 <ghost_moving_process+0x43c>)
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	4618      	mov	r0, r3
 800270e:	496b      	ldr	r1, [pc, #428]	@ (80028bc <ghost_moving_process+0x438>)
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	440b      	add	r3, r1
 8002718:	4403      	add	r3, r0
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d00e      	beq.n	800273e <ghost_moving_process+0x2ba>
	{
		ghost_2.i_pre = ghost_2.i;
 8002720:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	4b66      	ldr	r3, [pc, #408]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002726:	709a      	strb	r2, [r3, #2]
		ghost_2.j_pre = ghost_2.j;
 8002728:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <ghost_moving_process+0x43c>)
 800272a:	785a      	ldrb	r2, [r3, #1]
 800272c:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <ghost_moving_process+0x43c>)
 800272e:	70da      	strb	r2, [r3, #3]
		ghost_2.i--;
 8002730:	4b63      	ldr	r3, [pc, #396]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b61      	ldr	r3, [pc, #388]	@ (80028c0 <ghost_moving_process+0x43c>)
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e070      	b.n	8002820 <ghost_moving_process+0x39c>
	}
	else if (ghost_2.direction == DOWN && ghost_2.i < MAZE_ROW_N - 1 && maze.cells[ghost_2.i + 1][ghost_2.j] != WALL)
 800273e:	4b60      	ldr	r3, [pc, #384]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002740:	791b      	ldrb	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d121      	bne.n	800278a <ghost_moving_process+0x306>
 8002746:	4b5e      	ldr	r3, [pc, #376]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b0d      	cmp	r3, #13
 800274c:	d81d      	bhi.n	800278a <ghost_moving_process+0x306>
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	4b5a      	ldr	r3, [pc, #360]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	4618      	mov	r0, r3
 800275a:	4958      	ldr	r1, [pc, #352]	@ (80028bc <ghost_moving_process+0x438>)
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	440b      	add	r3, r1
 8002764:	4403      	add	r3, r0
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d00e      	beq.n	800278a <ghost_moving_process+0x306>
	{
		ghost_2.i_pre = ghost_2.i;
 800276c:	4b54      	ldr	r3, [pc, #336]	@ (80028c0 <ghost_moving_process+0x43c>)
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002772:	709a      	strb	r2, [r3, #2]
		ghost_2.j_pre = ghost_2.j;
 8002774:	4b52      	ldr	r3, [pc, #328]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002776:	785a      	ldrb	r2, [r3, #1]
 8002778:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <ghost_moving_process+0x43c>)
 800277a:	70da      	strb	r2, [r3, #3]
		ghost_2.i++;
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <ghost_moving_process+0x43c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b4e      	ldr	r3, [pc, #312]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e04a      	b.n	8002820 <ghost_moving_process+0x39c>
	}
	else if (ghost_2.direction == LEFT && ghost_2.j > 0 && maze.cells[ghost_2.i][ghost_2.j - 1] != WALL)
 800278a:	4b4d      	ldr	r3, [pc, #308]	@ (80028c0 <ghost_moving_process+0x43c>)
 800278c:	791b      	ldrb	r3, [r3, #4]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d121      	bne.n	80027d6 <ghost_moving_process+0x352>
 8002792:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d01d      	beq.n	80027d6 <ghost_moving_process+0x352>
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <ghost_moving_process+0x43c>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	4b47      	ldr	r3, [pc, #284]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	4945      	ldr	r1, [pc, #276]	@ (80028bc <ghost_moving_process+0x438>)
 80027a8:	4603      	mov	r3, r0
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a1b      	subs	r3, r3, r0
 80027ae:	440b      	add	r3, r1
 80027b0:	4413      	add	r3, r2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d00e      	beq.n	80027d6 <ghost_moving_process+0x352>
	{
		ghost_2.i_pre = ghost_2.i;
 80027b8:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	4b40      	ldr	r3, [pc, #256]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027be:	709a      	strb	r2, [r3, #2]
		ghost_2.j_pre = ghost_2.j;
 80027c0:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027c2:	785a      	ldrb	r2, [r3, #1]
 80027c4:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027c6:	70da      	strb	r2, [r3, #3]
		ghost_2.j--;
 80027c8:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027d2:	705a      	strb	r2, [r3, #1]
 80027d4:	e024      	b.n	8002820 <ghost_moving_process+0x39c>
	}
	else if (ghost_2.direction == RIGHT && ghost_2.j < MAZE_COLUMN_N - 1 && maze.cells[ghost_2.i][ghost_2.j + 1] != WALL)
 80027d6:	4b3a      	ldr	r3, [pc, #232]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027d8:	791b      	ldrb	r3, [r3, #4]
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d120      	bne.n	8002820 <ghost_moving_process+0x39c>
 80027de:	4b38      	ldr	r3, [pc, #224]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b0d      	cmp	r3, #13
 80027e4:	d81c      	bhi.n	8002820 <ghost_moving_process+0x39c>
 80027e6:	4b36      	ldr	r3, [pc, #216]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <ghost_moving_process+0x43c>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	4932      	ldr	r1, [pc, #200]	@ (80028bc <ghost_moving_process+0x438>)
 80027f4:	4603      	mov	r3, r0
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a1b      	subs	r3, r3, r0
 80027fa:	440b      	add	r3, r1
 80027fc:	4413      	add	r3, r2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d00d      	beq.n	8002820 <ghost_moving_process+0x39c>
	{
		ghost_2.i_pre = ghost_2.i;
 8002804:	4b2e      	ldr	r3, [pc, #184]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <ghost_moving_process+0x43c>)
 800280a:	709a      	strb	r2, [r3, #2]
		ghost_2.j_pre = ghost_2.j;
 800280c:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <ghost_moving_process+0x43c>)
 800280e:	785a      	ldrb	r2, [r3, #1]
 8002810:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002812:	70da      	strb	r2, [r3, #3]
		ghost_2.j++;
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <ghost_moving_process+0x43c>)
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	3301      	adds	r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <ghost_moving_process+0x43c>)
 800281e:	705a      	strb	r2, [r3, #1]
	}
	else;

	if (ghost_3.direction == UP && ghost_3.i > 0 && maze.cells[ghost_3.i - 1][ghost_3.j] != WALL)
 8002820:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <ghost_moving_process+0x440>)
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d121      	bne.n	800286c <ghost_moving_process+0x3e8>
 8002828:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <ghost_moving_process+0x440>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01d      	beq.n	800286c <ghost_moving_process+0x3e8>
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <ghost_moving_process+0x440>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <ghost_moving_process+0x440>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	4618      	mov	r0, r3
 800283c:	491f      	ldr	r1, [pc, #124]	@ (80028bc <ghost_moving_process+0x438>)
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	440b      	add	r3, r1
 8002846:	4403      	add	r3, r0
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d00e      	beq.n	800286c <ghost_moving_process+0x3e8>
	{
		ghost_3.i_pre = ghost_3.i;
 800284e:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <ghost_moving_process+0x440>)
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <ghost_moving_process+0x440>)
 8002854:	709a      	strb	r2, [r3, #2]
		ghost_3.j_pre = ghost_3.j;
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <ghost_moving_process+0x440>)
 8002858:	785a      	ldrb	r2, [r3, #1]
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <ghost_moving_process+0x440>)
 800285c:	70da      	strb	r2, [r3, #3]
		ghost_3.i--;
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <ghost_moving_process+0x440>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3b01      	subs	r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <ghost_moving_process+0x440>)
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e079      	b.n	8002960 <ghost_moving_process+0x4dc>
	}
	else if (ghost_3.direction == DOWN && ghost_3.i < MAZE_ROW_N - 1 && maze.cells[ghost_3.i + 1][ghost_3.j] != WALL)
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <ghost_moving_process+0x440>)
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d129      	bne.n	80028c8 <ghost_moving_process+0x444>
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <ghost_moving_process+0x440>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b0d      	cmp	r3, #13
 800287a:	d825      	bhi.n	80028c8 <ghost_moving_process+0x444>
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <ghost_moving_process+0x440>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <ghost_moving_process+0x440>)
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	4618      	mov	r0, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <ghost_moving_process+0x438>)
 800288a:	4613      	mov	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	440b      	add	r3, r1
 8002892:	4403      	add	r3, r0
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d016      	beq.n	80028c8 <ghost_moving_process+0x444>
	{
		ghost_3.i_pre = ghost_3.i;
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <ghost_moving_process+0x440>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <ghost_moving_process+0x440>)
 80028a0:	709a      	strb	r2, [r3, #2]
		ghost_3.j_pre = ghost_3.j;
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <ghost_moving_process+0x440>)
 80028a4:	785a      	ldrb	r2, [r3, #1]
 80028a6:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <ghost_moving_process+0x440>)
 80028a8:	70da      	strb	r2, [r3, #3]
		ghost_3.i++;
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <ghost_moving_process+0x440>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <ghost_moving_process+0x440>)
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e053      	b.n	8002960 <ghost_moving_process+0x4dc>
 80028b8:	2000012c 	.word	0x2000012c
 80028bc:	20000144 	.word	0x20000144
 80028c0:	20000134 	.word	0x20000134
 80028c4:	2000013c 	.word	0x2000013c
	}
	else if (ghost_3.direction == LEFT && ghost_3.j > 0 && maze.cells[ghost_3.i][ghost_3.j - 1] != WALL)
 80028c8:	4b28      	ldr	r3, [pc, #160]	@ (800296c <ghost_moving_process+0x4e8>)
 80028ca:	791b      	ldrb	r3, [r3, #4]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d121      	bne.n	8002914 <ghost_moving_process+0x490>
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <ghost_moving_process+0x4e8>)
 80028d2:	785b      	ldrb	r3, [r3, #1]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01d      	beq.n	8002914 <ghost_moving_process+0x490>
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <ghost_moving_process+0x4e8>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	4b23      	ldr	r3, [pc, #140]	@ (800296c <ghost_moving_process+0x4e8>)
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	1e5a      	subs	r2, r3, #1
 80028e4:	4922      	ldr	r1, [pc, #136]	@ (8002970 <ghost_moving_process+0x4ec>)
 80028e6:	4603      	mov	r3, r0
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	1a1b      	subs	r3, r3, r0
 80028ec:	440b      	add	r3, r1
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d00e      	beq.n	8002914 <ghost_moving_process+0x490>
	{
		ghost_3.i_pre = ghost_3.i;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <ghost_moving_process+0x4e8>)
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <ghost_moving_process+0x4e8>)
 80028fc:	709a      	strb	r2, [r3, #2]
		ghost_3.j_pre = ghost_3.j;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <ghost_moving_process+0x4e8>)
 8002900:	785a      	ldrb	r2, [r3, #1]
 8002902:	4b1a      	ldr	r3, [pc, #104]	@ (800296c <ghost_moving_process+0x4e8>)
 8002904:	70da      	strb	r2, [r3, #3]
		ghost_3.j--;
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <ghost_moving_process+0x4e8>)
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	3b01      	subs	r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b17      	ldr	r3, [pc, #92]	@ (800296c <ghost_moving_process+0x4e8>)
 8002910:	705a      	strb	r2, [r3, #1]
 8002912:	e025      	b.n	8002960 <ghost_moving_process+0x4dc>
	}
	else if (ghost_3.direction == RIGHT && ghost_3.j < MAZE_COLUMN_N - 1 && maze.cells[ghost_3.i][ghost_3.j + 1] != WALL)
 8002914:	4b15      	ldr	r3, [pc, #84]	@ (800296c <ghost_moving_process+0x4e8>)
 8002916:	791b      	ldrb	r3, [r3, #4]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d121      	bne.n	8002960 <ghost_moving_process+0x4dc>
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <ghost_moving_process+0x4e8>)
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b0d      	cmp	r3, #13
 8002922:	d81d      	bhi.n	8002960 <ghost_moving_process+0x4dc>
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <ghost_moving_process+0x4e8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <ghost_moving_process+0x4e8>)
 800292c:	785b      	ldrb	r3, [r3, #1]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	490f      	ldr	r1, [pc, #60]	@ (8002970 <ghost_moving_process+0x4ec>)
 8002932:	4603      	mov	r3, r0
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a1b      	subs	r3, r3, r0
 8002938:	440b      	add	r3, r1
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d00e      	beq.n	8002960 <ghost_moving_process+0x4dc>
	{
		ghost_3.i_pre = ghost_3.i;
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <ghost_moving_process+0x4e8>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <ghost_moving_process+0x4e8>)
 8002948:	709a      	strb	r2, [r3, #2]
		ghost_3.j_pre = ghost_3.j;
 800294a:	4b08      	ldr	r3, [pc, #32]	@ (800296c <ghost_moving_process+0x4e8>)
 800294c:	785a      	ldrb	r2, [r3, #1]
 800294e:	4b07      	ldr	r3, [pc, #28]	@ (800296c <ghost_moving_process+0x4e8>)
 8002950:	70da      	strb	r2, [r3, #3]
		ghost_3.j++;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <ghost_moving_process+0x4e8>)
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	3301      	adds	r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b04      	ldr	r3, [pc, #16]	@ (800296c <ghost_moving_process+0x4e8>)
 800295c:	705a      	strb	r2, [r3, #1]
	}
	else;
}
 800295e:	e7ff      	b.n	8002960 <ghost_moving_process+0x4dc>
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000013c 	.word	0x2000013c
 8002970:	20000144 	.word	0x20000144

08002974 <pac_dot_draw>:

void pac_dot_draw(uint8_t i, uint8_t j, uint16_t color)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b085      	sub	sp, #20
 8002978:	af02      	add	r7, sp, #8
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
 800297e:	460b      	mov	r3, r1
 8002980:	71bb      	strb	r3, [r7, #6]
 8002982:	4613      	mov	r3, r2
 8002984:	80bb      	strh	r3, [r7, #4]
//	lcd_draw_circle(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 2,
//					((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) * i + ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) / 2, color, 3, 1);

	lcd_fill(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 3,
 8002986:	79bb      	ldrb	r3, [r7, #6]
 8002988:	b29b      	uxth	r3, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	b29b      	uxth	r3, r3
 800298e:	3305      	adds	r3, #5
 8002990:	b298      	uxth	r0, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	b29b      	uxth	r3, r3
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	b29b      	uxth	r3, r3
 800299a:	3305      	adds	r3, #5
 800299c:	b299      	uxth	r1, r3
			((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_ROW_N) * i + ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) / 3,
			((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) - ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 3,
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	3301      	adds	r3, #1
	lcd_fill(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 3,
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b05      	subs	r3, #5
 80029aa:	b29a      	uxth	r2, r3
			((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) * i + ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) - ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) / 3, color);
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	3301      	adds	r3, #1
	lcd_fill(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 3,
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b05      	subs	r3, #5
 80029b8:	b29c      	uxth	r4, r3
 80029ba:	88bb      	ldrh	r3, [r7, #4]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4623      	mov	r3, r4
 80029c0:	f7fe f8be 	bl	8000b40 <lcd_fill>
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}

080029cc <wall_draw>:

void wall_draw(uint8_t i, uint8_t j, uint16_t color)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
 80029d6:	460b      	mov	r3, r1
 80029d8:	71bb      	strb	r3, [r7, #6]
 80029da:	4613      	mov	r3, r2
 80029dc:	80bb      	strh	r3, [r7, #4]
	lcd_fill(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j,
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	b298      	uxth	r0, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	b299      	uxth	r1, r3
			((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) * i,
			((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N),
 80029ee:	79bb      	ldrb	r3, [r7, #6]
 80029f0:	3301      	adds	r3, #1
	lcd_fill(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j,
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	b29a      	uxth	r2, r3
			((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) * i + ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N), color);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	3301      	adds	r3, #1
	lcd_fill(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j,
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	b29c      	uxth	r4, r3
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4623      	mov	r3, r4
 8002a08:	f7fe f89a 	bl	8000b40 <lcd_fill>
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd90      	pop	{r4, r7, pc}

08002a14 <pacman_draw>:

void pacman_draw(uint8_t i, uint8_t j, uint16_t color)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	71bb      	strb	r3, [r7, #6]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80bb      	strh	r3, [r7, #4]
	lcd_draw_circle(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 2,
 8002a26:	79bb      	ldrb	r3, [r7, #6]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	f103 0008 	add.w	r0, r3, #8
					((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) * i + ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) / 2, color, 6, 1);
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	011b      	lsls	r3, r3, #4
	lcd_draw_circle(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 2,
 8002a32:	f103 0108 	add.w	r1, r3, #8
 8002a36:	88ba      	ldrh	r2, [r7, #4]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2306      	movs	r3, #6
 8002a3e:	f7fe fd00 	bl	8001442 <lcd_draw_circle>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ghost_draw>:

void ghost_draw(uint8_t i, uint8_t j, uint16_t color)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
 8002a54:	460b      	mov	r3, r1
 8002a56:	71bb      	strb	r3, [r7, #6]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80bb      	strh	r3, [r7, #4]
	lcd_draw_circle(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 2,
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	f103 0008 	add.w	r0, r3, #8
					((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) * i + ((MAZE_BOTTOM_BORDER - MAZE_TOP_BORDER) / MAZE_ROW_N) / 2, color, 6, 1);
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	011b      	lsls	r3, r3, #4
	lcd_draw_circle(((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) * j + ((MAZE_RIGHT_BORDER - MAZE_LEFT_BORDER) / MAZE_COLUMN_N) / 2,
 8002a68:	f103 0108 	add.w	r1, r3, #8
 8002a6c:	88ba      	ldrh	r2, [r7, #4]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2306      	movs	r3, #6
 8002a74:	f7fe fce5 	bl	8001442 <lcd_draw_circle>
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <isButtonUp>:

uint8_t isButtonUp(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	if (button_count[1] == 1)
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <isButtonUp+0x1c>)
 8002a86:	885b      	ldrh	r3, [r3, #2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <isButtonUp+0x10>
	{
		return 1;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <isButtonUp+0x12>
	}
	return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	20000098 	.word	0x20000098

08002aa0 <isButtonDown>:

uint8_t isButtonDown(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
	if (button_count[9] == 1)
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <isButtonDown+0x1c>)
 8002aa6:	8a5b      	ldrh	r3, [r3, #18]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <isButtonDown+0x10>
	{
		return 1;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <isButtonDown+0x12>
	}
	return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20000098 	.word	0x20000098

08002ac0 <isButtonLeft>:

uint8_t isButtonLeft(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
	if (button_count[4] == 1)
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <isButtonLeft+0x1c>)
 8002ac6:	891b      	ldrh	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <isButtonLeft+0x10>
	{
		return 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <isButtonLeft+0x12>
	}
	return 0;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20000098 	.word	0x20000098

08002ae0 <isButtonRight>:

uint8_t isButtonRight(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
	if (button_count[6] == 1)
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <isButtonRight+0x1c>)
 8002ae6:	899b      	ldrh	r3, [r3, #12]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <isButtonRight+0x10>
	{
		return 1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <isButtonRight+0x12>
	}
	return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	20000098 	.word	0x20000098

08002b00 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init() {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002b04:	4802      	ldr	r0, [pc, #8]	@ (8002b10 <timer2_init+0x10>)
 8002b06:	f002 f975 	bl	8004df4 <HAL_TIM_Base_Start_IT>
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000290 	.word	0x20000290

08002b14 <timer4_init>:

void timer4_init() {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <timer4_init+0x10>)
 8002b1a:	f002 f96b 	bl	8004df4 <HAL_TIM_Base_Start_IT>
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200002d8 	.word	0x200002d8

08002b28 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <timer2_set+0x2c>)
 8002b36:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <timer2_set+0x2c>)
 8002b3a:	881a      	ldrh	r2, [r3, #0]
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <timer2_set+0x30>)
 8002b3e:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8002b40:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <timer2_set+0x34>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000022a 	.word	0x2000022a
 8002b58:	20000228 	.word	0x20000228
 8002b5c:	20000227 	.word	0x20000227

08002b60 <timer4_set>:

void timer4_set(int ms) {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <timer4_set+0x2c>)
 8002b6e:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <timer4_set+0x2c>)
 8002b72:	881a      	ldrh	r2, [r3, #0]
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <timer4_set+0x30>)
 8002b76:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <timer4_set+0x34>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000230 	.word	0x20000230
 8002b90:	2000022e 	.word	0x2000022e
 8002b94:	2000022c 	.word	0x2000022c

08002b98 <HAL_TIM_PeriodElapsedCallback>:
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 * timer2, timer4 f = 1000, T = 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba8:	d114      	bne.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b16      	ldr	r3, [pc, #88]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bbc:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002bd2:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d116      	bne.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 8002bde:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d010      	beq.n	8002c08 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 8002be6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002bf0:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c06:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 8002c08:	f7fe fcf8 	bl	80015fc <led_7seg_display>
	}
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000228 	.word	0x20000228
 8002c18:	20000227 	.word	0x20000227
 8002c1c:	2000022a 	.word	0x2000022a
 8002c20:	40000800 	.word	0x40000800
 8002c24:	2000022e 	.word	0x2000022e
 8002c28:	2000022c 	.word	0x2000022c
 8002c2c:	20000230 	.word	0x20000230

08002c30 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c34:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c36:	4a18      	ldr	r2, [pc, #96]	@ (8002c98 <MX_SPI1_Init+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c3a:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c7c:	220a      	movs	r2, #10
 8002c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c80:	4804      	ldr	r0, [pc, #16]	@ (8002c94 <MX_SPI1_Init+0x64>)
 8002c82:	f001 fa7b 	bl	800417c <HAL_SPI_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c8c:	f7fe fe26 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000234 	.word	0x20000234
 8002c98:	40013000 	.word	0x40013000

08002c9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_SPI_MspInit+0x84>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12b      	bne.n	8002d16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cf6:	2338      	movs	r3, #56	@ 0x38
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d06:	2305      	movs	r3, #5
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <HAL_SPI_MspInit+0x8c>)
 8002d12:	f000 fbff 	bl	8003514 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	@ 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40013000 	.word	0x40013000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020400 	.word	0x40020400

08002d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <NMI_Handler+0x4>

08002d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <HardFault_Handler+0x4>

08002d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <MemManage_Handler+0x4>

08002d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <BusFault_Handler+0x4>

08002d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <UsageFault_Handler+0x4>

08002da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd2:	f000 fa49 	bl	8003268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002de0:	4802      	ldr	r0, [pc, #8]	@ (8002dec <TIM2_IRQHandler+0x10>)
 8002de2:	f002 f877 	bl	8004ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000290 	.word	0x20000290

08002df0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002df4:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <TIM4_IRQHandler+0x10>)
 8002df6:	f002 f86d 	bl	8004ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	200002d8 	.word	0x200002d8

08002e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
	return 1;
 8002e08:	2301      	movs	r3, #1
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <_kill>:

int _kill(int pid, int sig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e1e:	f002 fdf3 	bl	8005a08 <__errno>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2216      	movs	r2, #22
 8002e26:	601a      	str	r2, [r3, #0]
	return -1;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_exit>:

void _exit (int status)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ffe7 	bl	8002e14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e46:	bf00      	nop
 8002e48:	e7fd      	b.n	8002e46 <_exit+0x12>

08002e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	e00a      	b.n	8002e72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e5c:	f3af 8000 	nop.w
 8002e60:	4601      	mov	r1, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	60ba      	str	r2, [r7, #8]
 8002e68:	b2ca      	uxtb	r2, r1
 8002e6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	dbf0      	blt.n	8002e5c <_read+0x12>
	}

return len;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e009      	b.n	8002eaa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	60ba      	str	r2, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	dbf1      	blt.n	8002e96 <_write+0x12>
	}
	return len;
 8002eb2:	687b      	ldr	r3, [r7, #4]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_close>:

int _close(int file)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ee4:	605a      	str	r2, [r3, #4]
	return 0;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_isatty>:

int _isatty(int file)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	return 1;
 8002efc:	2301      	movs	r3, #1
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
	return 0;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	@ (8002f80 <_sbrk+0x5c>)
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <_sbrk+0x60>)
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d102      	bne.n	8002f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f40:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <_sbrk+0x64>)
 8002f42:	4a12      	ldr	r2, [pc, #72]	@ (8002f8c <_sbrk+0x68>)
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <_sbrk+0x64>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d207      	bcs.n	8002f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f54:	f002 fd58 	bl	8005a08 <__errno>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f62:	e009      	b.n	8002f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <_sbrk+0x64>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <_sbrk+0x64>)
 8002f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20020000 	.word	0x20020000
 8002f84:	00000400 	.word	0x00000400
 8002f88:	2000028c 	.word	0x2000028c
 8002f8c:	20000470 	.word	0x20000470

08002f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <SystemInit+0x20>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	4a05      	ldr	r2, [pc, #20]	@ (8002fb0 <SystemInit+0x20>)
 8002f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002fd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002fda:	f240 3247 	movw	r2, #839	@ 0x347
 8002fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe0:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002fe6:	4b18      	ldr	r3, [pc, #96]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002fe8:	2263      	movs	r2, #99	@ 0x63
 8002fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fec:	4b16      	ldr	r3, [pc, #88]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff2:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ff8:	4813      	ldr	r0, [pc, #76]	@ (8003048 <MX_TIM2_Init+0x94>)
 8002ffa:	f001 feab 	bl	8004d54 <HAL_TIM_Base_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003004:	f7fe fc6a 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003008:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800300c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	4619      	mov	r1, r3
 8003014:	480c      	ldr	r0, [pc, #48]	@ (8003048 <MX_TIM2_Init+0x94>)
 8003016:	f002 f865 	bl	80050e4 <HAL_TIM_ConfigClockSource>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003020:	f7fe fc5c 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003024:	2300      	movs	r3, #0
 8003026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800302c:	463b      	mov	r3, r7
 800302e:	4619      	mov	r1, r3
 8003030:	4805      	ldr	r0, [pc, #20]	@ (8003048 <MX_TIM2_Init+0x94>)
 8003032:	f002 fa81 	bl	8005538 <HAL_TIMEx_MasterConfigSynchronization>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800303c:	f7fe fc4e 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000290 	.word	0x20000290

0800304c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003068:	4b1d      	ldr	r3, [pc, #116]	@ (80030e0 <MX_TIM4_Init+0x94>)
 800306a:	4a1e      	ldr	r2, [pc, #120]	@ (80030e4 <MX_TIM4_Init+0x98>)
 800306c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800306e:	4b1c      	ldr	r3, [pc, #112]	@ (80030e0 <MX_TIM4_Init+0x94>)
 8003070:	f240 3247 	movw	r2, #839	@ 0x347
 8003074:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003076:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <MX_TIM4_Init+0x94>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800307c:	4b18      	ldr	r3, [pc, #96]	@ (80030e0 <MX_TIM4_Init+0x94>)
 800307e:	2263      	movs	r2, #99	@ 0x63
 8003080:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003082:	4b17      	ldr	r3, [pc, #92]	@ (80030e0 <MX_TIM4_Init+0x94>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003088:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <MX_TIM4_Init+0x94>)
 800308a:	2200      	movs	r2, #0
 800308c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800308e:	4814      	ldr	r0, [pc, #80]	@ (80030e0 <MX_TIM4_Init+0x94>)
 8003090:	f001 fe60 	bl	8004d54 <HAL_TIM_Base_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800309a:	f7fe fc1f 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800309e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	4619      	mov	r1, r3
 80030aa:	480d      	ldr	r0, [pc, #52]	@ (80030e0 <MX_TIM4_Init+0x94>)
 80030ac:	f002 f81a 	bl	80050e4 <HAL_TIM_ConfigClockSource>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80030b6:	f7fe fc11 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030c2:	463b      	mov	r3, r7
 80030c4:	4619      	mov	r1, r3
 80030c6:	4806      	ldr	r0, [pc, #24]	@ (80030e0 <MX_TIM4_Init+0x94>)
 80030c8:	f002 fa36 	bl	8005538 <HAL_TIMEx_MasterConfigSynchronization>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80030d2:	f7fe fc03 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	200002d8 	.word	0x200002d8
 80030e4:	40000800 	.word	0x40000800

080030e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f8:	d116      	bne.n	8003128 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6413      	str	r3, [r2, #64]	@ 0x40
 800310a:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <HAL_TIM_Base_MspInit+0x80>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	201c      	movs	r0, #28
 800311c:	f000 f9c3 	bl	80034a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003120:	201c      	movs	r0, #28
 8003122:	f000 f9dc 	bl	80034de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003126:	e01a      	b.n	800315e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0f      	ldr	r2, [pc, #60]	@ (800316c <HAL_TIM_Base_MspInit+0x84>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d115      	bne.n	800315e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	4a0b      	ldr	r2, [pc, #44]	@ (8003168 <HAL_TIM_Base_MspInit+0x80>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6413      	str	r3, [r2, #64]	@ 0x40
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_TIM_Base_MspInit+0x80>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	201e      	movs	r0, #30
 8003154:	f000 f9a7 	bl	80034a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003158:	201e      	movs	r0, #30
 800315a:	f000 f9c0 	bl	80034de <HAL_NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40000800 	.word	0x40000800

08003170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003174:	480d      	ldr	r0, [pc, #52]	@ (80031ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003176:	490e      	ldr	r1, [pc, #56]	@ (80031b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003178:	4a0e      	ldr	r2, [pc, #56]	@ (80031b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800317c:	e002      	b.n	8003184 <LoopCopyDataInit>

0800317e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003182:	3304      	adds	r3, #4

08003184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003188:	d3f9      	bcc.n	800317e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800318a:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800318c:	4c0b      	ldr	r4, [pc, #44]	@ (80031bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003190:	e001      	b.n	8003196 <LoopFillZerobss>

08003192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003194:	3204      	adds	r2, #4

08003196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003198:	d3fb      	bcc.n	8003192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800319a:	f7ff fef9 	bl	8002f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f002 fc39 	bl	8005a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031a2:	f7fe fafb 	bl	800179c <main>
  bx  lr    
 80031a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031b0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80031b4:	08009988 	.word	0x08009988
  ldr r2, =_sbss
 80031b8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80031bc:	20000470 	.word	0x20000470

080031c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031c0:	e7fe      	b.n	80031c0 <ADC_IRQHandler>
	...

080031c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <HAL_Init+0x40>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003204 <HAL_Init+0x40>)
 80031ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_Init+0x40>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <HAL_Init+0x40>)
 80031da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_Init+0x40>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a07      	ldr	r2, [pc, #28]	@ (8003204 <HAL_Init+0x40>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ec:	2003      	movs	r0, #3
 80031ee:	f000 f94f 	bl	8003490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031f2:	200f      	movs	r0, #15
 80031f4:	f000 f808 	bl	8003208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031f8:	f7ff fd98 	bl	8002d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00

08003208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003210:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_InitTick+0x54>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <HAL_InitTick+0x58>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800321e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f967 	bl	80034fa <HAL_SYSTICK_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00e      	b.n	8003254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b0f      	cmp	r3, #15
 800323a:	d80a      	bhi.n	8003252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800323c:	2200      	movs	r2, #0
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003244:	f000 f92f 	bl	80034a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003248:	4a06      	ldr	r2, [pc, #24]	@ (8003264 <HAL_InitTick+0x5c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000014 	.word	0x20000014
 8003260:	2000001c 	.word	0x2000001c
 8003264:	20000018 	.word	0x20000018

08003268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_IncTick+0x20>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_IncTick+0x24>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4413      	add	r3, r2
 8003278:	4a04      	ldr	r2, [pc, #16]	@ (800328c <HAL_IncTick+0x24>)
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	2000001c 	.word	0x2000001c
 800328c:	20000320 	.word	0x20000320

08003290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return uwTick;
 8003294:	4b03      	ldr	r3, [pc, #12]	@ (80032a4 <HAL_GetTick+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000320 	.word	0x20000320

080032a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7ff ffee 	bl	8003290 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032c0:	d005      	beq.n	80032ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c2:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <HAL_Delay+0x44>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ce:	bf00      	nop
 80032d0:	f7ff ffde 	bl	8003290 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d8f7      	bhi.n	80032d0 <HAL_Delay+0x28>
  {
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000001c 	.word	0x2000001c

080032f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800330c:	4013      	ands	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800331c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800333c:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <__NVIC_GetPriorityGrouping+0x18>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	f003 0307 	and.w	r3, r3, #7
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	db0b      	blt.n	800337e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4907      	ldr	r1, [pc, #28]	@ (800338c <__NVIC_EnableIRQ+0x38>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2001      	movs	r0, #1
 8003376:	fa00 f202 	lsl.w	r2, r0, r2
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000e100 	.word	0xe000e100

08003390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	db0a      	blt.n	80033ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	490c      	ldr	r1, [pc, #48]	@ (80033dc <__NVIC_SetPriority+0x4c>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	440b      	add	r3, r1
 80033b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b8:	e00a      	b.n	80033d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	4908      	ldr	r1, [pc, #32]	@ (80033e0 <__NVIC_SetPriority+0x50>)
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3b04      	subs	r3, #4
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	440b      	add	r3, r1
 80033ce:	761a      	strb	r2, [r3, #24]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	@ 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1c3 0307 	rsb	r3, r3, #7
 80033fe:	2b04      	cmp	r3, #4
 8003400:	bf28      	it	cs
 8003402:	2304      	movcs	r3, #4
 8003404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3304      	adds	r3, #4
 800340a:	2b06      	cmp	r3, #6
 800340c:	d902      	bls.n	8003414 <NVIC_EncodePriority+0x30>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3b03      	subs	r3, #3
 8003412:	e000      	b.n	8003416 <NVIC_EncodePriority+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	401a      	ands	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800342c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43d9      	mvns	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	4313      	orrs	r3, r2
         );
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	@ 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800345c:	d301      	bcc.n	8003462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345e:	2301      	movs	r3, #1
 8003460:	e00f      	b.n	8003482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003462:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <SysTick_Config+0x40>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346a:	210f      	movs	r1, #15
 800346c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003470:	f7ff ff8e 	bl	8003390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <SysTick_Config+0x40>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347a:	4b04      	ldr	r3, [pc, #16]	@ (800348c <SysTick_Config+0x40>)
 800347c:	2207      	movs	r2, #7
 800347e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	e000e010 	.word	0xe000e010

08003490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff29 	bl	80032f0 <__NVIC_SetPriorityGrouping>
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b8:	f7ff ff3e 	bl	8003338 <__NVIC_GetPriorityGrouping>
 80034bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	6978      	ldr	r0, [r7, #20]
 80034c4:	f7ff ff8e 	bl	80033e4 <NVIC_EncodePriority>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ff5d 	bl	8003390 <__NVIC_SetPriority>
}
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ff31 	bl	8003354 <__NVIC_EnableIRQ>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ffa2 	bl	800344c <SysTick_Config>
 8003508:	4603      	mov	r3, r0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	@ 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e16b      	b.n	8003808 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	f040 815a 	bne.w	8003802 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d005      	beq.n	8003566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	2b02      	cmp	r3, #2
 8003564:	d130      	bne.n	80035c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 0201 	and.w	r2, r3, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d017      	beq.n	8003604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80b4 	beq.w	8003802 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b60      	ldr	r3, [pc, #384]	@ (8003820 <HAL_GPIO_Init+0x30c>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003820 <HAL_GPIO_Init+0x30c>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036aa:	4b5d      	ldr	r3, [pc, #372]	@ (8003820 <HAL_GPIO_Init+0x30c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003824 <HAL_GPIO_Init+0x310>)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	3302      	adds	r3, #2
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a52      	ldr	r2, [pc, #328]	@ (8003828 <HAL_GPIO_Init+0x314>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x226>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a51      	ldr	r2, [pc, #324]	@ (800382c <HAL_GPIO_Init+0x318>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x222>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a50      	ldr	r2, [pc, #320]	@ (8003830 <HAL_GPIO_Init+0x31c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x21e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003834 <HAL_GPIO_Init+0x320>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x21a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003838 <HAL_GPIO_Init+0x324>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x216>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4d      	ldr	r2, [pc, #308]	@ (800383c <HAL_GPIO_Init+0x328>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x212>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4c      	ldr	r2, [pc, #304]	@ (8003840 <HAL_GPIO_Init+0x32c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x20e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4b      	ldr	r2, [pc, #300]	@ (8003844 <HAL_GPIO_Init+0x330>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x20a>
 800371a:	2307      	movs	r3, #7
 800371c:	e00e      	b.n	800373c <HAL_GPIO_Init+0x228>
 800371e:	2308      	movs	r3, #8
 8003720:	e00c      	b.n	800373c <HAL_GPIO_Init+0x228>
 8003722:	2306      	movs	r3, #6
 8003724:	e00a      	b.n	800373c <HAL_GPIO_Init+0x228>
 8003726:	2305      	movs	r3, #5
 8003728:	e008      	b.n	800373c <HAL_GPIO_Init+0x228>
 800372a:	2304      	movs	r3, #4
 800372c:	e006      	b.n	800373c <HAL_GPIO_Init+0x228>
 800372e:	2303      	movs	r3, #3
 8003730:	e004      	b.n	800373c <HAL_GPIO_Init+0x228>
 8003732:	2302      	movs	r3, #2
 8003734:	e002      	b.n	800373c <HAL_GPIO_Init+0x228>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_GPIO_Init+0x228>
 800373a:	2300      	movs	r3, #0
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f002 0203 	and.w	r2, r2, #3
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	4093      	lsls	r3, r2
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800374c:	4935      	ldr	r1, [pc, #212]	@ (8003824 <HAL_GPIO_Init+0x310>)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	3302      	adds	r3, #2
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800375a:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_GPIO_Init+0x334>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800377e:	4a32      	ldr	r2, [pc, #200]	@ (8003848 <HAL_GPIO_Init+0x334>)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <HAL_GPIO_Init+0x334>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a8:	4a27      	ldr	r2, [pc, #156]	@ (8003848 <HAL_GPIO_Init+0x334>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ae:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <HAL_GPIO_Init+0x334>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003848 <HAL_GPIO_Init+0x334>)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_GPIO_Init+0x334>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037fc:	4a12      	ldr	r2, [pc, #72]	@ (8003848 <HAL_GPIO_Init+0x334>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	f67f ae90 	bls.w	8003530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3724      	adds	r7, #36	@ 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40013800 	.word	0x40013800
 8003828:	40020000 	.word	0x40020000
 800382c:	40020400 	.word	0x40020400
 8003830:	40020800 	.word	0x40020800
 8003834:	40020c00 	.word	0x40020c00
 8003838:	40021000 	.word	0x40021000
 800383c:	40021400 	.word	0x40021400
 8003840:	40021800 	.word	0x40021800
 8003844:	40021c00 	.word	0x40021c00
 8003848:	40013c00 	.word	0x40013c00

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	619a      	str	r2, [r3, #24]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003890:	887a      	ldrh	r2, [r7, #2]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4013      	ands	r3, r2
 8003896:	041a      	lsls	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43d9      	mvns	r1, r3
 800389c:	887b      	ldrh	r3, [r7, #2]
 800389e:	400b      	ands	r3, r1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e267      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d075      	beq.n	80039be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d2:	4b88      	ldr	r3, [pc, #544]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d00c      	beq.n	80038f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b85      	ldr	r3, [pc, #532]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d112      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038f6:	d10b      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	4b7e      	ldr	r3, [pc, #504]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05b      	beq.n	80039bc <HAL_RCC_OscConfig+0x108>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d157      	bne.n	80039bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e242      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d106      	bne.n	8003928 <HAL_RCC_OscConfig+0x74>
 800391a:	4b76      	ldr	r3, [pc, #472]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a75      	ldr	r2, [pc, #468]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e01d      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x98>
 8003932:	4b70      	ldr	r3, [pc, #448]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6f      	ldr	r2, [pc, #444]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b6d      	ldr	r3, [pc, #436]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6c      	ldr	r2, [pc, #432]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0xb0>
 800394c:	4b69      	ldr	r3, [pc, #420]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a68      	ldr	r2, [pc, #416]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b66      	ldr	r3, [pc, #408]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a65      	ldr	r2, [pc, #404]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 800395e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7ff fc90 	bl	8003290 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003974:	f7ff fc8c 	bl	8003290 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e207      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b5b      	ldr	r3, [pc, #364]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0xc0>
 8003992:	e014      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7ff fc7c 	bl	8003290 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399c:	f7ff fc78 	bl	8003290 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	@ 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1f3      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	4b51      	ldr	r3, [pc, #324]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0xe8>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d063      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b47      	ldr	r3, [pc, #284]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b44      	ldr	r3, [pc, #272]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1c7      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a06:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e03a      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7ff fc31 	bl	8003290 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a32:	f7ff fc2d 	bl	8003290 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e1a8      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4925      	ldr	r1, [pc, #148]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]
 8003a64:	e015      	b.n	8003a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_RCC_OscConfig+0x244>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7ff fc10 	bl	8003290 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7ff fc0c 	bl	8003290 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e187      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d036      	beq.n	8003b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_RCC_OscConfig+0x248>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7ff fbf0 	bl	8003290 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab4:	f7ff fbec 	bl	8003290 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e167      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x200>
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_RCC_OscConfig+0x248>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ada:	f7ff fbd9 	bl	8003290 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	e00e      	b.n	8003b00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7ff fbd5 	bl	8003290 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d907      	bls.n	8003b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e150      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	42470000 	.word	0x42470000
 8003afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ea      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8097 	beq.w	8003c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b81      	ldr	r3, [pc, #516]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	4a7c      	ldr	r2, [pc, #496]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b77      	ldr	r3, [pc, #476]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b74      	ldr	r3, [pc, #464]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a73      	ldr	r2, [pc, #460]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7ff fb95 	bl	8003290 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7ff fb91 	bl	8003290 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e10c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <HAL_RCC_OscConfig+0x474>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ea>
 8003b90:	4b64      	ldr	r3, [pc, #400]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a63      	ldr	r2, [pc, #396]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9c:	e01c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x30c>
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a5e      	ldr	r2, [pc, #376]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x324>
 8003bc0:	4b58      	ldr	r3, [pc, #352]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a57      	ldr	r2, [pc, #348]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	4b55      	ldr	r3, [pc, #340]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd0:	4a54      	ldr	r2, [pc, #336]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7ff fb56 	bl	8003290 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7ff fb52 	bl	8003290 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0cb      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfe:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ee      	beq.n	8003be8 <HAL_RCC_OscConfig+0x334>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0c:	f7ff fb40 	bl	8003290 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7ff fb3c 	bl	8003290 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0b5      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1ee      	bne.n	8003c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3c:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	4a38      	ldr	r2, [pc, #224]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a1 	beq.w	8003d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c52:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d05c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d141      	bne.n	8003cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7ff fb10 	bl	8003290 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7ff fb0c 	bl	8003290 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e087      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	019b      	lsls	r3, r3, #6
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	491b      	ldr	r1, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7ff fae5 	bl	8003290 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cca:	f7ff fae1 	bl	8003290 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e05c      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x416>
 8003ce8:	e054      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <HAL_RCC_OscConfig+0x478>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7ff face 	bl	8003290 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7ff faca 	bl	8003290 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e045      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x444>
 8003d16:	e03d      	b.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e038      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <HAL_RCC_OscConfig+0x4ec>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d028      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d121      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d11a      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d111      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800

08003da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0cc      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db8:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d90c      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b65      	ldr	r3, [pc, #404]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b63      	ldr	r3, [pc, #396]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0b8      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df8:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a58      	ldr	r2, [pc, #352]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e10:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a52      	ldr	r2, [pc, #328]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b50      	ldr	r3, [pc, #320]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	494d      	ldr	r1, [pc, #308]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d044      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b47      	ldr	r3, [pc, #284]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b3f      	ldr	r3, [pc, #252]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e06f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e72:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e067      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e82:	4b37      	ldr	r3, [pc, #220]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 0203 	bic.w	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4934      	ldr	r1, [pc, #208]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e94:	f7ff f9fc 	bl	8003290 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e9c:	f7ff f9f8 	bl	8003290 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e04f      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 020c 	and.w	r2, r3, #12
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1eb      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b25      	ldr	r3, [pc, #148]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d20c      	bcs.n	8003eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b22      	ldr	r3, [pc, #136]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b20      	ldr	r3, [pc, #128]	@ (8003f5c <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e032      	b.n	8003f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4916      	ldr	r1, [pc, #88]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f2a:	f000 f821 	bl	8003f70 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490a      	ldr	r1, [pc, #40]	@ (8003f64 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	4a09      	ldr	r2, [pc, #36]	@ (8003f68 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f95c 	bl	8003208 <HAL_InitTick>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023c00 	.word	0x40023c00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	08009888 	.word	0x08009888
 8003f68:	20000014 	.word	0x20000014
 8003f6c:	20000018 	.word	0x20000018

08003f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f74:	b094      	sub	sp, #80	@ 0x50
 8003f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f80:	2300      	movs	r3, #0
 8003f82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f88:	4b79      	ldr	r3, [pc, #484]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d00d      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f200 80e1 	bhi.w	800415c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x3a>
 8003fa2:	e0db      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa4:	4b73      	ldr	r3, [pc, #460]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003fa8:	e0db      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003faa:	4b73      	ldr	r3, [pc, #460]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fae:	e0d8      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fba:	4b6d      	ldr	r3, [pc, #436]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d063      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2200      	movs	r2, #0
 8003fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fda:	2300      	movs	r3, #0
 8003fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	0159      	lsls	r1, r3, #5
 8003ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff4:	0150      	lsls	r0, r2, #5
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	1a51      	subs	r1, r2, r1
 8003ffe:	6139      	str	r1, [r7, #16]
 8004000:	4629      	mov	r1, r5
 8004002:	eb63 0301 	sbc.w	r3, r3, r1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004014:	4659      	mov	r1, fp
 8004016:	018b      	lsls	r3, r1, #6
 8004018:	4651      	mov	r1, sl
 800401a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800401e:	4651      	mov	r1, sl
 8004020:	018a      	lsls	r2, r1, #6
 8004022:	4651      	mov	r1, sl
 8004024:	ebb2 0801 	subs.w	r8, r2, r1
 8004028:	4659      	mov	r1, fp
 800402a:	eb63 0901 	sbc.w	r9, r3, r1
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800403a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800403e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004042:	4690      	mov	r8, r2
 8004044:	4699      	mov	r9, r3
 8004046:	4623      	mov	r3, r4
 8004048:	eb18 0303 	adds.w	r3, r8, r3
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	462b      	mov	r3, r5
 8004050:	eb49 0303 	adc.w	r3, r9, r3
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004062:	4629      	mov	r1, r5
 8004064:	024b      	lsls	r3, r1, #9
 8004066:	4621      	mov	r1, r4
 8004068:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800406c:	4621      	mov	r1, r4
 800406e:	024a      	lsls	r2, r1, #9
 8004070:	4610      	mov	r0, r2
 8004072:	4619      	mov	r1, r3
 8004074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004076:	2200      	movs	r2, #0
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800407a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800407c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004080:	f7fc f8f6 	bl	8000270 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4613      	mov	r3, r2
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	e058      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408e:	4b38      	ldr	r3, [pc, #224]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	099b      	lsrs	r3, r3, #6
 8004094:	2200      	movs	r2, #0
 8004096:	4618      	mov	r0, r3
 8004098:	4611      	mov	r1, r2
 800409a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800409e:	623b      	str	r3, [r7, #32]
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	f04f 0000 	mov.w	r0, #0
 80040b0:	f04f 0100 	mov.w	r1, #0
 80040b4:	0159      	lsls	r1, r3, #5
 80040b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ba:	0150      	lsls	r0, r2, #5
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4641      	mov	r1, r8
 80040c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040c6:	4649      	mov	r1, r9
 80040c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040e0:	ebb2 040a 	subs.w	r4, r2, sl
 80040e4:	eb63 050b 	sbc.w	r5, r3, fp
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	00eb      	lsls	r3, r5, #3
 80040f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040f6:	00e2      	lsls	r2, r4, #3
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	4643      	mov	r3, r8
 80040fe:	18e3      	adds	r3, r4, r3
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	464b      	mov	r3, r9
 8004104:	eb45 0303 	adc.w	r3, r5, r3
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004116:	4629      	mov	r1, r5
 8004118:	028b      	lsls	r3, r1, #10
 800411a:	4621      	mov	r1, r4
 800411c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004120:	4621      	mov	r1, r4
 8004122:	028a      	lsls	r2, r1, #10
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412a:	2200      	movs	r2, #0
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	61fa      	str	r2, [r7, #28]
 8004130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004134:	f7fc f89c 	bl	8000270 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	3301      	adds	r3, #1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800415a:	e002      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x204>)
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004164:	4618      	mov	r0, r3
 8004166:	3750      	adds	r7, #80	@ 0x50
 8004168:	46bd      	mov	sp, r7
 800416a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800
 8004174:	00f42400 	.word	0x00f42400
 8004178:	007a1200 	.word	0x007a1200

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e07b      	b.n	8004286 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800419e:	d009      	beq.n	80041b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
 80041a6:	e005      	b.n	80041b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fe fd64 	bl	8002c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004238:	ea42 0103 	orr.w	r1, r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0104 	and.w	r1, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	f003 0210 	and.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004274:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_SPI_Transmit+0x22>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e126      	b.n	80044fe <HAL_SPI_Transmit+0x270>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b8:	f7fe ffea 	bl	8003290 <HAL_GetTick>
 80042bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d002      	beq.n	80042d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042d2:	e10b      	b.n	80044ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_SPI_Transmit+0x52>
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d102      	bne.n	80042e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042e4:	e102      	b.n	80044ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2203      	movs	r2, #3
 80042ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800432c:	d10f      	bne.n	800434e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800433c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800434c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d007      	beq.n	800436c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004374:	d14b      	bne.n	800440e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_SPI_Transmit+0xf6>
 800437e:	8afb      	ldrh	r3, [r7, #22]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d13e      	bne.n	8004402 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	881a      	ldrh	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043a8:	e02b      	b.n	8004402 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d112      	bne.n	80043de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c8:	1c9a      	adds	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043dc:	e011      	b.n	8004402 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043de:	f7fe ff57 	bl	8003290 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d803      	bhi.n	80043f6 <HAL_SPI_Transmit+0x168>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043f4:	d102      	bne.n	80043fc <HAL_SPI_Transmit+0x16e>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004400:	e074      	b.n	80044ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ce      	bne.n	80043aa <HAL_SPI_Transmit+0x11c>
 800440c:	e04c      	b.n	80044a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_SPI_Transmit+0x18e>
 8004416:	8afb      	ldrh	r3, [r7, #22]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d140      	bne.n	800449e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	7812      	ldrb	r2, [r2, #0]
 8004428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004442:	e02c      	b.n	800449e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d113      	bne.n	800447a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	330c      	adds	r3, #12
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004478:	e011      	b.n	800449e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800447a:	f7fe ff09 	bl	8003290 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d803      	bhi.n	8004492 <HAL_SPI_Transmit+0x204>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004490:	d102      	bne.n	8004498 <HAL_SPI_Transmit+0x20a>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800449c:	e026      	b.n	80044ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1cd      	bne.n	8004444 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fbcb 	bl	8004c48 <SPI_EndRxTxTransaction>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e000      	b.n	80044ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80044ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80044fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b088      	sub	sp, #32
 800450a:	af02      	add	r7, sp, #8
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004522:	d112      	bne.n	800454a <HAL_SPI_Receive+0x44>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10e      	bne.n	800454a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2204      	movs	r2, #4
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 f8f1 	bl	8004728 <HAL_SPI_TransmitReceive>
 8004546:	4603      	mov	r3, r0
 8004548:	e0ea      	b.n	8004720 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_SPI_Receive+0x52>
 8004554:	2302      	movs	r3, #2
 8004556:	e0e3      	b.n	8004720 <HAL_SPI_Receive+0x21a>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004560:	f7fe fe96 	bl	8003290 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d002      	beq.n	8004578 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004572:	2302      	movs	r3, #2
 8004574:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004576:	e0ca      	b.n	800470e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Receive+0x7e>
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004588:	e0c1      	b.n	800470e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2204      	movs	r2, #4
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	88fa      	ldrh	r2, [r7, #6]
 80045a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d0:	d10f      	bne.n	80045f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fc:	2b40      	cmp	r3, #64	@ 0x40
 80045fe:	d007      	beq.n	8004610 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800460e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d162      	bne.n	80046de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004618:	e02e      	b.n	8004678 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d115      	bne.n	8004654 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f103 020c 	add.w	r2, r3, #12
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004652:	e011      	b.n	8004678 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004654:	f7fe fe1c 	bl	8003290 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d803      	bhi.n	800466c <HAL_SPI_Receive+0x166>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800466a:	d102      	bne.n	8004672 <HAL_SPI_Receive+0x16c>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004676:	e04a      	b.n	800470e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1cb      	bne.n	800461a <HAL_SPI_Receive+0x114>
 8004682:	e031      	b.n	80046e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d113      	bne.n	80046ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	b292      	uxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046b8:	e011      	b.n	80046de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ba:	f7fe fde9 	bl	8003290 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d803      	bhi.n	80046d2 <HAL_SPI_Receive+0x1cc>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Receive+0x1d2>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80046dc:	e017      	b.n	800470e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1cd      	bne.n	8004684 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fa45 	bl	8004b7c <SPI_EndRxTransaction>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
 800470a:	e000      	b.n	800470e <HAL_SPI_Receive+0x208>
  }

error :
 800470c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800471e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08c      	sub	sp, #48	@ 0x30
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004736:	2301      	movs	r3, #1
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_SPI_TransmitReceive+0x26>
 800474a:	2302      	movs	r3, #2
 800474c:	e18a      	b.n	8004a64 <HAL_SPI_TransmitReceive+0x33c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004756:	f7fe fd9b 	bl	8003290 <HAL_GetTick>
 800475a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800476c:	887b      	ldrh	r3, [r7, #2]
 800476e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004774:	2b01      	cmp	r3, #1
 8004776:	d00f      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x70>
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477e:	d107      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x68>
 8004788:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800478c:	2b04      	cmp	r3, #4
 800478e:	d003      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004790:	2302      	movs	r3, #2
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004796:	e15b      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x82>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_TransmitReceive+0x82>
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80047b0:	e14e      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2205      	movs	r2, #5
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	887a      	ldrh	r2, [r7, #2]
 80047d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	887a      	ldrh	r2, [r7, #2]
 80047ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004806:	2b40      	cmp	r3, #64	@ 0x40
 8004808:	d007      	beq.n	800481a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004818:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004822:	d178      	bne.n	8004916 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x10a>
 800482c:	8b7b      	ldrh	r3, [r7, #26]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d166      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004856:	e053      	b.n	8004900 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d11b      	bne.n	800489e <HAL_SPI_TransmitReceive+0x176>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d016      	beq.n	800489e <HAL_SPI_TransmitReceive+0x176>
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d113      	bne.n	800489e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d119      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x1b8>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d014      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c0:	b292      	uxth	r2, r2
 80048c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048dc:	2301      	movs	r3, #1
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048e0:	f7fe fcd6 	bl	8003290 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d807      	bhi.n	8004900 <HAL_SPI_TransmitReceive+0x1d8>
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f6:	d003      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80048fe:	e0a7      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1a6      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x130>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1a1      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x130>
 8004914:	e07c      	b.n	8004a10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_SPI_TransmitReceive+0x1fc>
 800491e:	8b7b      	ldrh	r3, [r7, #26]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d16b      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	7812      	ldrb	r2, [r2, #0]
 8004930:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494a:	e057      	b.n	80049fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d11c      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x26c>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d017      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x26c>
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d114      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	330c      	adds	r3, #12
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d119      	bne.n	80049d6 <HAL_SPI_TransmitReceive+0x2ae>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d014      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049d2:	2301      	movs	r3, #1
 80049d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049d6:	f7fe fc5b 	bl	8003290 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d803      	bhi.n	80049ee <HAL_SPI_TransmitReceive+0x2c6>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ec:	d102      	bne.n	80049f4 <HAL_SPI_TransmitReceive+0x2cc>
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 80049fa:	e029      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1a2      	bne.n	800494c <HAL_SPI_TransmitReceive+0x224>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d19d      	bne.n	800494c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f917 	bl	8004c48 <SPI_EndRxTxTransaction>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d006      	beq.n	8004a2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004a2c:	e010      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	e000      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3730      	adds	r7, #48	@ 0x30
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a7c:	f7fe fc08 	bl	8003290 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a8c:	f7fe fc00 	bl	8003290 <HAL_GetTick>
 8004a90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a92:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	015b      	lsls	r3, r3, #5
 8004a98:	0d1b      	lsrs	r3, r3, #20
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa2:	e054      	b.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aaa:	d050      	beq.n	8004b4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aac:	f7fe fbf0 	bl	8003290 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d902      	bls.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d13d      	bne.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ada:	d111      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae4:	d004      	beq.n	8004af0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aee:	d107      	bne.n	8004b00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004afe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b08:	d10f      	bne.n	8004b2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e017      	b.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4013      	ands	r3, r2
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d19b      	bne.n	8004aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3720      	adds	r7, #32
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000014 	.word	0x20000014

08004b7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b90:	d111      	bne.n	8004bb6 <SPI_EndRxTransaction+0x3a>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b9a:	d004      	beq.n	8004ba6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba4:	d107      	bne.n	8004bb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bbe:	d12a      	bne.n	8004c16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc8:	d012      	beq.n	8004bf0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2180      	movs	r1, #128	@ 0x80
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff ff49 	bl	8004a6c <SPI_WaitFlagStateUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02d      	beq.n	8004c3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e026      	b.n	8004c3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff ff36 	bl	8004a6c <SPI_WaitFlagStateUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01a      	beq.n	8004c3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e013      	b.n	8004c3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2101      	movs	r1, #1
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ff23 	bl	8004a6c <SPI_WaitFlagStateUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e000      	b.n	8004c3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c54:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <SPI_EndRxTxTransaction+0x7c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc8 <SPI_EndRxTxTransaction+0x80>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0d5b      	lsrs	r3, r3, #21
 8004c60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c72:	d112      	bne.n	8004c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2180      	movs	r1, #128	@ 0x80
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7ff fef4 	bl	8004a6c <SPI_WaitFlagStateUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	f043 0220 	orr.w	r2, r3, #32
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e00f      	b.n	8004cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb0:	2b80      	cmp	r3, #128	@ 0x80
 8004cb2:	d0f2      	beq.n	8004c9a <SPI_EndRxTxTransaction+0x52>
 8004cb4:	e000      	b.n	8004cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004cb6:	bf00      	nop
  }

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000014 	.word	0x20000014
 8004cc8:	165e9f81 	.word	0x165e9f81

08004ccc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e034      	b.n	8004d4c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7fb fd70 	bl	80007dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3308      	adds	r3, #8
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 fca6 	bl	8005658 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	f000 fcf0 	bl	80056fc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6858      	ldr	r0, [r3, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	f000 fd25 	bl	8005778 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6892      	ldr	r2, [r2, #8]
 8004d42:	f041 0101 	orr.w	r1, r1, #1
 8004d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e041      	b.n	8004dea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe f9b4 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f000 fa96 	bl	80052c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e04e      	b.n	8004eaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a23      	ldr	r2, [pc, #140]	@ (8004eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e36:	d01d      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a19      	ldr	r2, [pc, #100]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x80>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d111      	bne.n	8004e98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d010      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e96:	e007      	b.n	8004ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40001800 	.word	0x40001800

08004ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d122      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11b      	bne.n	8004f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0202 	mvn.w	r2, #2
 8004f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9b5 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 8004f1c:	e005      	b.n	8004f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9a7 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f9b8 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0204 	mvn.w	r2, #4
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f98b 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f97d 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f98e 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0208 	mvn.w	r2, #8
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2204      	movs	r2, #4
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f961 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f953 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f964 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0310 	and.w	r3, r3, #16
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0210 	mvn.w	r2, #16
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2208      	movs	r2, #8
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f937 	bl	8005286 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f929 	bl	8005272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f93a 	bl	800529a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0201 	mvn.w	r2, #1
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fd fda0 	bl	8002b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005062:	2b80      	cmp	r3, #128	@ 0x80
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005070:	2b80      	cmp	r3, #128	@ 0x80
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fae0 	bl	8005644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8ff 	bl	80052ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0220 	mvn.w	r2, #32
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 faaa 	bl	8005630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_ConfigClockSource+0x1c>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0b4      	b.n	800526a <HAL_TIM_ConfigClockSource+0x186>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800511e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005138:	d03e      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xd4>
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513e:	f200 8087 	bhi.w	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005146:	f000 8086 	beq.w	8005256 <HAL_TIM_ConfigClockSource+0x172>
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800514e:	d87f      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005150:	2b70      	cmp	r3, #112	@ 0x70
 8005152:	d01a      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xa6>
 8005154:	2b70      	cmp	r3, #112	@ 0x70
 8005156:	d87b      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005158:	2b60      	cmp	r3, #96	@ 0x60
 800515a:	d050      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x11a>
 800515c:	2b60      	cmp	r3, #96	@ 0x60
 800515e:	d877      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005160:	2b50      	cmp	r3, #80	@ 0x50
 8005162:	d03c      	beq.n	80051de <HAL_TIM_ConfigClockSource+0xfa>
 8005164:	2b50      	cmp	r3, #80	@ 0x50
 8005166:	d873      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005168:	2b40      	cmp	r3, #64	@ 0x40
 800516a:	d058      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x13a>
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d86f      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b30      	cmp	r3, #48	@ 0x30
 8005172:	d064      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 8005174:	2b30      	cmp	r3, #48	@ 0x30
 8005176:	d86b      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d060      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d867      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05c      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	2b10      	cmp	r3, #16
 8005186:	d05a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	e062      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6899      	ldr	r1, [r3, #8]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f000 f9ad 	bl	80054f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	609a      	str	r2, [r3, #8]
      break;
 80051b6:	e04f      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f000 f996 	bl	80054f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051da:	609a      	str	r2, [r3, #8]
      break;
 80051dc:	e03c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f000 f90a 	bl	8005404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2150      	movs	r1, #80	@ 0x50
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f963 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 80051fc:	e02c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 f929 	bl	8005462 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2160      	movs	r1, #96	@ 0x60
 8005216:	4618      	mov	r0, r3
 8005218:	f000 f953 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 800521c:	e01c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 f8ea 	bl	8005404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2140      	movs	r1, #64	@ 0x40
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f943 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 800523c:	e00c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 f93a 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 800524e:	e003      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e000      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a40      	ldr	r2, [pc, #256]	@ (80053d8 <TIM_Base_SetConfig+0x114>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e2:	d00f      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3d      	ldr	r2, [pc, #244]	@ (80053dc <TIM_Base_SetConfig+0x118>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3c      	ldr	r2, [pc, #240]	@ (80053e0 <TIM_Base_SetConfig+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3b      	ldr	r2, [pc, #236]	@ (80053e4 <TIM_Base_SetConfig+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a3a      	ldr	r2, [pc, #232]	@ (80053e8 <TIM_Base_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d108      	bne.n	8005316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2f      	ldr	r2, [pc, #188]	@ (80053d8 <TIM_Base_SetConfig+0x114>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d02b      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d027      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <TIM_Base_SetConfig+0x118>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d023      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2b      	ldr	r2, [pc, #172]	@ (80053e0 <TIM_Base_SetConfig+0x11c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01f      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2a      	ldr	r2, [pc, #168]	@ (80053e4 <TIM_Base_SetConfig+0x120>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01b      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a29      	ldr	r2, [pc, #164]	@ (80053e8 <TIM_Base_SetConfig+0x124>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d017      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a28      	ldr	r2, [pc, #160]	@ (80053ec <TIM_Base_SetConfig+0x128>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a27      	ldr	r2, [pc, #156]	@ (80053f0 <TIM_Base_SetConfig+0x12c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00f      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a26      	ldr	r2, [pc, #152]	@ (80053f4 <TIM_Base_SetConfig+0x130>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00b      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a25      	ldr	r2, [pc, #148]	@ (80053f8 <TIM_Base_SetConfig+0x134>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a24      	ldr	r2, [pc, #144]	@ (80053fc <TIM_Base_SetConfig+0x138>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a23      	ldr	r2, [pc, #140]	@ (8005400 <TIM_Base_SetConfig+0x13c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0a      	ldr	r2, [pc, #40]	@ (80053d8 <TIM_Base_SetConfig+0x114>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0xf8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	@ (80053e8 <TIM_Base_SetConfig+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800
 80053f8:	40001800 	.word	0x40001800
 80053fc:	40001c00 	.word	0x40001c00
 8005400:	40002000 	.word	0x40002000

08005404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0201 	bic.w	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800542e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 030a 	bic.w	r3, r3, #10
 8005440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0210 	bic.w	r2, r3, #16
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800548c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800549e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	f043 0307 	orr.w	r3, r3, #7
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	431a      	orrs	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	609a      	str	r2, [r3, #8]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800554c:	2302      	movs	r3, #2
 800554e:	e05a      	b.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a21      	ldr	r2, [pc, #132]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d022      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559c:	d01d      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d018      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1b      	ldr	r2, [pc, #108]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00e      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a18      	ldr	r2, [pc, #96]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a17      	ldr	r2, [pc, #92]	@ (8005628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a15      	ldr	r2, [pc, #84]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d10c      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40001800 	.word	0x40001800

08005630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005670:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4b20      	ldr	r3, [pc, #128]	@ (80056f8 <FSMC_NORSRAM_Init+0xa0>)
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005682:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005688:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800568e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005694:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800569a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80056a0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80056a6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80056ac:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80056b2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80056b8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80056be:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80056c4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d103      	bne.n	80056dc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056da:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	fff00080 	.word	0xfff00080

080056fc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005716:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800571e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800572a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005732:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800573a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	3b01      	subs	r3, #1
 8005742:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005744:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	3b02      	subs	r3, #2
 800574c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800574e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005754:	4313      	orrs	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005790:	d122      	bne.n	80057d8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80057ae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80057b6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80057be:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80057c4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6979      	ldr	r1, [r7, #20]
 80057d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80057d6:	e005      	b.n	80057e4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80057e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	cff00000 	.word	0xcff00000

080057f8 <rand>:
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <rand+0x5c>)
 80057fa:	b510      	push	{r4, lr}
 80057fc:	681c      	ldr	r4, [r3, #0]
 80057fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005800:	b9b3      	cbnz	r3, 8005830 <rand+0x38>
 8005802:	2018      	movs	r0, #24
 8005804:	f000 f95a 	bl	8005abc <malloc>
 8005808:	4602      	mov	r2, r0
 800580a:	6320      	str	r0, [r4, #48]	@ 0x30
 800580c:	b920      	cbnz	r0, 8005818 <rand+0x20>
 800580e:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <rand+0x60>)
 8005810:	4812      	ldr	r0, [pc, #72]	@ (800585c <rand+0x64>)
 8005812:	2152      	movs	r1, #82	@ 0x52
 8005814:	f000 f934 	bl	8005a80 <__assert_func>
 8005818:	4911      	ldr	r1, [pc, #68]	@ (8005860 <rand+0x68>)
 800581a:	4b12      	ldr	r3, [pc, #72]	@ (8005864 <rand+0x6c>)
 800581c:	e9c0 1300 	strd	r1, r3, [r0]
 8005820:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <rand+0x70>)
 8005822:	6083      	str	r3, [r0, #8]
 8005824:	230b      	movs	r3, #11
 8005826:	8183      	strh	r3, [r0, #12]
 8005828:	2100      	movs	r1, #0
 800582a:	2001      	movs	r0, #1
 800582c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005830:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005832:	480e      	ldr	r0, [pc, #56]	@ (800586c <rand+0x74>)
 8005834:	690b      	ldr	r3, [r1, #16]
 8005836:	694c      	ldr	r4, [r1, #20]
 8005838:	4a0d      	ldr	r2, [pc, #52]	@ (8005870 <rand+0x78>)
 800583a:	4358      	muls	r0, r3
 800583c:	fb02 0004 	mla	r0, r2, r4, r0
 8005840:	fba3 3202 	umull	r3, r2, r3, r2
 8005844:	3301      	adds	r3, #1
 8005846:	eb40 0002 	adc.w	r0, r0, r2
 800584a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800584e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005852:	bd10      	pop	{r4, pc}
 8005854:	2000002c 	.word	0x2000002c
 8005858:	08009898 	.word	0x08009898
 800585c:	080098af 	.word	0x080098af
 8005860:	abcd330e 	.word	0xabcd330e
 8005864:	e66d1234 	.word	0xe66d1234
 8005868:	0005deec 	.word	0x0005deec
 800586c:	5851f42d 	.word	0x5851f42d
 8005870:	4c957f2d 	.word	0x4c957f2d

08005874 <std>:
 8005874:	2300      	movs	r3, #0
 8005876:	b510      	push	{r4, lr}
 8005878:	4604      	mov	r4, r0
 800587a:	e9c0 3300 	strd	r3, r3, [r0]
 800587e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005882:	6083      	str	r3, [r0, #8]
 8005884:	8181      	strh	r1, [r0, #12]
 8005886:	6643      	str	r3, [r0, #100]	@ 0x64
 8005888:	81c2      	strh	r2, [r0, #14]
 800588a:	6183      	str	r3, [r0, #24]
 800588c:	4619      	mov	r1, r3
 800588e:	2208      	movs	r2, #8
 8005890:	305c      	adds	r0, #92	@ 0x5c
 8005892:	f000 f8b1 	bl	80059f8 <memset>
 8005896:	4b0d      	ldr	r3, [pc, #52]	@ (80058cc <std+0x58>)
 8005898:	6263      	str	r3, [r4, #36]	@ 0x24
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <std+0x5c>)
 800589c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <std+0x60>)
 80058a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <std+0x64>)
 80058a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80058a6:	4b0d      	ldr	r3, [pc, #52]	@ (80058dc <std+0x68>)
 80058a8:	6224      	str	r4, [r4, #32]
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d006      	beq.n	80058bc <std+0x48>
 80058ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058b2:	4294      	cmp	r4, r2
 80058b4:	d002      	beq.n	80058bc <std+0x48>
 80058b6:	33d0      	adds	r3, #208	@ 0xd0
 80058b8:	429c      	cmp	r4, r3
 80058ba:	d105      	bne.n	80058c8 <std+0x54>
 80058bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c4:	f000 b8ca 	b.w	8005a5c <__retarget_lock_init_recursive>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	bf00      	nop
 80058cc:	08005d81 	.word	0x08005d81
 80058d0:	08005da3 	.word	0x08005da3
 80058d4:	08005ddb 	.word	0x08005ddb
 80058d8:	08005dff 	.word	0x08005dff
 80058dc:	20000324 	.word	0x20000324

080058e0 <stdio_exit_handler>:
 80058e0:	4a02      	ldr	r2, [pc, #8]	@ (80058ec <stdio_exit_handler+0xc>)
 80058e2:	4903      	ldr	r1, [pc, #12]	@ (80058f0 <stdio_exit_handler+0x10>)
 80058e4:	4803      	ldr	r0, [pc, #12]	@ (80058f4 <stdio_exit_handler+0x14>)
 80058e6:	f000 b869 	b.w	80059bc <_fwalk_sglue>
 80058ea:	bf00      	nop
 80058ec:	20000020 	.word	0x20000020
 80058f0:	08005d19 	.word	0x08005d19
 80058f4:	20000030 	.word	0x20000030

080058f8 <cleanup_stdio>:
 80058f8:	6841      	ldr	r1, [r0, #4]
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <cleanup_stdio+0x34>)
 80058fc:	4299      	cmp	r1, r3
 80058fe:	b510      	push	{r4, lr}
 8005900:	4604      	mov	r4, r0
 8005902:	d001      	beq.n	8005908 <cleanup_stdio+0x10>
 8005904:	f000 fa08 	bl	8005d18 <_fflush_r>
 8005908:	68a1      	ldr	r1, [r4, #8]
 800590a:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <cleanup_stdio+0x38>)
 800590c:	4299      	cmp	r1, r3
 800590e:	d002      	beq.n	8005916 <cleanup_stdio+0x1e>
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fa01 	bl	8005d18 <_fflush_r>
 8005916:	68e1      	ldr	r1, [r4, #12]
 8005918:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <cleanup_stdio+0x3c>)
 800591a:	4299      	cmp	r1, r3
 800591c:	d004      	beq.n	8005928 <cleanup_stdio+0x30>
 800591e:	4620      	mov	r0, r4
 8005920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005924:	f000 b9f8 	b.w	8005d18 <_fflush_r>
 8005928:	bd10      	pop	{r4, pc}
 800592a:	bf00      	nop
 800592c:	20000324 	.word	0x20000324
 8005930:	2000038c 	.word	0x2000038c
 8005934:	200003f4 	.word	0x200003f4

08005938 <global_stdio_init.part.0>:
 8005938:	b510      	push	{r4, lr}
 800593a:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <global_stdio_init.part.0+0x30>)
 800593c:	4c0b      	ldr	r4, [pc, #44]	@ (800596c <global_stdio_init.part.0+0x34>)
 800593e:	4a0c      	ldr	r2, [pc, #48]	@ (8005970 <global_stdio_init.part.0+0x38>)
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	4620      	mov	r0, r4
 8005944:	2200      	movs	r2, #0
 8005946:	2104      	movs	r1, #4
 8005948:	f7ff ff94 	bl	8005874 <std>
 800594c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005950:	2201      	movs	r2, #1
 8005952:	2109      	movs	r1, #9
 8005954:	f7ff ff8e 	bl	8005874 <std>
 8005958:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800595c:	2202      	movs	r2, #2
 800595e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005962:	2112      	movs	r1, #18
 8005964:	f7ff bf86 	b.w	8005874 <std>
 8005968:	2000045c 	.word	0x2000045c
 800596c:	20000324 	.word	0x20000324
 8005970:	080058e1 	.word	0x080058e1

08005974 <__sfp_lock_acquire>:
 8005974:	4801      	ldr	r0, [pc, #4]	@ (800597c <__sfp_lock_acquire+0x8>)
 8005976:	f000 b872 	b.w	8005a5e <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	20000461 	.word	0x20000461

08005980 <__sfp_lock_release>:
 8005980:	4801      	ldr	r0, [pc, #4]	@ (8005988 <__sfp_lock_release+0x8>)
 8005982:	f000 b86d 	b.w	8005a60 <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	20000461 	.word	0x20000461

0800598c <__sinit>:
 800598c:	b510      	push	{r4, lr}
 800598e:	4604      	mov	r4, r0
 8005990:	f7ff fff0 	bl	8005974 <__sfp_lock_acquire>
 8005994:	6a23      	ldr	r3, [r4, #32]
 8005996:	b11b      	cbz	r3, 80059a0 <__sinit+0x14>
 8005998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599c:	f7ff bff0 	b.w	8005980 <__sfp_lock_release>
 80059a0:	4b04      	ldr	r3, [pc, #16]	@ (80059b4 <__sinit+0x28>)
 80059a2:	6223      	str	r3, [r4, #32]
 80059a4:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <__sinit+0x2c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f5      	bne.n	8005998 <__sinit+0xc>
 80059ac:	f7ff ffc4 	bl	8005938 <global_stdio_init.part.0>
 80059b0:	e7f2      	b.n	8005998 <__sinit+0xc>
 80059b2:	bf00      	nop
 80059b4:	080058f9 	.word	0x080058f9
 80059b8:	2000045c 	.word	0x2000045c

080059bc <_fwalk_sglue>:
 80059bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c0:	4607      	mov	r7, r0
 80059c2:	4688      	mov	r8, r1
 80059c4:	4614      	mov	r4, r2
 80059c6:	2600      	movs	r6, #0
 80059c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059cc:	f1b9 0901 	subs.w	r9, r9, #1
 80059d0:	d505      	bpl.n	80059de <_fwalk_sglue+0x22>
 80059d2:	6824      	ldr	r4, [r4, #0]
 80059d4:	2c00      	cmp	r4, #0
 80059d6:	d1f7      	bne.n	80059c8 <_fwalk_sglue+0xc>
 80059d8:	4630      	mov	r0, r6
 80059da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059de:	89ab      	ldrh	r3, [r5, #12]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d907      	bls.n	80059f4 <_fwalk_sglue+0x38>
 80059e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e8:	3301      	adds	r3, #1
 80059ea:	d003      	beq.n	80059f4 <_fwalk_sglue+0x38>
 80059ec:	4629      	mov	r1, r5
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c0      	blx	r8
 80059f2:	4306      	orrs	r6, r0
 80059f4:	3568      	adds	r5, #104	@ 0x68
 80059f6:	e7e9      	b.n	80059cc <_fwalk_sglue+0x10>

080059f8 <memset>:
 80059f8:	4402      	add	r2, r0
 80059fa:	4603      	mov	r3, r0
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d100      	bne.n	8005a02 <memset+0xa>
 8005a00:	4770      	bx	lr
 8005a02:	f803 1b01 	strb.w	r1, [r3], #1
 8005a06:	e7f9      	b.n	80059fc <memset+0x4>

08005a08 <__errno>:
 8005a08:	4b01      	ldr	r3, [pc, #4]	@ (8005a10 <__errno+0x8>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	2000002c 	.word	0x2000002c

08005a14 <__libc_init_array>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	4d0d      	ldr	r5, [pc, #52]	@ (8005a4c <__libc_init_array+0x38>)
 8005a18:	4c0d      	ldr	r4, [pc, #52]	@ (8005a50 <__libc_init_array+0x3c>)
 8005a1a:	1b64      	subs	r4, r4, r5
 8005a1c:	10a4      	asrs	r4, r4, #2
 8005a1e:	2600      	movs	r6, #0
 8005a20:	42a6      	cmp	r6, r4
 8005a22:	d109      	bne.n	8005a38 <__libc_init_array+0x24>
 8005a24:	4d0b      	ldr	r5, [pc, #44]	@ (8005a54 <__libc_init_array+0x40>)
 8005a26:	4c0c      	ldr	r4, [pc, #48]	@ (8005a58 <__libc_init_array+0x44>)
 8005a28:	f000 fed4 	bl	80067d4 <_init>
 8005a2c:	1b64      	subs	r4, r4, r5
 8005a2e:	10a4      	asrs	r4, r4, #2
 8005a30:	2600      	movs	r6, #0
 8005a32:	42a6      	cmp	r6, r4
 8005a34:	d105      	bne.n	8005a42 <__libc_init_array+0x2e>
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3c:	4798      	blx	r3
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7ee      	b.n	8005a20 <__libc_init_array+0xc>
 8005a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a46:	4798      	blx	r3
 8005a48:	3601      	adds	r6, #1
 8005a4a:	e7f2      	b.n	8005a32 <__libc_init_array+0x1e>
 8005a4c:	08009980 	.word	0x08009980
 8005a50:	08009980 	.word	0x08009980
 8005a54:	08009980 	.word	0x08009980
 8005a58:	08009984 	.word	0x08009984

08005a5c <__retarget_lock_init_recursive>:
 8005a5c:	4770      	bx	lr

08005a5e <__retarget_lock_acquire_recursive>:
 8005a5e:	4770      	bx	lr

08005a60 <__retarget_lock_release_recursive>:
 8005a60:	4770      	bx	lr

08005a62 <memcpy>:
 8005a62:	440a      	add	r2, r1
 8005a64:	4291      	cmp	r1, r2
 8005a66:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005a6a:	d100      	bne.n	8005a6e <memcpy+0xc>
 8005a6c:	4770      	bx	lr
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a78:	4291      	cmp	r1, r2
 8005a7a:	d1f9      	bne.n	8005a70 <memcpy+0xe>
 8005a7c:	bd10      	pop	{r4, pc}
	...

08005a80 <__assert_func>:
 8005a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a82:	4614      	mov	r4, r2
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b09      	ldr	r3, [pc, #36]	@ (8005aac <__assert_func+0x2c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	68d8      	ldr	r0, [r3, #12]
 8005a8e:	b954      	cbnz	r4, 8005aa6 <__assert_func+0x26>
 8005a90:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <__assert_func+0x30>)
 8005a92:	461c      	mov	r4, r3
 8005a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a98:	9100      	str	r1, [sp, #0]
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	4905      	ldr	r1, [pc, #20]	@ (8005ab4 <__assert_func+0x34>)
 8005a9e:	f000 f9b3 	bl	8005e08 <fiprintf>
 8005aa2:	f000 fa19 	bl	8005ed8 <abort>
 8005aa6:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <__assert_func+0x38>)
 8005aa8:	e7f4      	b.n	8005a94 <__assert_func+0x14>
 8005aaa:	bf00      	nop
 8005aac:	2000002c 	.word	0x2000002c
 8005ab0:	08009942 	.word	0x08009942
 8005ab4:	08009914 	.word	0x08009914
 8005ab8:	08009907 	.word	0x08009907

08005abc <malloc>:
 8005abc:	4b02      	ldr	r3, [pc, #8]	@ (8005ac8 <malloc+0xc>)
 8005abe:	4601      	mov	r1, r0
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	f000 b825 	b.w	8005b10 <_malloc_r>
 8005ac6:	bf00      	nop
 8005ac8:	2000002c 	.word	0x2000002c

08005acc <sbrk_aligned>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4e0f      	ldr	r6, [pc, #60]	@ (8005b0c <sbrk_aligned+0x40>)
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	6831      	ldr	r1, [r6, #0]
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	b911      	cbnz	r1, 8005ade <sbrk_aligned+0x12>
 8005ad8:	f000 f9dc 	bl	8005e94 <_sbrk_r>
 8005adc:	6030      	str	r0, [r6, #0]
 8005ade:	4621      	mov	r1, r4
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f000 f9d7 	bl	8005e94 <_sbrk_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	d103      	bne.n	8005af2 <sbrk_aligned+0x26>
 8005aea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aee:	4620      	mov	r0, r4
 8005af0:	bd70      	pop	{r4, r5, r6, pc}
 8005af2:	1cc4      	adds	r4, r0, #3
 8005af4:	f024 0403 	bic.w	r4, r4, #3
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d0f8      	beq.n	8005aee <sbrk_aligned+0x22>
 8005afc:	1a21      	subs	r1, r4, r0
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 f9c8 	bl	8005e94 <_sbrk_r>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d1f2      	bne.n	8005aee <sbrk_aligned+0x22>
 8005b08:	e7ef      	b.n	8005aea <sbrk_aligned+0x1e>
 8005b0a:	bf00      	nop
 8005b0c:	20000464 	.word	0x20000464

08005b10 <_malloc_r>:
 8005b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4606      	mov	r6, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d904      	bls.n	8005b36 <_malloc_r+0x26>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	2000      	movs	r0, #0
 8005b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c0c <_malloc_r+0xfc>
 8005b3a:	f000 f915 	bl	8005d68 <__malloc_lock>
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	461c      	mov	r4, r3
 8005b44:	bb44      	cbnz	r4, 8005b98 <_malloc_r+0x88>
 8005b46:	4629      	mov	r1, r5
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7ff ffbf 	bl	8005acc <sbrk_aligned>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	4604      	mov	r4, r0
 8005b52:	d158      	bne.n	8005c06 <_malloc_r+0xf6>
 8005b54:	f8d8 4000 	ldr.w	r4, [r8]
 8005b58:	4627      	mov	r7, r4
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d143      	bne.n	8005be6 <_malloc_r+0xd6>
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d04b      	beq.n	8005bfa <_malloc_r+0xea>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	eb04 0903 	add.w	r9, r4, r3
 8005b6c:	f000 f992 	bl	8005e94 <_sbrk_r>
 8005b70:	4581      	cmp	r9, r0
 8005b72:	d142      	bne.n	8005bfa <_malloc_r+0xea>
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	1a6d      	subs	r5, r5, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff ffa6 	bl	8005acc <sbrk_aligned>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d03a      	beq.n	8005bfa <_malloc_r+0xea>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	442b      	add	r3, r5
 8005b88:	6023      	str	r3, [r4, #0]
 8005b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	bb62      	cbnz	r2, 8005bec <_malloc_r+0xdc>
 8005b92:	f8c8 7000 	str.w	r7, [r8]
 8005b96:	e00f      	b.n	8005bb8 <_malloc_r+0xa8>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	1b52      	subs	r2, r2, r5
 8005b9c:	d420      	bmi.n	8005be0 <_malloc_r+0xd0>
 8005b9e:	2a0b      	cmp	r2, #11
 8005ba0:	d917      	bls.n	8005bd2 <_malloc_r+0xc2>
 8005ba2:	1961      	adds	r1, r4, r5
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	6025      	str	r5, [r4, #0]
 8005ba8:	bf18      	it	ne
 8005baa:	6059      	strne	r1, [r3, #4]
 8005bac:	6863      	ldr	r3, [r4, #4]
 8005bae:	bf08      	it	eq
 8005bb0:	f8c8 1000 	streq.w	r1, [r8]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f000 f8db 	bl	8005d74 <__malloc_unlock>
 8005bbe:	f104 000b 	add.w	r0, r4, #11
 8005bc2:	1d23      	adds	r3, r4, #4
 8005bc4:	f020 0007 	bic.w	r0, r0, #7
 8005bc8:	1ac2      	subs	r2, r0, r3
 8005bca:	bf1c      	itt	ne
 8005bcc:	1a1b      	subne	r3, r3, r0
 8005bce:	50a3      	strne	r3, [r4, r2]
 8005bd0:	e7af      	b.n	8005b32 <_malloc_r+0x22>
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	bf0c      	ite	eq
 8005bd8:	f8c8 2000 	streq.w	r2, [r8]
 8005bdc:	605a      	strne	r2, [r3, #4]
 8005bde:	e7eb      	b.n	8005bb8 <_malloc_r+0xa8>
 8005be0:	4623      	mov	r3, r4
 8005be2:	6864      	ldr	r4, [r4, #4]
 8005be4:	e7ae      	b.n	8005b44 <_malloc_r+0x34>
 8005be6:	463c      	mov	r4, r7
 8005be8:	687f      	ldr	r7, [r7, #4]
 8005bea:	e7b6      	b.n	8005b5a <_malloc_r+0x4a>
 8005bec:	461a      	mov	r2, r3
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d1fb      	bne.n	8005bec <_malloc_r+0xdc>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	6053      	str	r3, [r2, #4]
 8005bf8:	e7de      	b.n	8005bb8 <_malloc_r+0xa8>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f000 f8b8 	bl	8005d74 <__malloc_unlock>
 8005c04:	e794      	b.n	8005b30 <_malloc_r+0x20>
 8005c06:	6005      	str	r5, [r0, #0]
 8005c08:	e7d6      	b.n	8005bb8 <_malloc_r+0xa8>
 8005c0a:	bf00      	nop
 8005c0c:	20000468 	.word	0x20000468

08005c10 <__sflush_r>:
 8005c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c18:	0716      	lsls	r6, r2, #28
 8005c1a:	4605      	mov	r5, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	d454      	bmi.n	8005cca <__sflush_r+0xba>
 8005c20:	684b      	ldr	r3, [r1, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dc02      	bgt.n	8005c2c <__sflush_r+0x1c>
 8005c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dd48      	ble.n	8005cbe <__sflush_r+0xae>
 8005c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c2e:	2e00      	cmp	r6, #0
 8005c30:	d045      	beq.n	8005cbe <__sflush_r+0xae>
 8005c32:	2300      	movs	r3, #0
 8005c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c38:	682f      	ldr	r7, [r5, #0]
 8005c3a:	6a21      	ldr	r1, [r4, #32]
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	d030      	beq.n	8005ca2 <__sflush_r+0x92>
 8005c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	0759      	lsls	r1, r3, #29
 8005c46:	d505      	bpl.n	8005c54 <__sflush_r+0x44>
 8005c48:	6863      	ldr	r3, [r4, #4]
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c4e:	b10b      	cbz	r3, 8005c54 <__sflush_r+0x44>
 8005c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c58:	6a21      	ldr	r1, [r4, #32]
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b0      	blx	r6
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	d106      	bne.n	8005c72 <__sflush_r+0x62>
 8005c64:	6829      	ldr	r1, [r5, #0]
 8005c66:	291d      	cmp	r1, #29
 8005c68:	d82b      	bhi.n	8005cc2 <__sflush_r+0xb2>
 8005c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <__sflush_r+0x104>)
 8005c6c:	410a      	asrs	r2, r1
 8005c6e:	07d6      	lsls	r6, r2, #31
 8005c70:	d427      	bmi.n	8005cc2 <__sflush_r+0xb2>
 8005c72:	2200      	movs	r2, #0
 8005c74:	6062      	str	r2, [r4, #4]
 8005c76:	04d9      	lsls	r1, r3, #19
 8005c78:	6922      	ldr	r2, [r4, #16]
 8005c7a:	6022      	str	r2, [r4, #0]
 8005c7c:	d504      	bpl.n	8005c88 <__sflush_r+0x78>
 8005c7e:	1c42      	adds	r2, r0, #1
 8005c80:	d101      	bne.n	8005c86 <__sflush_r+0x76>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b903      	cbnz	r3, 8005c88 <__sflush_r+0x78>
 8005c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c8a:	602f      	str	r7, [r5, #0]
 8005c8c:	b1b9      	cbz	r1, 8005cbe <__sflush_r+0xae>
 8005c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c92:	4299      	cmp	r1, r3
 8005c94:	d002      	beq.n	8005c9c <__sflush_r+0x8c>
 8005c96:	4628      	mov	r0, r5
 8005c98:	f000 f926 	bl	8005ee8 <_free_r>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ca0:	e00d      	b.n	8005cbe <__sflush_r+0xae>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	4602      	mov	r2, r0
 8005caa:	1c50      	adds	r0, r2, #1
 8005cac:	d1c9      	bne.n	8005c42 <__sflush_r+0x32>
 8005cae:	682b      	ldr	r3, [r5, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0c6      	beq.n	8005c42 <__sflush_r+0x32>
 8005cb4:	2b1d      	cmp	r3, #29
 8005cb6:	d001      	beq.n	8005cbc <__sflush_r+0xac>
 8005cb8:	2b16      	cmp	r3, #22
 8005cba:	d11e      	bne.n	8005cfa <__sflush_r+0xea>
 8005cbc:	602f      	str	r7, [r5, #0]
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e022      	b.n	8005d08 <__sflush_r+0xf8>
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	e01b      	b.n	8005d02 <__sflush_r+0xf2>
 8005cca:	690f      	ldr	r7, [r1, #16]
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	d0f6      	beq.n	8005cbe <__sflush_r+0xae>
 8005cd0:	0793      	lsls	r3, r2, #30
 8005cd2:	680e      	ldr	r6, [r1, #0]
 8005cd4:	bf08      	it	eq
 8005cd6:	694b      	ldreq	r3, [r1, #20]
 8005cd8:	600f      	str	r7, [r1, #0]
 8005cda:	bf18      	it	ne
 8005cdc:	2300      	movne	r3, #0
 8005cde:	eba6 0807 	sub.w	r8, r6, r7
 8005ce2:	608b      	str	r3, [r1, #8]
 8005ce4:	f1b8 0f00 	cmp.w	r8, #0
 8005ce8:	dde9      	ble.n	8005cbe <__sflush_r+0xae>
 8005cea:	6a21      	ldr	r1, [r4, #32]
 8005cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cee:	4643      	mov	r3, r8
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b0      	blx	r6
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	dc08      	bgt.n	8005d0c <__sflush_r+0xfc>
 8005cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0c:	4407      	add	r7, r0
 8005d0e:	eba8 0800 	sub.w	r8, r8, r0
 8005d12:	e7e7      	b.n	8005ce4 <__sflush_r+0xd4>
 8005d14:	dfbffffe 	.word	0xdfbffffe

08005d18 <_fflush_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b913      	cbnz	r3, 8005d28 <_fflush_r+0x10>
 8005d22:	2500      	movs	r5, #0
 8005d24:	4628      	mov	r0, r5
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	b118      	cbz	r0, 8005d32 <_fflush_r+0x1a>
 8005d2a:	6a03      	ldr	r3, [r0, #32]
 8005d2c:	b90b      	cbnz	r3, 8005d32 <_fflush_r+0x1a>
 8005d2e:	f7ff fe2d 	bl	800598c <__sinit>
 8005d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f3      	beq.n	8005d22 <_fflush_r+0xa>
 8005d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d3c:	07d0      	lsls	r0, r2, #31
 8005d3e:	d404      	bmi.n	8005d4a <_fflush_r+0x32>
 8005d40:	0599      	lsls	r1, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_fflush_r+0x32>
 8005d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d46:	f7ff fe8a 	bl	8005a5e <__retarget_lock_acquire_recursive>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f7ff ff5f 	bl	8005c10 <__sflush_r>
 8005d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d54:	07da      	lsls	r2, r3, #31
 8005d56:	4605      	mov	r5, r0
 8005d58:	d4e4      	bmi.n	8005d24 <_fflush_r+0xc>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	059b      	lsls	r3, r3, #22
 8005d5e:	d4e1      	bmi.n	8005d24 <_fflush_r+0xc>
 8005d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d62:	f7ff fe7d 	bl	8005a60 <__retarget_lock_release_recursive>
 8005d66:	e7dd      	b.n	8005d24 <_fflush_r+0xc>

08005d68 <__malloc_lock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	@ (8005d70 <__malloc_lock+0x8>)
 8005d6a:	f7ff be78 	b.w	8005a5e <__retarget_lock_acquire_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20000460 	.word	0x20000460

08005d74 <__malloc_unlock>:
 8005d74:	4801      	ldr	r0, [pc, #4]	@ (8005d7c <__malloc_unlock+0x8>)
 8005d76:	f7ff be73 	b.w	8005a60 <__retarget_lock_release_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	20000460 	.word	0x20000460

08005d80 <__sread>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	460c      	mov	r4, r1
 8005d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d88:	f000 f872 	bl	8005e70 <_read_r>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	bfab      	itete	ge
 8005d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d92:	89a3      	ldrhlt	r3, [r4, #12]
 8005d94:	181b      	addge	r3, r3, r0
 8005d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d9a:	bfac      	ite	ge
 8005d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d9e:	81a3      	strhlt	r3, [r4, #12]
 8005da0:	bd10      	pop	{r4, pc}

08005da2 <__swrite>:
 8005da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da6:	461f      	mov	r7, r3
 8005da8:	898b      	ldrh	r3, [r1, #12]
 8005daa:	05db      	lsls	r3, r3, #23
 8005dac:	4605      	mov	r5, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	4616      	mov	r6, r2
 8005db2:	d505      	bpl.n	8005dc0 <__swrite+0x1e>
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	2302      	movs	r3, #2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f000 f846 	bl	8005e4c <_lseek_r>
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dca:	81a3      	strh	r3, [r4, #12]
 8005dcc:	4632      	mov	r2, r6
 8005dce:	463b      	mov	r3, r7
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd6:	f000 b86d 	b.w	8005eb4 <_write_r>

08005dda <__sseek>:
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	460c      	mov	r4, r1
 8005dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de2:	f000 f833 	bl	8005e4c <_lseek_r>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	bf15      	itete	ne
 8005dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005df6:	81a3      	strheq	r3, [r4, #12]
 8005df8:	bf18      	it	ne
 8005dfa:	81a3      	strhne	r3, [r4, #12]
 8005dfc:	bd10      	pop	{r4, pc}

08005dfe <__sclose>:
 8005dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e02:	f000 b813 	b.w	8005e2c <_close_r>
	...

08005e08 <fiprintf>:
 8005e08:	b40e      	push	{r1, r2, r3}
 8005e0a:	b503      	push	{r0, r1, lr}
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	ab03      	add	r3, sp, #12
 8005e10:	4805      	ldr	r0, [pc, #20]	@ (8005e28 <fiprintf+0x20>)
 8005e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e16:	6800      	ldr	r0, [r0, #0]
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	f000 f8d9 	bl	8005fd0 <_vfiprintf_r>
 8005e1e:	b002      	add	sp, #8
 8005e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e24:	b003      	add	sp, #12
 8005e26:	4770      	bx	lr
 8005e28:	2000002c 	.word	0x2000002c

08005e2c <_close_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4d06      	ldr	r5, [pc, #24]	@ (8005e48 <_close_r+0x1c>)
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	f7fd f840 	bl	8002ebc <_close>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_close_r+0x1a>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_close_r+0x1a>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	2000046c 	.word	0x2000046c

08005e4c <_lseek_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4d07      	ldr	r5, [pc, #28]	@ (8005e6c <_lseek_r+0x20>)
 8005e50:	4604      	mov	r4, r0
 8005e52:	4608      	mov	r0, r1
 8005e54:	4611      	mov	r1, r2
 8005e56:	2200      	movs	r2, #0
 8005e58:	602a      	str	r2, [r5, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f7fd f855 	bl	8002f0a <_lseek>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_lseek_r+0x1e>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_lseek_r+0x1e>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	2000046c 	.word	0x2000046c

08005e70 <_read_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d07      	ldr	r5, [pc, #28]	@ (8005e90 <_read_r+0x20>)
 8005e74:	4604      	mov	r4, r0
 8005e76:	4608      	mov	r0, r1
 8005e78:	4611      	mov	r1, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f7fc ffe3 	bl	8002e4a <_read>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_read_r+0x1e>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_read_r+0x1e>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	2000046c 	.word	0x2000046c

08005e94 <_sbrk_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d06      	ldr	r5, [pc, #24]	@ (8005eb0 <_sbrk_r+0x1c>)
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	602b      	str	r3, [r5, #0]
 8005ea0:	f7fd f840 	bl	8002f24 <_sbrk>
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d102      	bne.n	8005eae <_sbrk_r+0x1a>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	b103      	cbz	r3, 8005eae <_sbrk_r+0x1a>
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	2000046c 	.word	0x2000046c

08005eb4 <_write_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4d07      	ldr	r5, [pc, #28]	@ (8005ed4 <_write_r+0x20>)
 8005eb8:	4604      	mov	r4, r0
 8005eba:	4608      	mov	r0, r1
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	602a      	str	r2, [r5, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f7fc ffde 	bl	8002e84 <_write>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d102      	bne.n	8005ed2 <_write_r+0x1e>
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	b103      	cbz	r3, 8005ed2 <_write_r+0x1e>
 8005ed0:	6023      	str	r3, [r4, #0]
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	2000046c 	.word	0x2000046c

08005ed8 <abort>:
 8005ed8:	b508      	push	{r3, lr}
 8005eda:	2006      	movs	r0, #6
 8005edc:	f000 fc5e 	bl	800679c <raise>
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f7fc ffa7 	bl	8002e34 <_exit>
	...

08005ee8 <_free_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4605      	mov	r5, r0
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d041      	beq.n	8005f74 <_free_r+0x8c>
 8005ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ef4:	1f0c      	subs	r4, r1, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfb8      	it	lt
 8005efa:	18e4      	addlt	r4, r4, r3
 8005efc:	f7ff ff34 	bl	8005d68 <__malloc_lock>
 8005f00:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <_free_r+0x90>)
 8005f02:	6813      	ldr	r3, [r2, #0]
 8005f04:	b933      	cbnz	r3, 8005f14 <_free_r+0x2c>
 8005f06:	6063      	str	r3, [r4, #4]
 8005f08:	6014      	str	r4, [r2, #0]
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f10:	f7ff bf30 	b.w	8005d74 <__malloc_unlock>
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	d908      	bls.n	8005f2a <_free_r+0x42>
 8005f18:	6820      	ldr	r0, [r4, #0]
 8005f1a:	1821      	adds	r1, r4, r0
 8005f1c:	428b      	cmp	r3, r1
 8005f1e:	bf01      	itttt	eq
 8005f20:	6819      	ldreq	r1, [r3, #0]
 8005f22:	685b      	ldreq	r3, [r3, #4]
 8005f24:	1809      	addeq	r1, r1, r0
 8005f26:	6021      	streq	r1, [r4, #0]
 8005f28:	e7ed      	b.n	8005f06 <_free_r+0x1e>
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	b10b      	cbz	r3, 8005f34 <_free_r+0x4c>
 8005f30:	42a3      	cmp	r3, r4
 8005f32:	d9fa      	bls.n	8005f2a <_free_r+0x42>
 8005f34:	6811      	ldr	r1, [r2, #0]
 8005f36:	1850      	adds	r0, r2, r1
 8005f38:	42a0      	cmp	r0, r4
 8005f3a:	d10b      	bne.n	8005f54 <_free_r+0x6c>
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	4401      	add	r1, r0
 8005f40:	1850      	adds	r0, r2, r1
 8005f42:	4283      	cmp	r3, r0
 8005f44:	6011      	str	r1, [r2, #0]
 8005f46:	d1e0      	bne.n	8005f0a <_free_r+0x22>
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	6053      	str	r3, [r2, #4]
 8005f4e:	4408      	add	r0, r1
 8005f50:	6010      	str	r0, [r2, #0]
 8005f52:	e7da      	b.n	8005f0a <_free_r+0x22>
 8005f54:	d902      	bls.n	8005f5c <_free_r+0x74>
 8005f56:	230c      	movs	r3, #12
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	e7d6      	b.n	8005f0a <_free_r+0x22>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	1821      	adds	r1, r4, r0
 8005f60:	428b      	cmp	r3, r1
 8005f62:	bf04      	itt	eq
 8005f64:	6819      	ldreq	r1, [r3, #0]
 8005f66:	685b      	ldreq	r3, [r3, #4]
 8005f68:	6063      	str	r3, [r4, #4]
 8005f6a:	bf04      	itt	eq
 8005f6c:	1809      	addeq	r1, r1, r0
 8005f6e:	6021      	streq	r1, [r4, #0]
 8005f70:	6054      	str	r4, [r2, #4]
 8005f72:	e7ca      	b.n	8005f0a <_free_r+0x22>
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
 8005f76:	bf00      	nop
 8005f78:	20000468 	.word	0x20000468

08005f7c <__sfputc_r>:
 8005f7c:	6893      	ldr	r3, [r2, #8]
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	b410      	push	{r4}
 8005f84:	6093      	str	r3, [r2, #8]
 8005f86:	da08      	bge.n	8005f9a <__sfputc_r+0x1e>
 8005f88:	6994      	ldr	r4, [r2, #24]
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	db01      	blt.n	8005f92 <__sfputc_r+0x16>
 8005f8e:	290a      	cmp	r1, #10
 8005f90:	d103      	bne.n	8005f9a <__sfputc_r+0x1e>
 8005f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f96:	f000 bac1 	b.w	800651c <__swbuf_r>
 8005f9a:	6813      	ldr	r3, [r2, #0]
 8005f9c:	1c58      	adds	r0, r3, #1
 8005f9e:	6010      	str	r0, [r2, #0]
 8005fa0:	7019      	strb	r1, [r3, #0]
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <__sfputs_r>:
 8005faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fac:	4606      	mov	r6, r0
 8005fae:	460f      	mov	r7, r1
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	18d5      	adds	r5, r2, r3
 8005fb4:	42ac      	cmp	r4, r5
 8005fb6:	d101      	bne.n	8005fbc <__sfputs_r+0x12>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e007      	b.n	8005fcc <__sfputs_r+0x22>
 8005fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc0:	463a      	mov	r2, r7
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	f7ff ffda 	bl	8005f7c <__sfputc_r>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d1f3      	bne.n	8005fb4 <__sfputs_r+0xa>
 8005fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fd0 <_vfiprintf_r>:
 8005fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	b09d      	sub	sp, #116	@ 0x74
 8005fd8:	4614      	mov	r4, r2
 8005fda:	4698      	mov	r8, r3
 8005fdc:	4606      	mov	r6, r0
 8005fde:	b118      	cbz	r0, 8005fe8 <_vfiprintf_r+0x18>
 8005fe0:	6a03      	ldr	r3, [r0, #32]
 8005fe2:	b90b      	cbnz	r3, 8005fe8 <_vfiprintf_r+0x18>
 8005fe4:	f7ff fcd2 	bl	800598c <__sinit>
 8005fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fea:	07d9      	lsls	r1, r3, #31
 8005fec:	d405      	bmi.n	8005ffa <_vfiprintf_r+0x2a>
 8005fee:	89ab      	ldrh	r3, [r5, #12]
 8005ff0:	059a      	lsls	r2, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_vfiprintf_r+0x2a>
 8005ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ff6:	f7ff fd32 	bl	8005a5e <__retarget_lock_acquire_recursive>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	071b      	lsls	r3, r3, #28
 8005ffe:	d501      	bpl.n	8006004 <_vfiprintf_r+0x34>
 8006000:	692b      	ldr	r3, [r5, #16]
 8006002:	b99b      	cbnz	r3, 800602c <_vfiprintf_r+0x5c>
 8006004:	4629      	mov	r1, r5
 8006006:	4630      	mov	r0, r6
 8006008:	f000 fac6 	bl	8006598 <__swsetup_r>
 800600c:	b170      	cbz	r0, 800602c <_vfiprintf_r+0x5c>
 800600e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006010:	07dc      	lsls	r4, r3, #31
 8006012:	d504      	bpl.n	800601e <_vfiprintf_r+0x4e>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006018:	b01d      	add	sp, #116	@ 0x74
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	0598      	lsls	r0, r3, #22
 8006022:	d4f7      	bmi.n	8006014 <_vfiprintf_r+0x44>
 8006024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006026:	f7ff fd1b 	bl	8005a60 <__retarget_lock_release_recursive>
 800602a:	e7f3      	b.n	8006014 <_vfiprintf_r+0x44>
 800602c:	2300      	movs	r3, #0
 800602e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006030:	2320      	movs	r3, #32
 8006032:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006036:	f8cd 800c 	str.w	r8, [sp, #12]
 800603a:	2330      	movs	r3, #48	@ 0x30
 800603c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061ec <_vfiprintf_r+0x21c>
 8006040:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006044:	f04f 0901 	mov.w	r9, #1
 8006048:	4623      	mov	r3, r4
 800604a:	469a      	mov	sl, r3
 800604c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006050:	b10a      	cbz	r2, 8006056 <_vfiprintf_r+0x86>
 8006052:	2a25      	cmp	r2, #37	@ 0x25
 8006054:	d1f9      	bne.n	800604a <_vfiprintf_r+0x7a>
 8006056:	ebba 0b04 	subs.w	fp, sl, r4
 800605a:	d00b      	beq.n	8006074 <_vfiprintf_r+0xa4>
 800605c:	465b      	mov	r3, fp
 800605e:	4622      	mov	r2, r4
 8006060:	4629      	mov	r1, r5
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff ffa1 	bl	8005faa <__sfputs_r>
 8006068:	3001      	adds	r0, #1
 800606a:	f000 80a7 	beq.w	80061bc <_vfiprintf_r+0x1ec>
 800606e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006070:	445a      	add	r2, fp
 8006072:	9209      	str	r2, [sp, #36]	@ 0x24
 8006074:	f89a 3000 	ldrb.w	r3, [sl]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 809f 	beq.w	80061bc <_vfiprintf_r+0x1ec>
 800607e:	2300      	movs	r3, #0
 8006080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006088:	f10a 0a01 	add.w	sl, sl, #1
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006094:	931a      	str	r3, [sp, #104]	@ 0x68
 8006096:	4654      	mov	r4, sl
 8006098:	2205      	movs	r2, #5
 800609a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609e:	4853      	ldr	r0, [pc, #332]	@ (80061ec <_vfiprintf_r+0x21c>)
 80060a0:	f7fa f896 	bl	80001d0 <memchr>
 80060a4:	9a04      	ldr	r2, [sp, #16]
 80060a6:	b9d8      	cbnz	r0, 80060e0 <_vfiprintf_r+0x110>
 80060a8:	06d1      	lsls	r1, r2, #27
 80060aa:	bf44      	itt	mi
 80060ac:	2320      	movmi	r3, #32
 80060ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060b2:	0713      	lsls	r3, r2, #28
 80060b4:	bf44      	itt	mi
 80060b6:	232b      	movmi	r3, #43	@ 0x2b
 80060b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060bc:	f89a 3000 	ldrb.w	r3, [sl]
 80060c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060c2:	d015      	beq.n	80060f0 <_vfiprintf_r+0x120>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4654      	mov	r4, sl
 80060c8:	2000      	movs	r0, #0
 80060ca:	f04f 0c0a 	mov.w	ip, #10
 80060ce:	4621      	mov	r1, r4
 80060d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d4:	3b30      	subs	r3, #48	@ 0x30
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d94b      	bls.n	8006172 <_vfiprintf_r+0x1a2>
 80060da:	b1b0      	cbz	r0, 800610a <_vfiprintf_r+0x13a>
 80060dc:	9207      	str	r2, [sp, #28]
 80060de:	e014      	b.n	800610a <_vfiprintf_r+0x13a>
 80060e0:	eba0 0308 	sub.w	r3, r0, r8
 80060e4:	fa09 f303 	lsl.w	r3, r9, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	46a2      	mov	sl, r4
 80060ee:	e7d2      	b.n	8006096 <_vfiprintf_r+0xc6>
 80060f0:	9b03      	ldr	r3, [sp, #12]
 80060f2:	1d19      	adds	r1, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	9103      	str	r1, [sp, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bfbb      	ittet	lt
 80060fc:	425b      	neglt	r3, r3
 80060fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006102:	9307      	strge	r3, [sp, #28]
 8006104:	9307      	strlt	r3, [sp, #28]
 8006106:	bfb8      	it	lt
 8006108:	9204      	strlt	r2, [sp, #16]
 800610a:	7823      	ldrb	r3, [r4, #0]
 800610c:	2b2e      	cmp	r3, #46	@ 0x2e
 800610e:	d10a      	bne.n	8006126 <_vfiprintf_r+0x156>
 8006110:	7863      	ldrb	r3, [r4, #1]
 8006112:	2b2a      	cmp	r3, #42	@ 0x2a
 8006114:	d132      	bne.n	800617c <_vfiprintf_r+0x1ac>
 8006116:	9b03      	ldr	r3, [sp, #12]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9203      	str	r2, [sp, #12]
 800611e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006122:	3402      	adds	r4, #2
 8006124:	9305      	str	r3, [sp, #20]
 8006126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061fc <_vfiprintf_r+0x22c>
 800612a:	7821      	ldrb	r1, [r4, #0]
 800612c:	2203      	movs	r2, #3
 800612e:	4650      	mov	r0, sl
 8006130:	f7fa f84e 	bl	80001d0 <memchr>
 8006134:	b138      	cbz	r0, 8006146 <_vfiprintf_r+0x176>
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	eba0 000a 	sub.w	r0, r0, sl
 800613c:	2240      	movs	r2, #64	@ 0x40
 800613e:	4082      	lsls	r2, r0
 8006140:	4313      	orrs	r3, r2
 8006142:	3401      	adds	r4, #1
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614a:	4829      	ldr	r0, [pc, #164]	@ (80061f0 <_vfiprintf_r+0x220>)
 800614c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006150:	2206      	movs	r2, #6
 8006152:	f7fa f83d 	bl	80001d0 <memchr>
 8006156:	2800      	cmp	r0, #0
 8006158:	d03f      	beq.n	80061da <_vfiprintf_r+0x20a>
 800615a:	4b26      	ldr	r3, [pc, #152]	@ (80061f4 <_vfiprintf_r+0x224>)
 800615c:	bb1b      	cbnz	r3, 80061a6 <_vfiprintf_r+0x1d6>
 800615e:	9b03      	ldr	r3, [sp, #12]
 8006160:	3307      	adds	r3, #7
 8006162:	f023 0307 	bic.w	r3, r3, #7
 8006166:	3308      	adds	r3, #8
 8006168:	9303      	str	r3, [sp, #12]
 800616a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800616c:	443b      	add	r3, r7
 800616e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006170:	e76a      	b.n	8006048 <_vfiprintf_r+0x78>
 8006172:	fb0c 3202 	mla	r2, ip, r2, r3
 8006176:	460c      	mov	r4, r1
 8006178:	2001      	movs	r0, #1
 800617a:	e7a8      	b.n	80060ce <_vfiprintf_r+0xfe>
 800617c:	2300      	movs	r3, #0
 800617e:	3401      	adds	r4, #1
 8006180:	9305      	str	r3, [sp, #20]
 8006182:	4619      	mov	r1, r3
 8006184:	f04f 0c0a 	mov.w	ip, #10
 8006188:	4620      	mov	r0, r4
 800618a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800618e:	3a30      	subs	r2, #48	@ 0x30
 8006190:	2a09      	cmp	r2, #9
 8006192:	d903      	bls.n	800619c <_vfiprintf_r+0x1cc>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0c6      	beq.n	8006126 <_vfiprintf_r+0x156>
 8006198:	9105      	str	r1, [sp, #20]
 800619a:	e7c4      	b.n	8006126 <_vfiprintf_r+0x156>
 800619c:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a0:	4604      	mov	r4, r0
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7f0      	b.n	8006188 <_vfiprintf_r+0x1b8>
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	462a      	mov	r2, r5
 80061ac:	4b12      	ldr	r3, [pc, #72]	@ (80061f8 <_vfiprintf_r+0x228>)
 80061ae:	a904      	add	r1, sp, #16
 80061b0:	4630      	mov	r0, r6
 80061b2:	f3af 8000 	nop.w
 80061b6:	4607      	mov	r7, r0
 80061b8:	1c78      	adds	r0, r7, #1
 80061ba:	d1d6      	bne.n	800616a <_vfiprintf_r+0x19a>
 80061bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061be:	07d9      	lsls	r1, r3, #31
 80061c0:	d405      	bmi.n	80061ce <_vfiprintf_r+0x1fe>
 80061c2:	89ab      	ldrh	r3, [r5, #12]
 80061c4:	059a      	lsls	r2, r3, #22
 80061c6:	d402      	bmi.n	80061ce <_vfiprintf_r+0x1fe>
 80061c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ca:	f7ff fc49 	bl	8005a60 <__retarget_lock_release_recursive>
 80061ce:	89ab      	ldrh	r3, [r5, #12]
 80061d0:	065b      	lsls	r3, r3, #25
 80061d2:	f53f af1f 	bmi.w	8006014 <_vfiprintf_r+0x44>
 80061d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d8:	e71e      	b.n	8006018 <_vfiprintf_r+0x48>
 80061da:	ab03      	add	r3, sp, #12
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	462a      	mov	r2, r5
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <_vfiprintf_r+0x228>)
 80061e2:	a904      	add	r1, sp, #16
 80061e4:	4630      	mov	r0, r6
 80061e6:	f000 f879 	bl	80062dc <_printf_i>
 80061ea:	e7e4      	b.n	80061b6 <_vfiprintf_r+0x1e6>
 80061ec:	08009943 	.word	0x08009943
 80061f0:	0800994d 	.word	0x0800994d
 80061f4:	00000000 	.word	0x00000000
 80061f8:	08005fab 	.word	0x08005fab
 80061fc:	08009949 	.word	0x08009949

08006200 <_printf_common>:
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	4616      	mov	r6, r2
 8006206:	4698      	mov	r8, r3
 8006208:	688a      	ldr	r2, [r1, #8]
 800620a:	690b      	ldr	r3, [r1, #16]
 800620c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006210:	4293      	cmp	r3, r2
 8006212:	bfb8      	it	lt
 8006214:	4613      	movlt	r3, r2
 8006216:	6033      	str	r3, [r6, #0]
 8006218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800621c:	4607      	mov	r7, r0
 800621e:	460c      	mov	r4, r1
 8006220:	b10a      	cbz	r2, 8006226 <_printf_common+0x26>
 8006222:	3301      	adds	r3, #1
 8006224:	6033      	str	r3, [r6, #0]
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	0699      	lsls	r1, r3, #26
 800622a:	bf42      	ittt	mi
 800622c:	6833      	ldrmi	r3, [r6, #0]
 800622e:	3302      	addmi	r3, #2
 8006230:	6033      	strmi	r3, [r6, #0]
 8006232:	6825      	ldr	r5, [r4, #0]
 8006234:	f015 0506 	ands.w	r5, r5, #6
 8006238:	d106      	bne.n	8006248 <_printf_common+0x48>
 800623a:	f104 0a19 	add.w	sl, r4, #25
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	6832      	ldr	r2, [r6, #0]
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	42ab      	cmp	r3, r5
 8006246:	dc26      	bgt.n	8006296 <_printf_common+0x96>
 8006248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800624c:	6822      	ldr	r2, [r4, #0]
 800624e:	3b00      	subs	r3, #0
 8006250:	bf18      	it	ne
 8006252:	2301      	movne	r3, #1
 8006254:	0692      	lsls	r2, r2, #26
 8006256:	d42b      	bmi.n	80062b0 <_printf_common+0xb0>
 8006258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800625c:	4641      	mov	r1, r8
 800625e:	4638      	mov	r0, r7
 8006260:	47c8      	blx	r9
 8006262:	3001      	adds	r0, #1
 8006264:	d01e      	beq.n	80062a4 <_printf_common+0xa4>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	6922      	ldr	r2, [r4, #16]
 800626a:	f003 0306 	and.w	r3, r3, #6
 800626e:	2b04      	cmp	r3, #4
 8006270:	bf02      	ittt	eq
 8006272:	68e5      	ldreq	r5, [r4, #12]
 8006274:	6833      	ldreq	r3, [r6, #0]
 8006276:	1aed      	subeq	r5, r5, r3
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	bf0c      	ite	eq
 800627c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006280:	2500      	movne	r5, #0
 8006282:	4293      	cmp	r3, r2
 8006284:	bfc4      	itt	gt
 8006286:	1a9b      	subgt	r3, r3, r2
 8006288:	18ed      	addgt	r5, r5, r3
 800628a:	2600      	movs	r6, #0
 800628c:	341a      	adds	r4, #26
 800628e:	42b5      	cmp	r5, r6
 8006290:	d11a      	bne.n	80062c8 <_printf_common+0xc8>
 8006292:	2000      	movs	r0, #0
 8006294:	e008      	b.n	80062a8 <_printf_common+0xa8>
 8006296:	2301      	movs	r3, #1
 8006298:	4652      	mov	r2, sl
 800629a:	4641      	mov	r1, r8
 800629c:	4638      	mov	r0, r7
 800629e:	47c8      	blx	r9
 80062a0:	3001      	adds	r0, #1
 80062a2:	d103      	bne.n	80062ac <_printf_common+0xac>
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ac:	3501      	adds	r5, #1
 80062ae:	e7c6      	b.n	800623e <_printf_common+0x3e>
 80062b0:	18e1      	adds	r1, r4, r3
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	2030      	movs	r0, #48	@ 0x30
 80062b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062ba:	4422      	add	r2, r4
 80062bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062c4:	3302      	adds	r3, #2
 80062c6:	e7c7      	b.n	8006258 <_printf_common+0x58>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4622      	mov	r2, r4
 80062cc:	4641      	mov	r1, r8
 80062ce:	4638      	mov	r0, r7
 80062d0:	47c8      	blx	r9
 80062d2:	3001      	adds	r0, #1
 80062d4:	d0e6      	beq.n	80062a4 <_printf_common+0xa4>
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7d9      	b.n	800628e <_printf_common+0x8e>
	...

080062dc <_printf_i>:
 80062dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062e0:	7e0f      	ldrb	r7, [r1, #24]
 80062e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062e4:	2f78      	cmp	r7, #120	@ 0x78
 80062e6:	4691      	mov	r9, r2
 80062e8:	4680      	mov	r8, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	469a      	mov	sl, r3
 80062ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062f2:	d807      	bhi.n	8006304 <_printf_i+0x28>
 80062f4:	2f62      	cmp	r7, #98	@ 0x62
 80062f6:	d80a      	bhi.n	800630e <_printf_i+0x32>
 80062f8:	2f00      	cmp	r7, #0
 80062fa:	f000 80d2 	beq.w	80064a2 <_printf_i+0x1c6>
 80062fe:	2f58      	cmp	r7, #88	@ 0x58
 8006300:	f000 80b9 	beq.w	8006476 <_printf_i+0x19a>
 8006304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800630c:	e03a      	b.n	8006384 <_printf_i+0xa8>
 800630e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006312:	2b15      	cmp	r3, #21
 8006314:	d8f6      	bhi.n	8006304 <_printf_i+0x28>
 8006316:	a101      	add	r1, pc, #4	@ (adr r1, 800631c <_printf_i+0x40>)
 8006318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800631c:	08006375 	.word	0x08006375
 8006320:	08006389 	.word	0x08006389
 8006324:	08006305 	.word	0x08006305
 8006328:	08006305 	.word	0x08006305
 800632c:	08006305 	.word	0x08006305
 8006330:	08006305 	.word	0x08006305
 8006334:	08006389 	.word	0x08006389
 8006338:	08006305 	.word	0x08006305
 800633c:	08006305 	.word	0x08006305
 8006340:	08006305 	.word	0x08006305
 8006344:	08006305 	.word	0x08006305
 8006348:	08006489 	.word	0x08006489
 800634c:	080063b3 	.word	0x080063b3
 8006350:	08006443 	.word	0x08006443
 8006354:	08006305 	.word	0x08006305
 8006358:	08006305 	.word	0x08006305
 800635c:	080064ab 	.word	0x080064ab
 8006360:	08006305 	.word	0x08006305
 8006364:	080063b3 	.word	0x080063b3
 8006368:	08006305 	.word	0x08006305
 800636c:	08006305 	.word	0x08006305
 8006370:	0800644b 	.word	0x0800644b
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	1d1a      	adds	r2, r3, #4
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6032      	str	r2, [r6, #0]
 800637c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006384:	2301      	movs	r3, #1
 8006386:	e09d      	b.n	80064c4 <_printf_i+0x1e8>
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	6820      	ldr	r0, [r4, #0]
 800638c:	1d19      	adds	r1, r3, #4
 800638e:	6031      	str	r1, [r6, #0]
 8006390:	0606      	lsls	r6, r0, #24
 8006392:	d501      	bpl.n	8006398 <_printf_i+0xbc>
 8006394:	681d      	ldr	r5, [r3, #0]
 8006396:	e003      	b.n	80063a0 <_printf_i+0xc4>
 8006398:	0645      	lsls	r5, r0, #25
 800639a:	d5fb      	bpl.n	8006394 <_printf_i+0xb8>
 800639c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	da03      	bge.n	80063ac <_printf_i+0xd0>
 80063a4:	232d      	movs	r3, #45	@ 0x2d
 80063a6:	426d      	negs	r5, r5
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ac:	4859      	ldr	r0, [pc, #356]	@ (8006514 <_printf_i+0x238>)
 80063ae:	230a      	movs	r3, #10
 80063b0:	e011      	b.n	80063d6 <_printf_i+0xfa>
 80063b2:	6821      	ldr	r1, [r4, #0]
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	0608      	lsls	r0, r1, #24
 80063b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80063bc:	d402      	bmi.n	80063c4 <_printf_i+0xe8>
 80063be:	0649      	lsls	r1, r1, #25
 80063c0:	bf48      	it	mi
 80063c2:	b2ad      	uxthmi	r5, r5
 80063c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80063c6:	4853      	ldr	r0, [pc, #332]	@ (8006514 <_printf_i+0x238>)
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	bf14      	ite	ne
 80063cc:	230a      	movne	r3, #10
 80063ce:	2308      	moveq	r3, #8
 80063d0:	2100      	movs	r1, #0
 80063d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063d6:	6866      	ldr	r6, [r4, #4]
 80063d8:	60a6      	str	r6, [r4, #8]
 80063da:	2e00      	cmp	r6, #0
 80063dc:	bfa2      	ittt	ge
 80063de:	6821      	ldrge	r1, [r4, #0]
 80063e0:	f021 0104 	bicge.w	r1, r1, #4
 80063e4:	6021      	strge	r1, [r4, #0]
 80063e6:	b90d      	cbnz	r5, 80063ec <_printf_i+0x110>
 80063e8:	2e00      	cmp	r6, #0
 80063ea:	d04b      	beq.n	8006484 <_printf_i+0x1a8>
 80063ec:	4616      	mov	r6, r2
 80063ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80063f2:	fb03 5711 	mls	r7, r3, r1, r5
 80063f6:	5dc7      	ldrb	r7, [r0, r7]
 80063f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063fc:	462f      	mov	r7, r5
 80063fe:	42bb      	cmp	r3, r7
 8006400:	460d      	mov	r5, r1
 8006402:	d9f4      	bls.n	80063ee <_printf_i+0x112>
 8006404:	2b08      	cmp	r3, #8
 8006406:	d10b      	bne.n	8006420 <_printf_i+0x144>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	07df      	lsls	r7, r3, #31
 800640c:	d508      	bpl.n	8006420 <_printf_i+0x144>
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	6861      	ldr	r1, [r4, #4]
 8006412:	4299      	cmp	r1, r3
 8006414:	bfde      	ittt	le
 8006416:	2330      	movle	r3, #48	@ 0x30
 8006418:	f806 3c01 	strble.w	r3, [r6, #-1]
 800641c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006420:	1b92      	subs	r2, r2, r6
 8006422:	6122      	str	r2, [r4, #16]
 8006424:	f8cd a000 	str.w	sl, [sp]
 8006428:	464b      	mov	r3, r9
 800642a:	aa03      	add	r2, sp, #12
 800642c:	4621      	mov	r1, r4
 800642e:	4640      	mov	r0, r8
 8006430:	f7ff fee6 	bl	8006200 <_printf_common>
 8006434:	3001      	adds	r0, #1
 8006436:	d14a      	bne.n	80064ce <_printf_i+0x1f2>
 8006438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800643c:	b004      	add	sp, #16
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f043 0320 	orr.w	r3, r3, #32
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	4833      	ldr	r0, [pc, #204]	@ (8006518 <_printf_i+0x23c>)
 800644c:	2778      	movs	r7, #120	@ 0x78
 800644e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	6831      	ldr	r1, [r6, #0]
 8006456:	061f      	lsls	r7, r3, #24
 8006458:	f851 5b04 	ldr.w	r5, [r1], #4
 800645c:	d402      	bmi.n	8006464 <_printf_i+0x188>
 800645e:	065f      	lsls	r7, r3, #25
 8006460:	bf48      	it	mi
 8006462:	b2ad      	uxthmi	r5, r5
 8006464:	6031      	str	r1, [r6, #0]
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	bf44      	itt	mi
 800646a:	f043 0320 	orrmi.w	r3, r3, #32
 800646e:	6023      	strmi	r3, [r4, #0]
 8006470:	b11d      	cbz	r5, 800647a <_printf_i+0x19e>
 8006472:	2310      	movs	r3, #16
 8006474:	e7ac      	b.n	80063d0 <_printf_i+0xf4>
 8006476:	4827      	ldr	r0, [pc, #156]	@ (8006514 <_printf_i+0x238>)
 8006478:	e7e9      	b.n	800644e <_printf_i+0x172>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	f023 0320 	bic.w	r3, r3, #32
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	e7f6      	b.n	8006472 <_printf_i+0x196>
 8006484:	4616      	mov	r6, r2
 8006486:	e7bd      	b.n	8006404 <_printf_i+0x128>
 8006488:	6833      	ldr	r3, [r6, #0]
 800648a:	6825      	ldr	r5, [r4, #0]
 800648c:	6961      	ldr	r1, [r4, #20]
 800648e:	1d18      	adds	r0, r3, #4
 8006490:	6030      	str	r0, [r6, #0]
 8006492:	062e      	lsls	r6, r5, #24
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	d501      	bpl.n	800649c <_printf_i+0x1c0>
 8006498:	6019      	str	r1, [r3, #0]
 800649a:	e002      	b.n	80064a2 <_printf_i+0x1c6>
 800649c:	0668      	lsls	r0, r5, #25
 800649e:	d5fb      	bpl.n	8006498 <_printf_i+0x1bc>
 80064a0:	8019      	strh	r1, [r3, #0]
 80064a2:	2300      	movs	r3, #0
 80064a4:	6123      	str	r3, [r4, #16]
 80064a6:	4616      	mov	r6, r2
 80064a8:	e7bc      	b.n	8006424 <_printf_i+0x148>
 80064aa:	6833      	ldr	r3, [r6, #0]
 80064ac:	1d1a      	adds	r2, r3, #4
 80064ae:	6032      	str	r2, [r6, #0]
 80064b0:	681e      	ldr	r6, [r3, #0]
 80064b2:	6862      	ldr	r2, [r4, #4]
 80064b4:	2100      	movs	r1, #0
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7f9 fe8a 	bl	80001d0 <memchr>
 80064bc:	b108      	cbz	r0, 80064c2 <_printf_i+0x1e6>
 80064be:	1b80      	subs	r0, r0, r6
 80064c0:	6060      	str	r0, [r4, #4]
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	6123      	str	r3, [r4, #16]
 80064c6:	2300      	movs	r3, #0
 80064c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064cc:	e7aa      	b.n	8006424 <_printf_i+0x148>
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	4632      	mov	r2, r6
 80064d2:	4649      	mov	r1, r9
 80064d4:	4640      	mov	r0, r8
 80064d6:	47d0      	blx	sl
 80064d8:	3001      	adds	r0, #1
 80064da:	d0ad      	beq.n	8006438 <_printf_i+0x15c>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	079b      	lsls	r3, r3, #30
 80064e0:	d413      	bmi.n	800650a <_printf_i+0x22e>
 80064e2:	68e0      	ldr	r0, [r4, #12]
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	4298      	cmp	r0, r3
 80064e8:	bfb8      	it	lt
 80064ea:	4618      	movlt	r0, r3
 80064ec:	e7a6      	b.n	800643c <_printf_i+0x160>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4632      	mov	r2, r6
 80064f2:	4649      	mov	r1, r9
 80064f4:	4640      	mov	r0, r8
 80064f6:	47d0      	blx	sl
 80064f8:	3001      	adds	r0, #1
 80064fa:	d09d      	beq.n	8006438 <_printf_i+0x15c>
 80064fc:	3501      	adds	r5, #1
 80064fe:	68e3      	ldr	r3, [r4, #12]
 8006500:	9903      	ldr	r1, [sp, #12]
 8006502:	1a5b      	subs	r3, r3, r1
 8006504:	42ab      	cmp	r3, r5
 8006506:	dcf2      	bgt.n	80064ee <_printf_i+0x212>
 8006508:	e7eb      	b.n	80064e2 <_printf_i+0x206>
 800650a:	2500      	movs	r5, #0
 800650c:	f104 0619 	add.w	r6, r4, #25
 8006510:	e7f5      	b.n	80064fe <_printf_i+0x222>
 8006512:	bf00      	nop
 8006514:	08009954 	.word	0x08009954
 8006518:	08009965 	.word	0x08009965

0800651c <__swbuf_r>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	460e      	mov	r6, r1
 8006520:	4614      	mov	r4, r2
 8006522:	4605      	mov	r5, r0
 8006524:	b118      	cbz	r0, 800652e <__swbuf_r+0x12>
 8006526:	6a03      	ldr	r3, [r0, #32]
 8006528:	b90b      	cbnz	r3, 800652e <__swbuf_r+0x12>
 800652a:	f7ff fa2f 	bl	800598c <__sinit>
 800652e:	69a3      	ldr	r3, [r4, #24]
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	071a      	lsls	r2, r3, #28
 8006536:	d501      	bpl.n	800653c <__swbuf_r+0x20>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	b943      	cbnz	r3, 800654e <__swbuf_r+0x32>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f82a 	bl	8006598 <__swsetup_r>
 8006544:	b118      	cbz	r0, 800654e <__swbuf_r+0x32>
 8006546:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800654a:	4638      	mov	r0, r7
 800654c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	6922      	ldr	r2, [r4, #16]
 8006552:	1a98      	subs	r0, r3, r2
 8006554:	6963      	ldr	r3, [r4, #20]
 8006556:	b2f6      	uxtb	r6, r6
 8006558:	4283      	cmp	r3, r0
 800655a:	4637      	mov	r7, r6
 800655c:	dc05      	bgt.n	800656a <__swbuf_r+0x4e>
 800655e:	4621      	mov	r1, r4
 8006560:	4628      	mov	r0, r5
 8006562:	f7ff fbd9 	bl	8005d18 <_fflush_r>
 8006566:	2800      	cmp	r0, #0
 8006568:	d1ed      	bne.n	8006546 <__swbuf_r+0x2a>
 800656a:	68a3      	ldr	r3, [r4, #8]
 800656c:	3b01      	subs	r3, #1
 800656e:	60a3      	str	r3, [r4, #8]
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	6022      	str	r2, [r4, #0]
 8006576:	701e      	strb	r6, [r3, #0]
 8006578:	6962      	ldr	r2, [r4, #20]
 800657a:	1c43      	adds	r3, r0, #1
 800657c:	429a      	cmp	r2, r3
 800657e:	d004      	beq.n	800658a <__swbuf_r+0x6e>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	07db      	lsls	r3, r3, #31
 8006584:	d5e1      	bpl.n	800654a <__swbuf_r+0x2e>
 8006586:	2e0a      	cmp	r6, #10
 8006588:	d1df      	bne.n	800654a <__swbuf_r+0x2e>
 800658a:	4621      	mov	r1, r4
 800658c:	4628      	mov	r0, r5
 800658e:	f7ff fbc3 	bl	8005d18 <_fflush_r>
 8006592:	2800      	cmp	r0, #0
 8006594:	d0d9      	beq.n	800654a <__swbuf_r+0x2e>
 8006596:	e7d6      	b.n	8006546 <__swbuf_r+0x2a>

08006598 <__swsetup_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4b29      	ldr	r3, [pc, #164]	@ (8006640 <__swsetup_r+0xa8>)
 800659c:	4605      	mov	r5, r0
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	460c      	mov	r4, r1
 80065a2:	b118      	cbz	r0, 80065ac <__swsetup_r+0x14>
 80065a4:	6a03      	ldr	r3, [r0, #32]
 80065a6:	b90b      	cbnz	r3, 80065ac <__swsetup_r+0x14>
 80065a8:	f7ff f9f0 	bl	800598c <__sinit>
 80065ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b0:	0719      	lsls	r1, r3, #28
 80065b2:	d422      	bmi.n	80065fa <__swsetup_r+0x62>
 80065b4:	06da      	lsls	r2, r3, #27
 80065b6:	d407      	bmi.n	80065c8 <__swsetup_r+0x30>
 80065b8:	2209      	movs	r2, #9
 80065ba:	602a      	str	r2, [r5, #0]
 80065bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c6:	e033      	b.n	8006630 <__swsetup_r+0x98>
 80065c8:	0758      	lsls	r0, r3, #29
 80065ca:	d512      	bpl.n	80065f2 <__swsetup_r+0x5a>
 80065cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065ce:	b141      	cbz	r1, 80065e2 <__swsetup_r+0x4a>
 80065d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d002      	beq.n	80065de <__swsetup_r+0x46>
 80065d8:	4628      	mov	r0, r5
 80065da:	f7ff fc85 	bl	8005ee8 <_free_r>
 80065de:	2300      	movs	r3, #0
 80065e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065e8:	81a3      	strh	r3, [r4, #12]
 80065ea:	2300      	movs	r3, #0
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f043 0308 	orr.w	r3, r3, #8
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	b94b      	cbnz	r3, 8006612 <__swsetup_r+0x7a>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006608:	d003      	beq.n	8006612 <__swsetup_r+0x7a>
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f000 f83f 	bl	8006690 <__smakebuf_r>
 8006612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006616:	f013 0201 	ands.w	r2, r3, #1
 800661a:	d00a      	beq.n	8006632 <__swsetup_r+0x9a>
 800661c:	2200      	movs	r2, #0
 800661e:	60a2      	str	r2, [r4, #8]
 8006620:	6962      	ldr	r2, [r4, #20]
 8006622:	4252      	negs	r2, r2
 8006624:	61a2      	str	r2, [r4, #24]
 8006626:	6922      	ldr	r2, [r4, #16]
 8006628:	b942      	cbnz	r2, 800663c <__swsetup_r+0xa4>
 800662a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800662e:	d1c5      	bne.n	80065bc <__swsetup_r+0x24>
 8006630:	bd38      	pop	{r3, r4, r5, pc}
 8006632:	0799      	lsls	r1, r3, #30
 8006634:	bf58      	it	pl
 8006636:	6962      	ldrpl	r2, [r4, #20]
 8006638:	60a2      	str	r2, [r4, #8]
 800663a:	e7f4      	b.n	8006626 <__swsetup_r+0x8e>
 800663c:	2000      	movs	r0, #0
 800663e:	e7f7      	b.n	8006630 <__swsetup_r+0x98>
 8006640:	2000002c 	.word	0x2000002c

08006644 <__swhatbuf_r>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	460c      	mov	r4, r1
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	2900      	cmp	r1, #0
 800664e:	b096      	sub	sp, #88	@ 0x58
 8006650:	4615      	mov	r5, r2
 8006652:	461e      	mov	r6, r3
 8006654:	da0d      	bge.n	8006672 <__swhatbuf_r+0x2e>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800665c:	f04f 0100 	mov.w	r1, #0
 8006660:	bf14      	ite	ne
 8006662:	2340      	movne	r3, #64	@ 0x40
 8006664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006668:	2000      	movs	r0, #0
 800666a:	6031      	str	r1, [r6, #0]
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	b016      	add	sp, #88	@ 0x58
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	466a      	mov	r2, sp
 8006674:	f000 f848 	bl	8006708 <_fstat_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	dbec      	blt.n	8006656 <__swhatbuf_r+0x12>
 800667c:	9901      	ldr	r1, [sp, #4]
 800667e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006686:	4259      	negs	r1, r3
 8006688:	4159      	adcs	r1, r3
 800668a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800668e:	e7eb      	b.n	8006668 <__swhatbuf_r+0x24>

08006690 <__smakebuf_r>:
 8006690:	898b      	ldrh	r3, [r1, #12]
 8006692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006694:	079d      	lsls	r5, r3, #30
 8006696:	4606      	mov	r6, r0
 8006698:	460c      	mov	r4, r1
 800669a:	d507      	bpl.n	80066ac <__smakebuf_r+0x1c>
 800669c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	6123      	str	r3, [r4, #16]
 80066a4:	2301      	movs	r3, #1
 80066a6:	6163      	str	r3, [r4, #20]
 80066a8:	b003      	add	sp, #12
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	ab01      	add	r3, sp, #4
 80066ae:	466a      	mov	r2, sp
 80066b0:	f7ff ffc8 	bl	8006644 <__swhatbuf_r>
 80066b4:	9f00      	ldr	r7, [sp, #0]
 80066b6:	4605      	mov	r5, r0
 80066b8:	4639      	mov	r1, r7
 80066ba:	4630      	mov	r0, r6
 80066bc:	f7ff fa28 	bl	8005b10 <_malloc_r>
 80066c0:	b948      	cbnz	r0, 80066d6 <__smakebuf_r+0x46>
 80066c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c6:	059a      	lsls	r2, r3, #22
 80066c8:	d4ee      	bmi.n	80066a8 <__smakebuf_r+0x18>
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	f043 0302 	orr.w	r3, r3, #2
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	e7e2      	b.n	800669c <__smakebuf_r+0xc>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	6020      	str	r0, [r4, #0]
 80066da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066de:	81a3      	strh	r3, [r4, #12]
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066e6:	b15b      	cbz	r3, 8006700 <__smakebuf_r+0x70>
 80066e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f81d 	bl	800672c <_isatty_r>
 80066f2:	b128      	cbz	r0, 8006700 <__smakebuf_r+0x70>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	431d      	orrs	r5, r3
 8006704:	81a5      	strh	r5, [r4, #12]
 8006706:	e7cf      	b.n	80066a8 <__smakebuf_r+0x18>

08006708 <_fstat_r>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4d07      	ldr	r5, [pc, #28]	@ (8006728 <_fstat_r+0x20>)
 800670c:	2300      	movs	r3, #0
 800670e:	4604      	mov	r4, r0
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	f7fc fbdd 	bl	8002ed4 <_fstat>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d102      	bne.n	8006724 <_fstat_r+0x1c>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b103      	cbz	r3, 8006724 <_fstat_r+0x1c>
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	2000046c 	.word	0x2000046c

0800672c <_isatty_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d06      	ldr	r5, [pc, #24]	@ (8006748 <_isatty_r+0x1c>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	602b      	str	r3, [r5, #0]
 8006738:	f7fc fbdc 	bl	8002ef4 <_isatty>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d102      	bne.n	8006746 <_isatty_r+0x1a>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	b103      	cbz	r3, 8006746 <_isatty_r+0x1a>
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	bd38      	pop	{r3, r4, r5, pc}
 8006748:	2000046c 	.word	0x2000046c

0800674c <_raise_r>:
 800674c:	291f      	cmp	r1, #31
 800674e:	b538      	push	{r3, r4, r5, lr}
 8006750:	4605      	mov	r5, r0
 8006752:	460c      	mov	r4, r1
 8006754:	d904      	bls.n	8006760 <_raise_r+0x14>
 8006756:	2316      	movs	r3, #22
 8006758:	6003      	str	r3, [r0, #0]
 800675a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006762:	b112      	cbz	r2, 800676a <_raise_r+0x1e>
 8006764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006768:	b94b      	cbnz	r3, 800677e <_raise_r+0x32>
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f830 	bl	80067d0 <_getpid_r>
 8006770:	4622      	mov	r2, r4
 8006772:	4601      	mov	r1, r0
 8006774:	4628      	mov	r0, r5
 8006776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800677a:	f000 b817 	b.w	80067ac <_kill_r>
 800677e:	2b01      	cmp	r3, #1
 8006780:	d00a      	beq.n	8006798 <_raise_r+0x4c>
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	d103      	bne.n	800678e <_raise_r+0x42>
 8006786:	2316      	movs	r3, #22
 8006788:	6003      	str	r3, [r0, #0]
 800678a:	2001      	movs	r0, #1
 800678c:	e7e7      	b.n	800675e <_raise_r+0x12>
 800678e:	2100      	movs	r1, #0
 8006790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006794:	4620      	mov	r0, r4
 8006796:	4798      	blx	r3
 8006798:	2000      	movs	r0, #0
 800679a:	e7e0      	b.n	800675e <_raise_r+0x12>

0800679c <raise>:
 800679c:	4b02      	ldr	r3, [pc, #8]	@ (80067a8 <raise+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f7ff bfd3 	b.w	800674c <_raise_r>
 80067a6:	bf00      	nop
 80067a8:	2000002c 	.word	0x2000002c

080067ac <_kill_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_kill_r+0x20>)
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	602b      	str	r3, [r5, #0]
 80067ba:	f7fc fb2b 	bl	8002e14 <_kill>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	d102      	bne.n	80067c8 <_kill_r+0x1c>
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	b103      	cbz	r3, 80067c8 <_kill_r+0x1c>
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	bd38      	pop	{r3, r4, r5, pc}
 80067ca:	bf00      	nop
 80067cc:	2000046c 	.word	0x2000046c

080067d0 <_getpid_r>:
 80067d0:	f7fc bb18 	b.w	8002e04 <_getpid>

080067d4 <_init>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr

080067e0 <_fini>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr
